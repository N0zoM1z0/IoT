
<html>
<head>
<meta HTTP-EQUIV='Pragma' CONTENT='no-cache'>
<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>
<link rel="stylesheet" rev="stylesheet" href="/css/content.css" type="text/css">
<script language="javascript" src="/js/check.js"></script>
<script language="javascript" src="/js/config.js"></script>
<script language="javascript" src="/js/tri.js"></script>
<script language="javascript" src="/js/jquery.js"></script>
<script language="javascript" src="/js/init.js"></script>
<script language="javascript" src="/js/sha256.js"></script>
<script language="javascript" src="/js/t_utils.js"></script>
<script language="javascript" src="/js/ajax.js"></script>
<script language="javascript" src="/js/project.js"></script>
<script language="javascript">

<!--#getobject "InternetGatewayDevice.TraceRouteDiagnostics. Host DiagnosticsState MaxHopCount Timeout Interface ResponseTime" -->
var G_Host = "<!--#leaf "1"-->";
var G_TracerouteState = "<!--#leaf "2"-->";
var G_MaxTTL = "<!--#leaf "3"-->";
var G_WaitTime = "<!--#leaf "4"-->";
var G_Interface = "<!--#leaf "5"-->";
var G_ResponseTime = "<!--#leaf "6"-->";
<!--#endgetobject -->
function HopRouteTuple()
{
	this.Path = "";
	this.hophost = "";
	this.hopaddress = "";
	this.hoperrcode = "";
	this.hoprttimes = "";
}
var hopnum=0;
var HopRoute = new Array();
<!--#getobject "InternetGatewayDevice.TraceRouteDiagnostics.RouteHops. HopHost HopHostAddress HopErrorCode HopRTTimes" -->
	HopRoute[hopnum] = new HopRouteTuple();
	HopRoute[hopnum].Path = "<!--#path -->";
	HopRoute[hopnum].hophost = "<!--#leaf "1"-->";
	HopRoute[hopnum].hopaddress = "<!--#leaf "2"-->";
	HopRoute[hopnum].hoperrcode = "<!--#leaf "3"-->";
	HopRoute[hopnum].hoprttimes = "<!--#leaf "4"-->";
	hopnum++;
<!--#endgetobject -->


/********************** List所有wan连接 *******************/
function WanConnsTuple()
{
	this.Path = "";
	this.Name = "";
	this.ConnectionType = "";
}

var wanIndex = 0;
var WanConns = new Array();
<!--#getobject "InternetGatewayDevice.WANDevice." -->
    <!--#getobject "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice." -->
        <!--#getobject "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection. Name ConnectionType"-->
    		WanConns[wanIndex] = new WanConnsTuple();
    		WanConns[wanIndex].Path = "<!--#path -->";
    		WanConns[wanIndex].Name = "<!--#leaf "1"-->";
    		WanConns[wanIndex].ConnectionType = "<!--#leaf "2"-->";
    		wanIndex++;
        <!--#endgetobject -->
        <!--#getobject "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection. Name ConnectionType"-->
    		WanConns[wanIndex] = new WanConnsTuple();
    		WanConns[wanIndex].Path = "<!--#path -->";
    		WanConns[wanIndex].Name = "<!--#leaf "1"-->";
    		WanConns[wanIndex].ConnectionType = "<!--#leaf "2"-->";
    		wanIndex++;
        <!--#endgetobject -->
    <!--#endgetobject -->
<!--#endgetobject -->


/********************** 生成所有路由连接的名称 *******************/
function load_wan_select()
{
    var _text = [], _value = [];
    for(var i = 0; i < WanConns.length; i++){
        //跳过桥连接
        if(WanConns[i].ConnectionType == "IP_Bridged" || WanConns[i].ConnectionType=="PPPoE_Bridged")
            continue;

        _text.push(WanConns[i].Name);
        _value.push(WanConns[i].Path);
    }
    createOptions('select_wan_interface',_text,_value);

    if(G_Interface != "")
    {
        $('select_wan_interface').value = G_Interface; //页面刷新时，显示上次提交时选中的wan连接
    }
}


function gentraceresult(){
	var result="";
	if(hopnum == 0)
	{
		result = "\nResponseTime: 0 ms\nRouteHopsNumber: 0\n"
	}
	else
	{
		result = "\nResponseTime: " + G_ResponseTime + " ms\nRouteHopsNumber: " + hopnum + "\n"
		for (var i=0; i< hopnum; i++)
		{
			result += "hop: " + (i+1) + "\n";
			result += "HopHost: " + HopRoute[i].hophost + "\n";
			result += "HopHostAddress: " + HopRoute[i].hopaddress + "\n";
			result += "HopErrorCode: " + HopRoute[i].hoperrcode + "\n";
			result += "HopRTTimes: " + HopRoute[i].hoprttimes + "\n";
		}
	}

    return result;
}



function init(){
	$('traceroute').disabled = false;
	var Node_Output = getStr("LK_TracerouteStatus");
	setValue("INPUT_Host", G_Host);
	setValue("INPUT_MAXTTL", G_MaxTTL);
	setValue("INPUT_WaitTime", G_WaitTime);	
	
	//生成WAN连接
	load_wan_select();

    //解析结果
	switch (G_TracerouteState){
		case 'Complete':{
			Node_Output += ': '+ getStr("LK_Finished") + unescape("%0a");
			Node_Output += gentraceresult()+ unescape("%0a");		
			var _url = "/cgi-bin/cleartrace.cgi";
			ajax = Ajax.getInstance(_url, "", 0 ,0);	
			ajax.get();
			break;
		}
		case 'Error_MaxHopCountExceeded':{
			Node_Output +=  ': ' + getStr("LK_Traceroute_MaxHopCountExceeded");
			break;
		}
		case 'Error_CannotResolveHostName':{
			Node_Output +=  ': ' + getStr("LK_Traceroute_CannotResolveHostName");
			break;
		}
		case 'None':{
			Node_Output =  '';
			break;
		}
		case 'Requested':{
			Node_Output +=  ': ' + getStr("LK_Runningg");
			setTimer();
			break;
		}
	}
	$('TEXTAREA_Output').value = Node_Output;
}

function setTimer(){
	var Timer = setTimeout('uiPageRefresh()',5000);

	SetButtonStatus('traceroute','disabled');
}


function uiSubmit(){
	var value_array = $('INPUT_Host','INPUT_MAXTTL','INPUT_WaitTime');
	if(value_array[1].value < 1 ||value_array[1].value > 128 ){
		top.AlertMsg(getStr("LK_TheMaxTTLinvalid"));
		return false;
	}
	if(value_array[2].value < 2000 ||value_array[2].value > 60000 ){
		top.AlertMsg(getStr("LK_TheWaitingTimeinvalid"));
		return false;
	}
	if(value_array[0].value == 0 ){
		top.AlertMsg(getStr("LK_ThehostIPnotempty"));
		return false;
	}
	if($('select_wan_interface').value=="")
	{
		top.AlertMsg(getStr("LK_app_chooseWanConnect"));
		return false;
	}

    if(!validateCode())
        return false;
	var df = document.tracedataform; 
	AddElements(df, "InternetGatewayDevice.TraceRouteDiagnostics.Host", value_array[0].value);
	AddElements(df, "InternetGatewayDevice.TraceRouteDiagnostics.MaxHopCount", value_array[1].value);
	AddElements(df, "InternetGatewayDevice.TraceRouteDiagnostics.Timeout", value_array[2].value);
	AddElements(df, "InternetGatewayDevice.TraceRouteDiagnostics.DiagnosticsState", 'Requested'); 
	AddElements(df, "InternetGatewayDevice.TraceRouteDiagnostics.Interface", $('select_wan_interface').value); 
	AddElements(df, "InternetGatewayDevice.TraceRouteDiagnostics.websubmit", '1'); 
	df.submit();
}    

function __init()
{
    init();
    if(IsExistedFunction("project_init") == true) 
        project_init(GetCurrentFileName());
}
</script>
</head>
<body>
<script>printBeginContent();</script>
<script>SetContentTitle(getStr("LK_ToolsTrace"));</script>
<form>
	<table class="ContentTableNoColor" cellspacing="0" cellpadding="0">
	<tr>
		<td width="150" langkey="LK_Hostt"></td>
		<td><input type="text" id="INPUT_Host" name="INPUT_Host" maxlength="256"></td>
	</tr>
	<tr>
		<td width="150" langkey="LK_MaxTTLl"></td>
		<td><input type="text" id="INPUT_MAXTTL" name="INPUT_MAXTTL" maxlength="32">&nbsp;&nbsp;(1-128)</td>
	</tr>
	<tr>
		<td width="150" langkey="LK_WaittingTimee"></td>
		<td><input type="text" id="INPUT_WaitTime" name="INPUT_WaitTime" maxlength="32">&nbsp;&nbsp;(2000-60000ms)</td>
	</tr>
	<tr>
		<td width="160" langkey="LK_WANConnection_Colon"></td>
		<td><select id="select_wan_interface"></select>		        
	</tr>
    <tr id="BUTTON_BLOCK" class="spaceLine"><td>&nbsp;</td></tr>
	<tr>
		<td></td>
		<td> 
		    <textarea name="TEXTAREA_Output" id="TEXTAREA_Output" cols="60" rows="10" wrap="Off" readonly style="font-size:14px; line-height:20px; " langkey="LK_TracerouteStatus"></textarea>
            
		</td>
	</tr>
	<tr class="spaceLine"><td>&nbsp;</td></tr>
	<tr>
		<td colspan="2">
		<script>PrintTriButton("traceroute",getStr('LK_Trace'),"uiSubmit();");</script>&nbsp;&nbsp;
		<script>PrintTriButton("refresh",getStr('LK_Refresh'),"uiPageRefresh();");</script>
		</td>
	</tr>
	</table>
    </form>
    <form method="post" name ="tracedataform" action="/cgi-bin/setup.cgi?page/management/mngt_traceroute.shtml">
    </form>
   </body>
</html>
