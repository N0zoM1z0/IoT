<html>
<head>
<meta HTTP-EQUIV='Pragma' CONTENT='no-cache'>
<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>
<link rel="stylesheet" rev="stylesheet" href="/css/content.css" type="text/css">
<script language="javascript" src="/js/check.js"></script>
<script language="javascript" src="/js/jquery.js"></script>
<script language="javascript" src="/js/t_utils.js"></script>
<script language="javascript" src="/js/init.js"></script>
<script language="javascript" src="/js/tri.js"></script>
<script language="javascript" src="/js/project.js"></script>
<script language="javascript">
function ConnectionTuple()
{    
    this.Type = "";
    this.Path = "";
    this.Name = "";
    this.ServiceList = "";
    this.ConnectionType = "";
}
var n = 0;
var Connection = new Array();
<!--#getobject "InternetGatewayDevice.WANDevice." -->
<!--#getobject "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice." -->
<!--#getobject "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANIPConnection. Name X_CT-COM_ServiceList ConnectionType" -->
    Connection[n] = new ConnectionTuple();
    Connection[n].Type = "IP";
    Connection[n].Path = "<!--#path -->";
    Connection[n].Name = "<!--#leaf "1"-->";
    Connection[n].ServiceList = "<!--#leaf "2"-->";
    Connection[n].ConnectionType = "<!--#leaf "3"-->";
    n++;
<!--#endgetobject -->
<!--#getobject "InternetGatewayDevice.WANDevice.{i}.WANConnectionDevice.{i}.WANPPPConnection. Name X_CT-COM_ServiceList ConnectionType" -->
    Connection[n] = new ConnectionTuple();
    Connection[n].Type = "PPP";
    Connection[n].Path = "<!--#path -->";
    Connection[n].Name = "<!--#leaf "1"-->";
    Connection[n].ServiceList = "<!--#leaf "2"-->";
    Connection[n].ConnectionType = "<!--#leaf "3"-->";
    n++;
<!--#endgetobject -->
<!--#endgetobject -->
<!--#endgetobject -->

function GRETunnelListTuple()
{
	this.Path = "";
	this.Name = "";
	this.Type = "";
	this.WanInterface = "";
	this.IfIPAddr = "";
	this.IfIPMask = "";
	this.RemoteIP= "";
	this.LocalIP = "";
	this.TTL = "";
}

var tnl_idx = 0;
var GREList = new Array();
<!--#getobject "InternetGatewayDevice.Services.X_TRI_GRETunnel.TunnelList. TunnelName TunnelMode WanInterface TunnelIPAddr TunnelIPMask RemoteIP LocalIP TTL" -->
GREList[tnl_idx] = new GRETunnelListTuple();
GREList[tnl_idx].Path = "<!--#path -->";
GREList[tnl_idx].Name = "<!--#leaf "1"-->";
GREList[tnl_idx].Type = "<!--#leaf "2"-->";
GREList[tnl_idx].WanInterface = "<!--#leaf "3"-->";
GREList[tnl_idx].IfIPAddr = "<!--#leaf "4"-->";
GREList[tnl_idx].IfIPMask = "<!--#leaf "5"-->";
GREList[tnl_idx].RemoteIP = "<!--#leaf "6"-->";
GREList[tnl_idx].LocalIP = "<!--#leaf "7"-->";
GREList[tnl_idx].TTL = "<!--#leaf "8"-->";
tnl_idx++;
<!--#endgetobject -->

var G_Operation = "Add";
var G_index;
var G_Path ;
var selectedIndex=0;
function uiBack()
{
	document.location.href = "adv_ipgre.shtml"
}
function getconnectionname(path){
    var conn_name = "";

    for (i = 0; i < Connection.length; i++)
    {
      if (Connection[i].Path == path){
           conn_name = Connection[i].Name;
           break;
      }
    }
    return conn_name;
}

function init(){
    var text = [];
    var value = [];
    var url=window.location.search;
    var i=url.indexOf('?');
    var connection = "";

    if(i==-1) return null;
    var arr = url.toString();
    var strs = arr.split("&"); 
    var str= strs[0].split("=");
    var id=strs[1].split("=");
    G_index =str[1];
    G_Operation =id[1];
    if(G_Operation == 'Add'){
		switchConnectionDevice();
		setValue("TTL",255);
    }else if(G_Operation == 'Edit'){
        var path=strs[2].split("=");
        G_Path =path[1];    
        Path = GREList[G_index].WanInterface
        connection = getconnectionname(Path);

        setValue("GREName", GREList[G_index].Name);
        setValue("InterfaceIPAddr",GREList[G_index].IfIPAddr);
        setValue("SubnetMask",GREList[G_index].IfIPMask);
        setValue("RemoteIP",GREList[G_index].RemoteIP);
        setValue("TTL",GREList[G_index].TTL);
		$('selectConnectionName').disabled = true;
    
       text[0] = connection;
       value[0] = 0;
       createOptions('selectConnectionName', text,value);
       $('selectConnectionName').value = 0;    

	   $('GREName').disabled = true;
    }
}
function switchConnectionDevice(){
    var text = [];
    var value = [];
    var conn = 0;
    for (i = 0; i < Connection.length; i++)
    {
        if(!isBridgedConn(Connection[i].ConnectionType) && (Connection[i].ServiceList == 'OTHER' || isINTERNETService(Connection[i].ServiceList))){
            text[conn] = Connection[i].Name;
            value[conn] = i;
            conn++;
        }    
    }
    createOptions('selectConnectionName', text, value);
    selectedIndex= $('selectConnectionName').value;
}
function checkValue(){
	var re = /^gre-/;
	if(getValue('GREName') == "")
		return false;
	if(!re.test(getValue('GREName')))
	{
		top.AlertMsg(getStr("LK_TunnelNameRule"));
		return false;
	}

    for(var i = 0; i < tnl_idx; i++) {
        if( GREList[i].Name == getValue('GREName') &&
            GREList[i].RemoteIP == getValue('RemoteIP')
          ){
            top.AlertMsg(getStr("LK_Tunneladded"));
            return false;
        }
    }
    return true;
}

function uiSubmit(){
    var tnllist_path="InternetGatewayDevice.Services.X_TRI_GRETunnel.TunnelList.{i}";    
    var df = document.ipv4_ipgre; 
	if(!isCheckIPV4($('RemoteIP'))
		|| !isCheckIPV4($('InterfaceIPAddr'))
		|| !isIPMaskValid(getValue('SubnetMask'))){
          return false;
    }

	var ttl = getValue("TTL");
	if(ttl < 1 || ttl > 256 ){
		top.AlertMsg(getStr("LK_TheMaxTTLinvalid"));
		return false;
	}

	if(!validateCode())
		return false;

    if(G_Operation == 'Add' && checkValue()){
        AddElements(df, 'add_obj',tnllist_path);
        if(selectedIndex >-1){
			selectedIndex = getValue('selectConnectionName');
			G_Path =Connection[selectedIndex].Path;
            AddElements(df, tnllist_path+".WanInterface",G_Path);
        }

        AddElements(df, tnllist_path+".TunnelName",getValue('GREName'));
        AddElements(df, tnllist_path+".TunnelIPAddr", getValue('InterfaceIPAddr'));
        AddElements(df, tnllist_path+".TunnelIPMask", getValue('SubnetMask'));
        AddElements(df, tnllist_path+".RemoteIP", getValue('RemoteIP'));
        AddElements(df, tnllist_path+".TTL", getValue('TTL'));
		df.submit();
    } else {
        var _path=G_Path;    
          
        AddElements(df, _path+"TunnelName", getValue('GREName'));
        AddElements(df, _path+"TunnelIPAddr", getValue('InterfaceIPAddr'));
        AddElements(df, _path+"TunnelIPMask", getValue('SubnetMask'));
        AddElements(df, _path+"RemoteIP", getValue('RemoteIP'));
        AddElements(df, _path+"TTL", getValue('TTL'));
		df.submit();
    } 
}

function __init()
{
    init();
    if(IsExistedFunction("project_init") == true) 
        project_init(GetCurrentFileName());
}
</script>
</head>
<body>

<form>
<script>printBeginContent()</script>
<script>SetContentTitle(getStr('LK_GRESetting'))</script>
<table width="600" cellspacing="0" cellpadding="0" class="ContentTableNoColor">
<tr>
	<td width="150" langkey="LK_ConnectionNamee"></td>
	<td>
		<select name="select" id="selectConnectionName">
			<option ></option>
		</select>
	</td>
</tr>
<tr>
	<td langkey="LK_TunnelNamee"></td>
	<td><input type="text" maxlength=15 id="GREName"/>&nbsp;&nbsp;<span langkey="LK_TunnelNameRule"></span></td>
</tr>
<tr>
	<td langkey="LK_TunnelIfAddrr"></td>
	<td><input type="text" maxlength=15 id="InterfaceIPAddr"/></td>
</tr>
<tr>
	<td langkey="LK_SubnetMaskk"></td>
	<td><input type="text" maxlength=15 id="SubnetMask"/></td>
</tr>
<br>
<tr>
	<td langkey="LK_TunnelRemoteAddrr"></td>
	<td><input type="text" maxlength=15 id="RemoteIP"/></td>
</tr>
<tr>
	<td langkey="LK_MaxTTLl"></td>
	<td><input type="text" maxlength=3 id="TTL"/></td>
</tr>
<tr id="BUTTON_BLOCK" class="spaceLine"><td>&nbsp;</td></tr>
<tr>
	<td colspan="2">
	<script>PrintTriButton("back",getStr('LK_Back'),"uiBack()");</script>
	<script>PrintTriButton("submit",getStr('LK_Apply'),"uiSubmit()");</script>
	<script>PrintTriButton("refresh",getStr('LK_Refresh'),"uiPageRefresh()");</script>
	</td>
</tr>
</table>
<script>printEndContent()</script>
</form>
<form method="post" name ="ipv4_ipgre" action="/cgi-bin/setup.cgi?page/advancedsetup/adv_ipgre.shtml">
</form>
</body>
</html>
