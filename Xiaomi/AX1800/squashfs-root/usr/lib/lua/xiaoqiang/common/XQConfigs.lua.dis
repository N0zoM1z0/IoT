local L0, L1, L2
L0 = module
L1 = "xiaoqiang.common.XQConfigs"
L2 = package
L2 = L2.seeall
L0(L1, L2)
L0 = 0
SERVER_CONFIG = L0
L0 = "uci get /etc/config/miwifi.server.API"
SERVER_CONFIG_ONLINE_URL = L0
L0 = "http://api.staging.miwifi.com"
SERVER_CONFIG_STAGING_URL = L0
L0 = "http://api.preview.miwifi.com"
SERVER_CONFIG_PREVIEW_URL = L0
L0 = "https://account.xiaomi.com/pass/serviceLogin"
PASSPORT_CONFIG_ONLINE_URL = L0
L0 = "http://account.preview.n.xiaomi.net/pass/serviceLogin"
PASSPORT_CONFIG_PREVIEW_URL = L0
L0 = "https://www.miwifi.com/sts"
XQ_SERVER_ONLINE_STS_URL = L0
L0 = "https://www.staging.miwifi.com/sts"
XQ_SERVER_STAGING_STS_URL = L0
L0 = "https://account.xiaomi.com/pass/logout"
PASSPORT_LOGOUT_ONLINE_URL = L0
L0 = "http://account.preview.n.xiaomi.net/pass/logout"
PASSPORT_LOGOUT_PREVIEW_URL = L0
L0 = "https://www.miwifi.com"
XQ_SERVER_ONLINE_API_URL = L0
L0 = "https://www.staging.miwifi.com"
XQ_SERVER_STAGING_API_URL = L0
L0 = "/tmp/activate.arp.list.ui"
ARP_LIST_UI_FILEPATH = L0
L0 = "/tmp/activate.nic.list.ui"
NIC_LIST_UI_FILEPATH = L0
L0 = "/tmp/log.tar.gz"
LOG_ZIP_FILEPATH = L0
L0 = "/var/log/ppp.log"
PPP_LOG_FILEPATH = L0
L0 = "INITTED"
PREF_IS_INITED = L0
L0 = "PASSPORT_BOUND"
PREF_IS_PASSPORT_BOUND = L0
L0 = "ROUTER_NAME"
PREF_ROUTER_NAME = L0
L0 = "WAN_SPEED_HISTORY"
PREF_WAN_SPEED_HISTORY = L0
L0 = "PASSPORT_UUID"
PREF_PASSPORT_BOUND_UUID = L0
L0 = "UPGRADE_INFO"
PREF_UPGRADE_INFO = L0
L0 = "WPS_TIMESTAMP"
PREF_WPS_TIMESTAMP = L0
L0 = "ROUTER_NAME_PENDING"
PREF_ROUTER_NAME_PENDING = L0
L0 = "BOUND_USER_INFO"
PREF_BOUND_USERINFO = L0
L0 = "ROM_FULLSIZE"
PREF_ROM_FULLSIZE = L0
L0 = "PPPOE_NAME"
PREF_PPPOE_NAME = L0
L0 = "PPPOE_PASSWORD"
PREF_PPPOE_PASSWORD = L0
L0 = "ROM_DOWNLOAD_URL"
PREF_ROM_DOWNLOAD_URL = L0
L0 = "ROM_UPLOAD_URL"
PREF_ROM_UPLOAD_URL = L0
L0 = "PAUSED_IDS"
PREF_PAUSED_IDS = L0
L0 = "TIMESTAMP"
PREF_TIMESTAMP = L0
L0 = "ROM_DOWNLOAD_ID"
PREF_ROM_DOWNLOAD_ID = L0
L0 = "/sbin/wifi >/dev/null 2>/dev/null; /etc/init.d/minidlna restart; /etc/init.d/samba restart; /etc/init.d/minet restart; ubus call trafficd reload;/usr/bin/gettraffic flush_wl_dev >/dev/null 2>/dev/null"
FORK_RESTART_WIFI_NOW = L0
L0 = "sleep 5; "
L1 = FORK_RESTART_WIFI_NOW
L0 = L0 .. L1
FORK_RESTART_WIFI = L0
L0 = "timeout -t 5 /usr/bin/miio_notify -u;/sbin/notice_tbus_device.sh; "
L1 = FORK_RESTART_WIFI_NOW
L0 = L0 .. L1
FORK_RESTART_WIFI_NOTIFY = L0
L0 = "/sbin/notice_tbus_device.sh; "
L1 = FORK_RESTART_WIFI_NOW
L0 = L0 .. L1
FORK_RESTART_WIFI_NOTIFY_BUT_MIIO = L0
L0 = "env -i sleep 4 && nvram set restore_defaults=1 && nvram set web_restore=1 && nvram commit && reboot & >/dev/null 2>/dev/null"
FORK_RESET_ALL = L0
L0 = "sleep 4; reboot"
FORK_RESTART_ROUTER = L0
L0 = "sleep 4; /usr/sbin/uhbn 3"
FORK_SHUTDOWN_ROUTER = L0
L0 = "sleep 2; /etc/init.d/dnsmasq restart"
FORK_RESTART_DNSMASQ = L0
L0 = "/bin/sh /etc/firewall.macfilter"
RESTART_MAC_FILTER = L0
L0 = "xiaomi.router."
XQ_MODEL_PREFIX = L0
L0 = "/var/dhcp.leases"
DHCP_LEASE_FILEPATH = L0
L0 = "/etc/config/firewall.mac.list"
DHCP_DENYLIST_FILEPATH = L0
L0 = "/tmp/wan.monitor.stat"
WAN_MONITOR_STAT_FILEPATH = L0
L0 = "/usr/share/xiaoqiang/xiaoqiang_version"
XQ_ROM_VERSION_FILEPATH = L0
L0 = "/tmp/log.json"
XQ_LOG_JSON_FILEPATH = L0
L0 = "/tmp/config.json"
XQ_CONFIG_JSON_FILEPATH = L0
L0 = "/tmp/wifi_error_xxxx"
XQ_WIFIPWDERROR_FILEPATH = L0
L0 = "/usr/share/xiaoqiang/changelog"
XQ_CHANGELOG_FILEPATH = L0
L0 = "/tmp/rom.bin"
ROM_CACHE_FILEPATH = L0
L0 = "/tmp/customrom.bin"
CROM_CACHE_FILEPATH = L0
L0 = "/tmp/uploadplug.mpk"
CPlug_CACHE_FILEPATH = L0
L0 = "/tmp/uboot.bin"
UBOOT_CACHE_FILEPATH = L0
L0 = "/usr/share/xiaoqiang/oui.tar.gz"
OUI_ZIP_FILEPATH = L0
L0 = "/tmp/oui"
OUI_FILEPATH = L0
L0 = "uci get /usr/share/xiaoqiang/xiaoqiang_version.version.ROM"
XQ_ROM_VERSION = L0
L0 = "uci get /usr/share/xiaoqiang/xiaoqiang_version.version.CHANNEL"
XQ_CHANNEL = L0
L0 = "uci get /usr/share/xiaoqiang/xiaoqiang_version.version.HARDWARE"
XQ_HARDWARE = L0
L0 = "uci get /usr/share/xiaoqiang/xiaoqiang_version.version.UBOOT"
XQ_CFE_VERSION = L0
L0 = "uci get /usr/share/xiaoqiang/xiaoqiang_version.version.LINUX"
XQ_KERNEL_VERSION = L0
L0 = "uci get /usr/share/xiaoqiang/xiaoqiang_version.version.RAMFS"
XQ_RAMFS_VERSION = L0
L0 = "uci get /usr/share/xiaoqiang/xiaoqiang_version.version.SQAFS"
XQ_SQAFS_VERSION = L0
L0 = "uci get /usr/share/xiaoqiang/xiaoqiang_version.version.ROOTFS"
XQ_ROOTFS_VERSION = L0
L0 = "uci -q get /usr/share/xiaoqiang/xiaoqiang_version.version.ISPCODE"
XQ_ISP_CODE = L0
L0 = "uci get /etc/config/messaging.deviceInfo.DEVICE_ID"
XQ_DEVICE_ID = L0
L0 = "uci -q get /usr/share/xiaoqiang/xiaoqiang_version.version.BETA"
XQ_BETA = L0
L0 = "cd /tmp;multipartcutter -R -f "
XQ_CUT_IMAGE = L0
L0 = "cd /tmp;mkxqimage -x "
XQ_VERIFY_IMAGE = L0
L0 = "wps pbc"
OPEN_WPS = L0
L0 = "wps status"
GET_WPS_STATUS = L0
L0 = "wps stamac"
GET_WPS_CONMAC = L0
L0 = "wps stop"
CLOSE_WPS = L0
L0 = "getmac"
GET_DEFAULT_MACADDRESS = L0
L0 = "getmac wan"
GET_DEFAULT_WAN_MACADDRESS = L0
L0 = "nvram get SN"
GET_NVRAM_SN = L0
L0 = "bdata get SN"
GET_BDATA_SN = L0
L0 = "nvram set flag_upgrade_push=1; nvram commit"
NVRAM_SET_UPGRADED = L0
L0 = "/usr/sbin/sysapi TRAFFIC_CTL set NGINX_CACHE=on"
NGINX_CACHE_START = L0
L0 = "/usr/sbin/sysapi TRAFFIC_CTL set NGINX_CACHE=off"
NGINX_CACHE_STOP = L0
L0 = "/usr/sbin/sysapi TRAFFIC_CTL get NGINX_CACHE"
NGINX_CACHE_STATUS = L0
L0 = "/usr/sbin/sysapi macfilter set lanmode=blacklist"
SET_LAN_BLACKLIST = L0
L0 = "/usr/sbin/sysapi macfilter set lanmode=whitelist"
SET_LAN_WHITELIST = L0
L0 = "/usr/sbin/sysapi macfilter set wanmode=blacklist"
SET_WAN_BLACKLIST = L0
L0 = "/usr/sbin/sysapi macfilter set wanmode=whitelist"
SET_WAN_WHITELIST = L0
L0 = "/usr/sbin/sysapi macfilter set admin=blacklist"
SET_ADMIN_BLACKLIST = L0
L0 = "/usr/sbin/sysapi macfilter set admin=whitelist"
SET_ADMIN_WHITELIST = L0
L0 = "/usr/sbin/sysapi macfilter get lanmode"
GET_LAN_MODE = L0
L0 = "/usr/sbin/sysapi macfilter get wanmode"
GET_WAN_MODE = L0
L0 = "/usr/sbin/sysapi macfilter get adminmode"
GET_ADMIN_MODE = L0
L0 = "/opt/lampmanager/create_sandbox.sh"
LAMP_CREATE_SANDBOX = L0
L0 = "/opt/lampmanager/is_sandbox_created.sh"
LAMP_IS_SANDBOX_CREATED = L0
L0 = "/opt/lampmanager/mount_things.sh"
LAMP_MOUNT_THINGS = L0
L0 = "/opt/lampmanager/unmount_things.sh"
LAMP_UMOUNT_THINGS = L0
L0 = "/opt/lampmanager/are_things_mounted.sh"
LAMP_ARE_THINGS_MOUNTED = L0
L0 = "/opt/lampmanager/start_dropbear.sh"
LAMP_START_DROPBEAR = L0
L0 = "/opt/lampmanager/stop_dropbear.sh"
LAMP_STOP_DROPBEAR = L0
L0 = "/opt/lampmanager/is_dropbear_started.sh"
LAMP_IS_DROPBEAR_STARTED = L0
L0 = "/usr/sbin/readtmp"
CPU_TEMPERATURE = L0
L0 = "/usr/sbin/networkdt -s "
SIMPLE_NETWORK_DETECT = L0
L0 = "/usr/sbin/networkdt -s -n "
SIMPLE_NETWORK_NOLOG_DETECT = L0
L0 = "/usr/sbin/networkdt "
FULL_NETWORK_DETECT = L0
L0 = "wl -i wl1 chanspecs"
WIFI_CHANNEL_24 = L0
L0 = "wl -i wl0 chanspecs"
WIFI_CHANNEL_50 = L0
L0 = "wl -i wl1 chanspec | awk '{print $1}'"
WIFI24_WORK_CHANNEL = L0
L0 = "wl -i wl0 chanspec | awk '{print $1}'"
WIFI50_WORK_CHANNEL = L0
L0 = "ip route list 0/0 | grep -v tap | grep -v metric | awk '{print $5}'"
GET_WAN_DEV = L0
L0 = "/bin/flash_check.sh"
FLASH_EXECUTION_CHECK = L0
L0 = "/tmp/pid_xxxx"
FLASH_PID_TMP = L0
L0 = "/tmp/crontab_pid_xxxx"
CRONTAB_PID_TMP = L0
L0 = "ps w | grep crontab_rom.sh | grep -v \"grep\" | wc -l"
CRONTAB_ROM_CHECK = L0
L0 = "ps w | grep flash | grep customrom.bin | grep -v \"grep\" | wc -l"
CROM_FLASH_CHECK = L0
L0 = "ps w | grep flash | grep rom.bin | grep -v \"grep\" | wc -l"
DROM_FLASH_CHECK = L0
L0 = "ps w | grep reboot | grep -v \"grep\" | wc -l"
REBOOT_CHECK = L0
L0 = "/tmp/upgrade_lock"
UPGRADE_LOCK_FILE = L0
L0 = "cat "
L1 = UPGRADE_LOCK_FILE
L0 = L0 .. L1
UPGRADE_STATUS = L0
L0 = "/bin/touch "
L1 = UPGRADE_LOCK_FILE
L0 = L0 .. L1
UPGRADE_LOCK = L0
L0 = "/bin/rm "
L1 = UPGRADE_LOCK_FILE
L0 = L0 .. L1
UPGRADE_UNLOCK = L0
L0 = "/bin/ls -l "
L1 = UPGRADE_LOCK_FILE
L0 = L0 .. L1
UPGRADE_LOCK_CHECK = L0
L0 = "cat "
L1 = CRONTAB_PID_TMP
L0 = L0 .. L1
UPGRADE_PID = L0
L0 = "ps w | grep checkupgrade.lua | grep -v \"grep\" | awk '{print $1}'"
UPGRADE_LUA_PID = L0
L0 = "cat /proc/cpuinfo | grep b_chippkg | awk '{print $3}'"
GET_CPU_CHIPPKG = L0
L0 = "wget -t3 -T10 --spider "
DOWNLOAD_RESOURCE_CHECK = L0
L0 = "df -k | grep \\ /tmp$ | awk '{print $4}' | sed -n '1p'"
AVAILABLE_MEMERY = L0
L0 = "df -k | grep \\ /userdisk$ | awk '{print $4}' | sed -n '1p'"
AVAILABLE_DISK = L0
L0 = "df -k | grep \\ /userdisk$ | awk '{print $2}' | sed -n '1p'"
DISK_SPACE = L0
L0 = 10
DEVICE_STATISTICS_LIST_LIMIT = L0
L0 = "/usr/sbin/getstat.lua|cut -d'%' -f1"
CPU_LOAD_AVG = L0
L0 = "free 2>/dev/null|awk '/Mem/{print substr($3/$2,0,4)}'"
MEMERY_USAGE = L0
L0 = "et robord 0x01 0x00 2>/dev/null|awk -F':' '/port 4/{print$2}'"
WAN_LINK = L0
L0 = "cat /tmp/wan.monitor.stat | grep WANLINKSTAT=UP | wc -l"
WAN_UP = L0
L0 = "updateledfliker"
UPDATE_LED_FLASH_ALERT_ENABLE = L0
L0 = "killupdateled"
UPDATE_LED_FLASH_ALERT_DISABLE = L0
L0 = "/usr/sbin/vpn.lua up"
VPN_ENABLE = L0
L0 = "/usr/sbin/vpn.lua down"
VPN_DISABLE = L0
L0 = "/usr/sbin/vpn.lua status"
VPN_STATUS = L0
L0 = "/bin/rm /tmp/vpn.stat.msg.last >/dev/null 2>/dev/null"
RM_VPNSTATUS_FILE = L0
L0 = "gpio %s | awk -F': <' '{print$2}'| awk -F'>' '{print$1}'"
GPIO_VALUE = L0
L0 = "/etc/init.d/miniupnpd enabled"
UPNP_STATUS = L0
L0 = "/etc/init.d/miniupnpd enable ; /etc/init.d/miniupnpd start ;"
UPNP_ENABLE = L0
L0 = "/etc/init.d/miniupnpd stop ; /etc/init.d/miniupnpd disable ;"
UPNP_DISABLE = L0
L0 = "uci get upnpd.config.upnp_lease_file"
UPNP_LEASE_FILE = L0
L0 = "/etc/init.d/app-tc.d on"
QOS_APPSL_ENABLE = L0
L0 = "/etc/init.d/app-tc.d off"
QOS_APPSL_DISABLE = L0
L0 = "/etc/init.d/app-tc.d restart"
QOS_APPSL_RELOAD = L0
L0 = "upgrade_info_cache"
UPGRADE_INFO_CACHE = L0
L0 = 600
UPGRADE_INFO_EXPIRE = L0
L0 = "thrifttunnel 0 '%s'"
THRIFT_TUNNEL_TO_DATACENTER = L0
L0 = "thrifttunnel 1 '%s'"
THRIFT_TUNNEL_TO_SMARTHOME = L0
L0 = "thrifttunnel 2 '%s'"
THRIFT_TUNNEL_TO_SMARTHOME_CONTROLLER = L0
L0 = "thrifttunnel 3 ''"
THRIFT_TO_MQTT_IDENTIFY_DEVICE = L0
L0 = "thrifttunnel 4 ''"
THRIFT_TO_MQTT_GET_SN = L0
L0 = "thrifttunnel 5 ''"
THRIFT_TO_MQTT_GET_DEVICEID = L0
L0 = "thrifttunnel 6 '%s'"
THRIFT_TUNNEL_TO_MIIO = L0
L0 = "thrifttunnel 7 '%s'"
THRIFT_TUNNEL_TO_YEELINK = L0
L0 = "thrifttunnel 8 '%s'"
THRIFT_TUNNEL_TO_CACHECENTER = L0
L0 = "/opt/filetunnel/tunneltool --payload '%s'"
TUNNEL_TOOL = L0
L0 = "nvram set flag_flash_permission="
SET_FLASH_PERMISSION = L0
L0 = "nvram get flag_flash_permission"
GET_FLASH_PERMISSION = L0
L0 = "/tmp/wifi.log"
WIIF_LOG_TMP_FILEPATH = L0
L0 = "/sbin/wifi_analyze.sh >> "
L1 = WIIF_LOG_TMP_FILEPATH
L0 = L0 .. L1
WIFI_LOG_COLLECTION = L0
