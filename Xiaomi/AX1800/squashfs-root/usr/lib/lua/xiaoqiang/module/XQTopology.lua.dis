local L0, L1, L2, L3, L4, L5
L0 = module
L1 = "xiaoqiang.module.XQTopology"
L2 = package
L2 = L2.seeall
L0(L1, L2)
L0 = require
L1 = "cjson"
L0 = L0(L1)
L1 = require
L2 = "xiaoqiang.common.XQFunction"
L1 = L1(L2)
L2 = require
L3 = "xiaoqiang.common.XQConfigs"
L2 = L2(L3)
L3 = require
L4 = "luci.util"
L3 = L3(L4)
function L4(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L1 = require
  L2 = "xiaoqiang.util.XQSysUtil"
  L1 = L1(L2)
  L2 = {}
  L2.ip = ""
  L3 = A0.router_name
  if not L3 then
    L3 = A0.hostname
    L3 = L3 or L3
  end
  L2.name = L3
  L3 = A0.locale
  L3 = L3 or L3
  L2.locale = L3
  L2.hardware = ""
  L2.channel = ""
  L3 = tonumber
  L4 = A0.is_ap
  L4 = L4 or L4
  L3 = L3(L4)
  L2.mode = L3
  L3 = A0.version
  L3 = L3 or L3
  L2.version = L3
  L2.ssid = ""
  L2.color = 100
  L3 = L1.isSupportNewTopo
  L3 = L3()
  if L3 == 1 then
    L3 = A0.signal
    L3 = L3 or L3
    L2.signal = L3
    L3 = A0.onlines
    L3 = L3 or L3
    L2.onlines = L3
    L3 = A0.link_type
    L3 = L3 or L3
    L2.link_type = L3
    L3 = A0.internet
    L3 = L3 or L3
    L2.internet = L3
  end
  L3 = string
  L3 = L3.lower
  L4 = L2.name
  L3 = L3(L4)
  L4 = L3
  L3 = L3.match
  L5 = "^xiaomirepeater"
  L3 = L3(L4, L5)
  if L3 then
    L2.name = "\229\176\143\231\177\179\228\184\173\231\187\167\229\153\168"
  end
  L3 = A0.description
  function L4(A0)
    local L1, L2
    L1 = _UPVALUE1_
    L1 = L1.decode
    L2 = A0
    L1 = L1(L2)
    _UPVALUE0_ = L1
  end
  L5 = _UPVALUE1_
  L5 = L5.isStrNil
  L5 = L5(L6)
  if not L5 then
    L5 = pcall
    L5 = L5(L6, L7)
    if L5 then
      L5 = L3.hardware
      L2.hardware = L5
      L5 = L3.channel
      L2.channel = L5
      L5 = L3.color
      L2.color = L5
      L5 = L3.ssid
      L2.ssid = L5
      L5 = L3.ip
      L2.ip = L5
      L5 = L3.locale
      L2.locale = L5
    end
  end
  L5 = {}
  if L6 then
    if L6 then
      if 0 < L6 then
        for L10, L11 in L7, L8, L9 do
          L13 = L6
          L12 = L6.match
          L14 = "wl"
          L12 = L12(L13, L14)
          if L12 then
            L13 = L6
            L12 = L6.match
            L14 = "wl"
            L12 = L12(L13, L14)
            if not L12 then
              goto lbl_146
            end
            L12 = tonumber
            L13 = A0.assoc
            L12 = L12(L13)
            if L12 ~= 1 then
              goto lbl_146
            end
          end
          L12 = L11.ageing_timer
          if L12 <= 300 then
            L12 = L11.tx_bytes
            if L12 == 0 then
              L12 = L11.rx_bytes
              if L12 == 0 then
                goto lbl_146
              end
            end
            L12 = L11.ip
            L2.ip = L12
            break
          end
          ::lbl_146::
        end
      end
    end
  end
  if L6 then
    if 0 < L6 then
      for L9, L10 in L6, L7, L8 do
        L11 = L10.is_ap
        if L11 ~= nil then
          L11 = L10.is_ap
          if L11 ~= 0 then
            L11 = table
            L11 = L11.insert
            L12 = L5
            L13 = _recursive
            L14 = L10
            L13, L14 = L13(L14)
            L11(L12, L13, L14)
          end
        end
      end
      if 0 < L6 then
        L2.leafs = L5
      end
    end
  end
  return L2
end
_recursive = L4
function L4()
  local L0, L1, L2
  L0 = require
  L1 = "xiaoqiang.util.XQSysUtil"
  L0 = L0(L1)
  L1 = L0.nettb
  L1 = L1()
  L2 = L1.code
  if L2 ~= 0 then
    L2 = 0
    return L2
  end
  L2 = 1
  return L2
end
getInternet = L4
function L4(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L1 = 0
  for L5, L6 in L2, L3, L4 do
    if L7 == 1 then
      L1 = L1 + 1
    end
    child = L7
    if L7 then
      for L10, L11 in L7, L8, L9 do
        L12 = L11.leafs
        if L12 then
          L13 = rect
          L14 = L12
          L13 = L13(L14)
          L1 = L1 + L13
        else
          L13 = L11.mode
          if L13 == 1 then
            L1 = L1 + 1
          end
        end
      end
    end
  end
  return L1
end
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16
  L0 = require
  L1 = "xiaoqiang.util.XQSysUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQLanWanUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQWifiUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQDeviceUtil"
  L3 = L3(L4)
  L4 = L2.getWifiStatus
  L5 = 1
  L4 = L4(L5)
  L4 = L4 or L4
  L5 = {}
  L6 = L1.getLanIp
  L6 = L6()
  L5.ip = L6
  L6 = L0.getRouterName
  L6 = L6()
  L5.name = L6
  L6 = L0.getRouterLocale
  L6 = L6()
  L5.locale = L6
  L6 = L0.getHardware
  L6 = L6()
  L5.hardware = L6
  L6 = L0.getChannel
  L6 = L6()
  L5.channel = L6
  L6 = _UPVALUE0_
  L6 = L6.getNetModeType
  L6 = L6()
  L5.mode = L6
  L6 = L0.getColor
  L6 = L6()
  L5.color = L6
  L6 = L4.ssid
  L6 = L6 or L6
  L5.ssid = L6
  L6 = ""
  L7 = L0.isSupportNewTopo
  L7 = L7()
  if L7 == 1 then
    L7 = _UPVALUE0_
    L7 = L7.isMeshCap
    L7 = L7()
    if L7 then
      L7 = _UPVALUE1_
      L7 = L7.trim
      L12, L13, L14, L15, L16 = L8(L9)
      L7 = L7(L8, L9, L10, L11, L12, L13, L14, L15, L16)
      L7 = L7 or L7
      L5.onlines = L7
      L7 = _UPVALUE1_
      L7 = L7.exec
      L7 = L7(L8)
      L6 = L7
  end
  else
    L7 = _UPVALUE1_
    L7 = L7.exec
    L7 = L7(L8)
    L6 = L7
  end
  L7 = _UPVALUE0_
  L7 = L7.isStrNil
  L7 = L7(L8)
  if L7 then
    return L5
  else
    L7 = _UPVALUE2_
    L7 = L7.decode
    L7 = L7(L8)
    L6 = L7
  end
  L7 = {}
  for L11, L12 in L8, L9, L10 do
    L13 = L12.is_ap
    if L13 ~= nil then
      L13 = L12.is_ap
      if L13 ~= 0 then
        L13 = L12.assoc
        if L13 ~= 0 then
          L13 = table
          L13 = L13.insert
          L14 = L7
          L15 = _recursive
          L16 = L12
          L15, L16 = L15(L16)
          L13(L14, L15, L16)
        end
      end
    end
  end
  if 0 < L9 then
    L5.leafs = L7
    for L12, L13 in L9, L10, L11 do
      L14 = L13.mode
      if L14 == 1 then
        L14 = L13.leafs
        if L14 then
          L14 = _UPVALUE3_
          L15 = L13.leafs
          L14 = L14(L15)
        end
      end
    end
  end
  L5.renumber = L8
  return L5
end
topologicalGraph = L5
function L5(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13
  L1 = {}
  L2 = _UPVALUE0_
  L2 = L2.macFormat
  L3 = A0.hw
  L2 = L2(L3)
  L1.mac = L2
  L1.mac5G = ""
  L2 = _UPVALUE0_
  L2 = L2.isStrNil
  L3 = A0.description
  L2 = L2(L3)
  if L2 then
    L2 = nil
    return L2
  end
  L2 = pcall
  L3 = _UPVALUE1_
  L3 = L3.decode
  L4 = A0.description
  L2, L3 = L2(L3, L4)
  if L2 and L3 then
    L4 = L3.hardware
    if not L4 then
      goto lbl_42
    end
    L4 = string
    L4 = L4.lower
    L4 = L4(L5)
    if L4 == "r01" then
      goto lbl_42
    end
    L4 = _UPVALUE0_
    L4 = L4.isStrNil
    L4 = L4(L5)
    if not L4 then
      goto lbl_42
    end
  end
  L4 = nil
  do return L4 end
  ::lbl_42::
  L4 = _UPVALUE0_
  L4 = L4.isStrNil
  L4 = L4(L5)
  if not L4 then
    L4 = L3.bssid1
    L1.mac = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.isStrNil
  L4 = L4(L5)
  if not L4 then
    L4 = L3.bssid2
    L1.mac5G = L4
  end
  L4 = L3.hardware
  if L4 then
    L4 = string
    L4 = L4.lower
    L4 = L4(L5)
    if L4 == "r01" then
      L4 = _UPVALUE0_
      L4 = L4.isStrNil
      L4 = L4(L5)
      if L4 then
        L1.needConvert = true
      else
        L4 = _UPVALUE0_
        L4 = L4.macFormat
        L4 = L4(L5)
        L1.mac = L4
      end
    end
  end
  L4 = {}
  if L5 then
    if 0 < L5 then
      for L9, L10 in L6, L7, L8 do
        L12 = L5
        L11 = L5.match
        L13 = "wl"
        L11 = L11(L12, L13)
        if L11 then
          L12 = L5
          L11 = L5.match
          L13 = "wl"
          L11 = L11(L12, L13)
          if not L11 then
            goto lbl_121
          end
          L11 = tonumber
          L12 = A0.assoc
          L11 = L11(L12)
          if L11 ~= 1 then
            goto lbl_121
          end
        end
        L11 = L10.ageing_timer
        if L11 <= 300 then
          L11 = L10.tx_bytes
          if L11 ~= 0 then
            break
          end
          L11 = L10.rx_bytes
          if L11 ~= 0 then
            break
          end
        end
        ::lbl_121::
      end
    end
  end
  if L5 then
    if 0 < L5 then
      for L8, L9 in L5, L6, L7 do
        L10 = L9.is_ap
        if L10 ~= nil then
          L10 = L9.is_ap
          if L10 ~= 0 then
            L10 = _simpleRecursive
            L11 = L9
            L10 = L10(L11)
            if L10 then
              L11 = table
              L11 = L11.insert
              L12 = L4
              L13 = L10
              L11(L12, L13)
            end
          end
        end
      end
      if 0 < L5 then
        L1.leafs = L4
      end
    end
  end
  return L1
end
_simpleRecursive = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = L0.getWifiBssid
  L1, L2 = L1()
  L3 = {}
  L3.mac = L1
  L4 = L2 or L4
  if not L2 then
    L4 = ""
  end
  L3.mac5G = L4
  L4 = _UPVALUE0_
  L4 = L4.exec
  L5 = "ubus call trafficd hw '{\"tree\":true}'"
  L4 = L4(L5)
  L5 = _UPVALUE1_
  L5 = L5.isStrNil
  L5 = L5(L6)
  if L5 then
    return L3
  else
    L5 = _UPVALUE2_
    L5 = L5.decode
    L5 = L5(L6)
    L4 = L5
  end
  L5 = {}
  for L9, L10 in L6, L7, L8 do
    L11 = L10.is_ap
    if L11 ~= nil then
      L11 = L10.is_ap
      if L11 ~= 0 then
        L11 = _simpleRecursive
        L12 = L10
        L11 = L11(L12)
        if L11 then
          L12 = table
          L12 = L12.insert
          L13 = L5
          L14 = L11
          L12(L13, L14)
        end
      end
    end
  end
  if 0 < L6 then
    L3.leafs = L5
  end
  return L3
end
simpleTopoGraph = L5
