local L0, L1, L2, L3, L4, L5, L6, L7
L0 = module
L1 = "xiaoqiang.util.XQVPNUtil"
L2 = package
L2 = L2.seeall
L0(L1, L2)
L0 = require
L1 = "xiaoqiang.common.XQFunction"
L0 = L0(L1)
L1 = require
L2 = "xiaoqiang.common.XQConfigs"
L1 = L1(L2)
L2 = require
L3 = "xiaoqiang.util.XQCryptoUtil"
L2 = L2(L3)
L3 = require
L4 = "luci.model.network"
L3 = L3(L4)
L4 = require
L5 = "luci.model.firewall"
L4 = L4(L5)
L5 = require
L6 = "luci.model.uci"
L5 = L5(L6)
L5 = L5.cursor
L5 = L5()
function L6(A0, A1, A2, A3, A4, A5, A6, A7)
  local L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21
  L8 = _UPVALUE0_
  L8 = L8.isStrNil
  L9 = A0
  L8 = L8(L9)
  if not L8 then
    L8 = _UPVALUE0_
    L8 = L8.isStrNil
    L9 = A1
    L8 = L8(L9)
    if not L8 then
      L8 = _UPVALUE0_
      L8 = L8.isStrNil
      L9 = A2
      L8 = L8(L9)
      if not L8 then
        L8 = _UPVALUE0_
        L8 = L8.isStrNil
        L9 = A3
        L8 = L8(L9)
        if not L8 then
          L8 = _UPVALUE0_
          L8 = L8.isStrNil
          L9 = A4
          L8 = L8(L9)
          if not L8 then
            L8 = _UPVALUE0_
            L8 = L8.isStrNil
            L9 = A6
            L8 = L8(L9)
            if not L8 then
              goto lbl_39
            end
          end
        end
      end
    end
  end
  L8 = false
  do return L8 end
  ::lbl_39::
  L8 = _UPVALUE0_
  L8 = L8.isStrNil
  L9 = A7
  L8 = L8(L9)
  if L8 then
    A7 = "auto"
  end
  L8 = A5
  L9 = _UPVALUE0_
  L9 = L9.isStrNil
  L10 = L8
  L9 = L9(L10)
  if L9 then
    L9 = _UPVALUE1_
    L9 = L9.md5Str
    L10 = A1
    L11 = A2
    L12 = A4
    L10 = L10 .. L11 .. L12
    L9 = L9(L10)
    L8 = L9
  end
  L9 = require
  L10 = "luci.model.uci"
  L9 = L9(L10)
  L9 = L9.cursor
  L9 = L9()
  L11 = L9
  L10 = L9.get
  L12 = "network"
  L13 = "vpn"
  L14 = "trafficall"
  L10 = L10(L11, L12, L13, L14)
  if L10 then
    L11 = string
    L11 = L11.lower
    L12 = L10
    L11 = L11(L12)
    if L11 == "yes" then
      L10 = "yes"
  end
  else
    L10 = "no"
  end
  L11 = string
  L11 = L11.lower
  L12 = A4
  L11 = L11(L12)
  L12 = _UPVALUE2_
  L12 = L12.init
  L12 = L12()
  L14 = L12
  L13 = L12.del_network
  L15 = A0
  L16 = "6"
  L15 = L15 .. L16
  L13(L14, L15)
  L14 = L12
  L13 = L12.del_network
  L15 = A0
  L13(L14, L15)
  L14 = L12
  L13 = L12.add_network
  L15 = A0
  L16 = {}
  L16.proto = L11
  L16.server = A1
  L16.username = A2
  L16.password = A3
  L16.auth = A7
  L16.id = L8
  L16.auto = A6
  L16.trafficall = L10
  L13 = L13(L14, L15, L16)
  L14 = "0"
  L15 = false
  if L14 == "1" then
    L17 = L12
    L16 = L12.add_network
    L18 = A0
    L19 = "6"
    L18 = L18 .. L19
    L19 = {}
    L19.proto = "dhcpv6"
    L20 = "@"
    L21 = A0
    L20 = L20 .. L21
    L19.ifname = L20
    L16 = L16(L17, L18, L19)
    L15 = L16
  else
    L15 = true
  end
  if L13 and L15 then
    L17 = L12
    L16 = L12.save
    L18 = "network"
    L16(L17, L18)
    L17 = L12
    L16 = L12.commit
    L18 = "network"
    L16(L17, L18)
    L16 = _UPVALUE3_
    L16 = L16.init
    L16 = L16()
    L18 = L16
    L17 = L16.get_zone
    L19 = "wan"
    L17 = L17(L18, L19)
    L19 = L17
    L18 = L17.add_network
    L20 = A0
    L18(L19, L20)
    L19 = L16
    L18 = L16.save
    L20 = "firewall"
    L18(L19, L20)
    L19 = L16
    L18 = L16.commit
    L20 = "firewall"
    L18(L19, L20)
    L18 = true
    return L18
  end
  L16 = false
  return L16
end
setVpn = L6
function L6(A0)
  local L1, L2, L3, L4, L5, L6
  L1 = getVPNInfo
  L2 = "vpn"
  L1 = L1(L2)
  L2 = L1.id
  if L2 == A0 then
    L3 = _UPVALUE0_
    L3 = L3.init
    L3 = L3()
    L5 = L3
    L4 = L3.del_network
    L6 = "vpn6"
    L4(L5, L6)
    L5 = L3
    L4 = L3.del_network
    L6 = "vpn"
    L4(L5, L6)
    L5 = L3
    L4 = L3.save
    L6 = "network"
    L4(L5, L6)
    L5 = L3
    L4 = L3.commit
    L6 = "network"
    L4(L5, L6)
  end
end
_delNetworkVpn = L6
function L6(A0, A1, A2, A3, A4, A5)
  local L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16
  L6 = getVPNInfo
  L7 = "vpn"
  L6 = L6(L7)
  L7 = L6.id
  if L7 == A4 then
    L8 = "vpn"
    L9 = string
    L9 = L9.lower
    L10 = A3
    L9 = L9(L10)
    L10 = _UPVALUE0_
    L10 = L10.md5Str
    L11 = A0
    L12 = A1
    L13 = A3
    L11 = L11 .. L12 .. L13
    L10 = L10(L11)
    L11 = _UPVALUE1_
    L12 = L11
    L11 = L11.set
    L13 = "network"
    L14 = L8
    L15 = "proto"
    L16 = L9
    L11(L12, L13, L14, L15, L16)
    L11 = _UPVALUE1_
    L12 = L11
    L11 = L11.set
    L13 = "network"
    L14 = L8
    L15 = "server"
    L16 = A0
    L11(L12, L13, L14, L15, L16)
    L11 = _UPVALUE1_
    L12 = L11
    L11 = L11.set
    L13 = "network"
    L14 = L8
    L15 = "username"
    L16 = A1
    L11(L12, L13, L14, L15, L16)
    L11 = _UPVALUE1_
    L12 = L11
    L11 = L11.set
    L13 = "network"
    L14 = L8
    L15 = "password"
    L16 = A2
    L11(L12, L13, L14, L15, L16)
    L11 = _UPVALUE1_
    L12 = L11
    L11 = L11.set
    L13 = "network"
    L14 = L8
    L15 = "id"
    L16 = L10
    L11(L12, L13, L14, L15, L16)
    L11 = _UPVALUE1_
    L12 = L11
    L11 = L11.set
    L13 = "network"
    L14 = L8
    L15 = "auth"
    L16 = A5
    L11(L12, L13, L14, L15, L16)
    L11 = _UPVALUE1_
    L12 = L11
    L11 = L11.commit
    L13 = "network"
    L11(L12, L13)
  end
end
_editNetworkVpn = L6
function L6(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8
  L1 = tonumber
  L2 = A0
  L1 = L1(L2)
  A0 = L1
  L1 = "vpn"
  if A0 and A0 == 0 then
    L2 = "0"
    if L2 then
      goto lbl_14
    end
  end
  L2 = "1"
  ::lbl_14::
  L3 = _UPVALUE0_
  L4 = L3
  L3 = L3.set
  L5 = "network"
  L6 = L1
  L7 = "auto"
  L8 = L2
  L3(L4, L5, L6, L7, L8)
  L3 = _UPVALUE0_
  L4 = L3
  L3 = L3.commit
  L5 = "network"
  L3(L4, L5)
  L3 = true
  return L3
end
setVpnAuto = L6
function L6(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8
  L1 = _UPVALUE0_
  L1 = L1.init
  L1 = L1()
  L2 = luci
  L2 = L2.model
  L2 = L2.uci
  L2 = L2.cursor
  L2 = L2()
  L3 = {}
  L3.proto = ""
  L3.server = ""
  L3.username = ""
  L3.password = ""
  L3.auto = "0"
  L3.id = ""
  L3.auth = ""
  L3.netmask = "255.255.255.0"
  L5 = L2
  L4 = L2.get
  L6 = "network"
  L7 = "wan"
  L8 = "netmask"
  L4 = L4(L5, L6, L7, L8)
  if nil ~= L4 then
    L5 = L2
    L4 = L2.get
    L6 = "network"
    L7 = "wan"
    L8 = "netmask"
    L4 = L4(L5, L6, L7, L8)
    L3.netmask = L4
  end
  L4 = _UPVALUE1_
  L4 = L4.isStrNil
  L5 = A0
  L4 = L4(L5)
  if L4 then
    return L3
  end
  L5 = L1
  L4 = L1.get_network
  L6 = A0
  L4 = L4(L5, L6)
  if L4 then
    L6 = L4
    L5 = L4.get_option_value
    L7 = "proto"
    L5 = L5(L6, L7)
    L3.proto = L5
    L6 = L4
    L5 = L4.get_option_value
    L7 = "server"
    L5 = L5(L6, L7)
    L3.server = L5
    L6 = L4
    L5 = L4.get_option_value
    L7 = "username"
    L5 = L5(L6, L7)
    L3.username = L5
    L6 = L4
    L5 = L4.get_option_value
    L7 = "password"
    L5 = L5(L6, L7)
    L3.password = L5
    L6 = L4
    L5 = L4.get_option_value
    L7 = "auto"
    L5 = L5(L6, L7)
    L3.auto = L5
    L6 = L4
    L5 = L4.get_option_value
    L7 = "id"
    L5 = L5(L6, L7)
    L3.id = L5
    L6 = L4
    L5 = L4.get_option_value
    L7 = "auth"
    L5 = L5(L6, L7)
    L3.auth = L5
  end
  return L3
end
getVPNInfo = L6
function L6(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = L2.isStrNil
  L4 = A1
  L3 = L3(L4)
  if L3 then
    L3 = false
    return L3
  end
  if A0 then
    L3 = require
    L4 = "ubus"
    L3 = L3(L4)
    L3 = L3.connect
    L3 = L3()
    L5 = L3
    L4 = L3.call
    L6 = "network.interface.vpn"
    L7 = "status"
    L8 = {}
    L4 = L4(L5, L6, L7, L8)
    L5 = getVPNInfo
    L6 = "vpn"
    L5 = L5(L6)
    L6 = L5.id
    L7 = L5.auto
    L8 = L2.isStrNil
    L9 = L7
    L8 = L8(L9)
    if L8 then
      L7 = "0"
    end
    if L6 ~= A1 then
      L8 = _UPVALUE0_
      L9 = L8
      L8 = L8.get_all
      L10 = "vpnlist"
      L11 = A1
      L8 = L8(L9, L10, L11)
      if L8 then
        L9 = setVpn
        L10 = "vpn"
        L11 = L8.server
        L12 = L8.username
        L13 = L8.password
        L14 = L8.proto
        L15 = A1
        L16 = L7
        L17 = L8.auth
        L9(L10, L11, L12, L13, L14, L15, L16, L17)
      end
    end
    L8 = os
    L8 = L8.execute
    L9 = _UPVALUE1_
    L9 = L9.RM_VPNSTATUS_FILE
    L8(L9)
    L8 = os
    L8 = L8.execute
    L9 = _UPVALUE1_
    L9 = L9.VPN_DISABLE
    L8(L9)
    if not L4 then
      L8 = os
      L8 = L8.execute
      L9 = "sleep 1"
      L8(L9)
    end
    L8 = L2.forkExec
    L9 = _UPVALUE1_
    L9 = L9.VPN_ENABLE
    L8(L9)
    L8 = 1
    return L8
  else
    L3 = os
    L3 = L3.execute
    L4 = _UPVALUE1_
    L4 = L4.RM_VPNSTATUS_FILE
    L3(L4)
    L3 = L2.forkExec
    L4 = _UPVALUE1_
    L4 = L4.VPN_DISABLE
    L3(L4)
    L3 = 1
    return L3
  end
end
vpnSwitch = L6
function L6()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = L0.exec
  L2 = _UPVALUE0_
  L2 = L2.VPN_STATUS
  L1 = L1(L2)
  L2 = _UPVALUE1_
  L2 = L2.isStrNil
  L3 = L1
  L2 = L2(L3)
  if not L2 then
    L2 = L0.trim
    L3 = L1
    L2 = L2(L3)
    L1 = L2
    L2 = _UPVALUE1_
    L2 = L2.isStrNil
    L3 = L1
    L2 = L2(L3)
    if L2 then
      L2 = nil
      return L2
    end
    L2 = require
    L3 = "json"
    L2 = L2(L3)
    L3 = L2.decode
    L4 = L1
    L3 = L3(L4)
    L1 = L3
    if L1 then
      return L1
    end
  end
  L2 = nil
  return L2
end
vpnStatus = L6
function L6(A0, A1, A2, A3, A4, A5)
  local L6, L7, L8, L9, L10, L11, L12, L13, L14
  L6 = _UPVALUE0_
  L6 = L6.isStrNil
  L7 = A0
  L6 = L6(L7)
  if not L6 then
    L6 = _UPVALUE0_
    L6 = L6.isStrNil
    L7 = A1
    L6 = L6(L7)
    if not L6 then
      L6 = _UPVALUE0_
      L6 = L6.isStrNil
      L7 = A2
      L6 = L6(L7)
      if not L6 then
        L6 = _UPVALUE0_
        L6 = L6.isStrNil
        L7 = A3
        L6 = L6(L7)
        if not L6 then
          L6 = _UPVALUE0_
          L6 = L6.isStrNil
          L7 = A4
          L6 = L6(L7)
          if not L6 then
            goto lbl_33
          end
        end
      end
    end
  end
  L6 = false
  do return L6 end
  ::lbl_33::
  L6 = _UPVALUE0_
  L6 = L6.isStrNil
  L7 = A5
  L6 = L6(L7)
  if L6 then
    A5 = "auto"
  end
  L6 = _UPVALUE1_
  L6 = L6.md5Str
  L7 = A1
  L8 = A2
  L9 = A4
  L7 = L7 .. L8 .. L9
  L6 = L6(L7)
  L7 = string
  L7 = L7.lower
  L8 = A4
  L7 = L7(L8)
  L8 = {}
  L8.oname = A0
  L8.server = A1
  L8.username = A2
  L8.password = A3
  L8.proto = L7
  L8.id = L6
  L8.auth = A5
  L9 = _UPVALUE2_
  L10 = L9
  L9 = L9.section
  L11 = "vpnlist"
  L12 = "vpn"
  L13 = L6
  L14 = L8
  L9(L10, L11, L12, L13, L14)
  L9 = _UPVALUE2_
  L10 = L9
  L9 = L9.commit
  L11 = "vpnlist"
  L9(L10, L11)
  L9 = true
  return L9
end
addVPN = L6
function L6(A0, A1, A2, A3, A4, A5)
  local L6, L7, L8, L9, L10, L11, L12, L13, L14
  L6 = _UPVALUE0_
  L6 = L6.isStrNil
  L7 = A0
  L6 = L6(L7)
  if L6 then
    L6 = false
    return L6
  end
  L6 = _UPVALUE1_
  L7 = L6
  L6 = L6.get_all
  L8 = "vpnlist"
  L9 = A0
  L6 = L6(L7, L8, L9)
  L7 = L6.auth
  L8 = _UPVALUE0_
  L8 = L8.isStrNil
  L9 = L7
  L8 = L8(L9)
  if L8 then
    L7 = "auto"
  end
  L8 = _UPVALUE1_
  L9 = L8
  L8 = L8.delete
  L10 = "vpnlist"
  L11 = A0
  L8(L9, L10, L11)
  L8 = _editNetworkVpn
  L9 = A2
  L10 = A3
  L11 = A4
  L12 = A5
  L13 = A0
  L14 = L7
  L8(L9, L10, L11, L12, L13, L14)
  L8 = addVPN
  L9 = A1
  L10 = A2
  L11 = A3
  L12 = A4
  L13 = A5
  L14 = L7
  return L8(L9, L10, L11, L12, L13, L14)
end
editVPN = L6
function L6(A0)
  local L1, L2, L3, L4
  L1 = _UPVALUE0_
  L1 = L1.isStrNil
  L2 = A0
  L1 = L1(L2)
  if L1 then
    L1 = false
    return L1
  end
  L1 = _UPVALUE1_
  L2 = L1
  L1 = L1.delete
  L3 = "vpnlist"
  L4 = A0
  L1(L2, L3, L4)
  L1 = _UPVALUE1_
  L2 = L1
  L1 = L1.commit
  L3 = "vpnlist"
  L1(L2, L3)
  L1 = _delNetworkVpn
  L2 = A0
  L1(L2)
  L1 = true
  return L1
end
delVPN = L6
function L6(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8
  L2 = require
  L3 = "luci.ip"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.XQLog"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.common.XQFunction"
  L4 = L4(L5)
  L5 = L2.iptonl
  L6 = A0
  L5 = L5(L6)
  L6 = L2.iptonl
  L7 = "169.254.0.0"
  L6 = L6(L7)
  if L5 >= L6 then
    L6 = L2.iptonl
    L7 = "169.254.255.255"
    L6 = L6(L7)
    if L5 <= L6 then
      goto lbl_34
    end
  end
  L6 = L2.iptonl
  L7 = "127.0.0.1"
  L6 = L6(L7)
  if L5 ~= L6 then
    L6 = L4.isBroadcastOrMulticast
    L7 = A0
    L8 = A1
    L6 = L6(L7, L8)
    if L6 then
      goto lbl_36
    end
  end
  ::lbl_34::
  L6 = false
  do return L6 end
  ::lbl_36::
  L6 = true
  return L6
end
checkVPNServerIp = L6
function L6()
  local L0, L1, L2, L3, L4, L5
  L0 = {}
  L1 = _UPVALUE0_
  L2 = L1
  L1 = L1.foreach
  L3 = "vpnlist"
  L4 = "vpn"
  function L5(A0)
    local L1, L2, L3, L4
    L1 = {}
    L2 = A0.oname
    L1.oname = L2
    L2 = A0.server
    L1.server = L2
    L2 = A0.username
    L1.username = L2
    L2 = A0.password
    L1.password = L2
    L2 = A0.proto
    L1.proto = L2
    L2 = A0.id
    L1.id = L2
    L2 = table
    L2 = L2.insert
    L3 = _UPVALUE0_
    L4 = L1
    L2(L3, L4)
  end
  L1(L2, L3, L4, L5)
  return L0
end
getVPNList = L6
L6 = "/etc/smartvpn/proxy.txt"
function L7()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L0 = require
  L1 = "nixio.fs"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.cbi.datatypes"
  L1 = L1(L2)
  L2 = {}
  L3 = L0.access
  L3 = L3(L4)
  if L3 then
    L3 = io
    L3 = L3.open
    L3 = L3(L4, L5)
    if L3 then
      for L7 in L4, L5, L6 do
        L8 = _UPVALUE1_
        L8 = L8.isStrNil
        L9 = L7
        L8 = L8(L9)
        if not L8 then
          L9 = L7
          L8 = L7.match
          L10 = "^%."
          L8 = L8(L9, L10)
          if L8 then
            L9 = L7
            L8 = L7.gsub
            L10 = "^%."
            L11 = ""
            L8 = L8(L9, L10, L11)
            L7 = L8
            L8 = table
            L8 = L8.insert
            L9 = L2
            L10 = L7
            L8(L9, L10)
          else
            L8 = L1.ipaddr
            L9 = L7
            L8 = L8(L9)
            if L8 then
              L8 = table
              L8 = L8.insert
              L9 = L2
              L10 = L7
              L8(L9, L10)
            end
          end
        end
      end
    end
  end
  L3 = #L2
  if 0 < L3 then
    return L2
  else
    L3 = nil
    return L3
  end
end
getProxyList = L7
function L7(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10
  if A0 then
    L1 = type
    L1 = L1(L2)
    if L1 == "string" and A0 == "default" then
      A0 = nil
    end
  end
  if A0 then
    L1 = type
    L1 = L1(L2)
    if L1 == "table" then
      L1 = io
      L1 = L1.open
      L1 = L1(L2, L3)
      for L5, L6 in L2, L3, L4 do
        L7 = _UPVALUE1_
        L7 = L7.isStrNil
        L8 = L6
        L7 = L7(L8)
        if not L7 then
          L8 = L1
          L7 = L1.write
          L9 = L6
          L10 = "\n"
          L9 = L9 .. L10
          L7(L8, L9)
        end
      end
      L2(L3)
    end
  end
end
updateProxyList = L7
function L7()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "luci.model.uci"
  L0 = L0(L1)
  L0 = L0.cursor
  L0 = L0()
  L1 = {}
  L3 = L0
  L2 = L0.get_all
  L4 = "smartvpn"
  L5 = "device"
  L2 = L2(L3, L4, L5)
  if L2 then
    L4 = L0
    L3 = L0.get_list
    L5 = "smartvpn"
    L6 = "device"
    L7 = "mac"
    L3 = L3(L4, L5, L6, L7)
    L1 = L3
  else
    L1 = nil
  end
  return L1
end
getDeviceList = L7
function L7()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9
  L0 = require
  L1 = "luci.model.uci"
  L0 = L0(L1)
  L0 = L0.cursor
  L0 = L0()
  L1 = luci
  L1 = L1.model
  L1 = L1.uci
  L1 = L1.cursor
  L1 = L1()
  L2 = {}
  L2.status = 0
  L2.switch = 0
  L2.mode = 1
  L2.netmask = "255.255.255.0"
  L4 = L0
  L3 = L0.get_all
  L5 = "smartvpn"
  L6 = "vpn"
  L3 = L3(L4, L5, L6)
  L5 = L0
  L4 = L0.get_all
  L6 = "smartvpn"
  L7 = "device"
  L4 = L4(L5, L6, L7)
  L6 = L1
  L5 = L1.get
  L7 = "network"
  L8 = "wan"
  L9 = "netmask"
  L5 = L5(L6, L7, L8, L9)
  if nil ~= L5 then
    L6 = L1
    L5 = L1.get
    L7 = "network"
    L8 = "wan"
    L9 = "netmask"
    L5 = L5(L6, L7, L8, L9)
    L2.netmask = L5
  end
  if L3 then
    L5 = L3.status
    if L5 == "on" then
      L2.status = 1
    else
      L5 = L3.status
      if L5 == "off" then
        L2.status = 0
      end
    end
    L5 = L3.switch
    if L5 then
      L5 = tonumber
      L6 = L3.switch
      L5 = L5(L6)
      if L5 == 1 then
        L2.switch = 1
      end
    end
    if L4 then
      L5 = L4.disabled
      if L5 then
        L5 = tonumber
        L6 = L4.disabled
        L5 = L5(L6)
        if L5 == 0 then
          L2.mode = 2
      end
    end
    else
      L5 = L3.disabled
      if L5 then
        L5 = tonumber
        L6 = L3.disabled
        L5 = L5(L6)
        if L5 == 0 then
          L2.mode = 1
      end
      else
        L2.mode = 0
      end
    end
  end
  return L2
end
getSmartVPNInfo = L7
function L7(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9, L10
  L2 = require
  L3 = "nixio.fs"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.model.uci"
  L3 = L3(L4)
  L3 = L3.cursor
  L3 = L3()
  if A1 then
    if A1 == 1 then
      L4 = L2.access
      L5 = _UPVALUE0_
      L4 = L4(L5)
      if not L4 and A0 == 1 then
        L4 = updateProxyList
        L5 = "default"
        L4(L5)
      end
      L5 = L3
      L4 = L3.set
      L6 = "smartvpn"
      L7 = "vpn"
      L8 = "disabled"
      L9 = "0"
      L4(L5, L6, L7, L8, L9)
      L5 = L3
      L4 = L3.set_list
      L6 = "smartvpn"
      L7 = "vpn"
      L8 = "domain_file"
      L9 = {}
      L10 = _UPVALUE0_
      L9[1] = L10
      L4(L5, L6, L7, L8, L9)
      L5 = L3
      L4 = L3.get_all
      L6 = "smartvpn"
      L7 = "device"
      L4 = L4(L5, L6, L7)
      if L4 then
        L5 = L3
        L4 = L3.set
        L6 = "smartvpn"
        L7 = "device"
        L8 = "disabled"
        L9 = "1"
        L4(L5, L6, L7, L8, L9)
      end
    elseif A1 == 2 then
      L5 = L3
      L4 = L3.set
      L6 = "smartvpn"
      L7 = "vpn"
      L8 = "disabled"
      L9 = "1"
      L4(L5, L6, L7, L8, L9)
      L5 = L3
      L4 = L3.get_all
      L6 = "smartvpn"
      L7 = "device"
      L4 = L4(L5, L6, L7)
      if L4 then
        L5 = L3
        L4 = L3.set
        L6 = "smartvpn"
        L7 = "device"
        L8 = "disabled"
        L9 = "0"
        L4(L5, L6, L7, L8, L9)
      else
        L5 = L3
        L4 = L3.section
        L6 = "smartvpn"
        L7 = "record"
        L8 = "device"
        L9 = {}
        L9.disabled = "0"
        L4(L5, L6, L7, L8, L9)
      end
    end
  end
  if A0 then
    if A0 == 0 then
      L5 = L3
      L4 = L3.set
      L6 = "smartvpn"
      L7 = "vpn"
      L8 = "switch"
      L9 = "0"
      L4(L5, L6, L7, L8, L9)
      L5 = L3
      L4 = L3.set
      L6 = "smartvpn"
      L7 = "vpn"
      L8 = "disabled"
      L9 = "1"
      L4(L5, L6, L7, L8, L9)
      L5 = L3
      L4 = L3.set
      L6 = "smartvpn"
      L7 = "device"
      L8 = "disabled"
      L9 = "1"
      L4(L5, L6, L7, L8, L9)
    elseif A0 == 1 then
      L5 = L3
      L4 = L3.set
      L6 = "smartvpn"
      L7 = "vpn"
      L8 = "switch"
      L9 = "1"
      L4(L5, L6, L7, L8, L9)
    end
  end
  L5 = L3
  L4 = L3.commit
  L6 = "smartvpn"
  L4(L5, L6)
  if A0 then
    if A0 == 0 then
      L4 = os
      L4 = L4.execute
      L5 = "/usr/sbin/smartvpn.sh off >/dev/null 2>/dev/null"
      L4(L5)
    else
      L4 = os
      L4 = L4.execute
      L5 = "/usr/sbin/smartvpn.sh on >/dev/null 2>/dev/null"
      L4(L5)
    end
    L5 = L3
    L4 = L3.get
    L6 = "network"
    L7 = "vpn"
    L8 = "trafficall"
    L4 = L4(L5, L6, L7, L8)
    if A0 == 1 and L4 then
      L5 = string
      L5 = L5.lower
      L6 = L4
      L5 = L5(L6)
      if L5 == "yes" then
        L5 = mivpnSwitch
        L6 = false
        L5(L6)
      end
    end
  end
end
setSmartVPN = L7
function L7(A0)
  local L1, L2
  if A0 and A0 == 0 then
    L1 = os
    L1 = L1.execute
    L2 = "/usr/sbin/mivpn.sh off >/dev/null 2>/dev/null"
    L1(L2)
  end
end
setMiVPN = L7
function L7(A0, A1, A2)
  local L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  if not A0 and not A1 then
    L3 = nil
    return L3
  end
  if A2 == "+" then
    if A0 then
      if not A1 then
        return A0
      end
      L3 = {}
      for L7, L8 in L4, L5, L6 do
        L3[L8] = true
      end
      for L7, L8 in L4, L5, L6 do
        L9 = L3[L8]
        if not L9 then
          L9 = table
          L9 = L9.insert
          L10 = A0
          L11 = L8
          L9(L10, L11)
        end
      end
      return A0
    elseif not A1 then
      L3 = nil
      return L3
    else
      return A1
    end
  elseif A2 == "-" and A0 then
    if not A1 then
      return A0
    end
    L3 = {}
    for L8, L9 in L5, L6, L7 do
      L4[L9] = true
    end
    for L8, L9 in L5, L6, L7 do
      L10 = L4[L9]
      if not L10 then
        L10 = table
        L10 = L10.insert
        L11 = L3
        L12 = L9
        L10(L11, L12)
      end
    end
    return L3
  end
  L3 = nil
  return L3
end
merge = L7
function L7(A0)
  local L1, L2, L3, L4, L5
  L1 = require
  L2 = "luci.cbi.datatypes"
  L1 = L1(L2)
  if A0 then
    L3 = A0
    L2 = A0.gsub
    L4 = "http://"
    L5 = ""
    L2 = L2(L3, L4, L5)
    A0 = L2
    L3 = A0
    L2 = A0.gsub
    L4 = "^www"
    L5 = ""
    L2 = L2(L3, L4, L5)
    A0 = L2
    L2 = L1.ipaddr
    L3 = A0
    L2 = L2(L3)
    if not L2 then
      L3 = A0
      L2 = A0.match
      L4 = "^%."
      L2 = L2(L3, L4)
      if not L2 then
        L2 = "."
        L3 = A0
        A0 = L2 .. L3
      end
    end
    return A0
  end
  L2 = nil
  return L2
end
urlFormat = L7
function L7(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9
  if A1 then
    if L2 == "table" then
      goto lbl_10
    end
  end
  do return L2 end
  ::lbl_10::
  for L5, L6 in L2, L3, L4 do
    L7 = _UPVALUE0_
    L7 = L7.isStrNil
    L8 = L6
    L7 = L7(L8)
    if L7 then
      L7 = false
      return L7
    else
      L7 = urlFormat
      L8 = L6
      L7 = L7(L8)
      A1[L5] = L7
    end
  end
  if L2 then
    for L6, L7 in L3, L4, L5 do
      L8 = _UPVALUE0_
      L8 = L8.isStrNil
      L9 = L7
      L8 = L8(L9)
      if not L8 then
        L8 = urlFormat
        L9 = L7
        L8 = L8(L9)
        L2[L6] = L8
      end
    end
    if A0 == 0 then
      L6 = "+"
    elseif A0 == 1 then
      L6 = "-"
    end
    L3(L4)
  elseif A0 == 0 then
    L3(L4)
  end
  return L3
end
editUrl = L7
function L7(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9, L10
  L2 = require
  L2 = L2(L3)
  if A1 then
    if L3 == "table" then
      goto lbl_13
    end
  end
  do return L3 end
  ::lbl_13::
  for L6, L7 in L3, L4, L5 do
    L8 = _UPVALUE0_
    L8 = L8.isStrNil
    L9 = L7
    L8 = L8(L9)
    if not L8 then
      L8 = L2.macaddr
      L9 = L7
      L8 = L8(L9)
      if L8 then
        goto lbl_31
      end
    end
    L8 = false
    do return L8 end
    goto lbl_36
    ::lbl_31::
    L8 = _UPVALUE0_
    L8 = L8.macFormat
    L9 = L7
    L8 = L8(L9)
    A1[L6] = L8
    ::lbl_36::
  end
  L6 = "smartvpn"
  L7 = "device"
  if L4 then
    if L5 then
      L6 = L4.mac
      if L5 == "table" then
        if A0 == 0 then
          L6 = L4.mac
          L7 = A1
          L8 = "+"
          L4.mac = L5
        elseif A0 == 1 then
          L6 = L4.mac
          L7 = A1
          L8 = "-"
          L4.mac = L5
        end
    end
    elseif A0 == 0 then
      L4.mac = A1
    end
    if 0 < L5 then
      L6 = L3
      L7 = "smartvpn"
      L8 = "record"
      L9 = "device"
      L10 = L4
      L5(L6, L7, L8, L9, L10)
    else
      L6 = L3
      L7 = "smartvpn"
      L8 = "device"
      L9 = "mac"
      L5(L6, L7, L8, L9)
    end
  elseif A0 == 0 then
    L6 = L3
    L7 = "smartvpn"
    L8 = "record"
    L9 = "device"
    L10 = {}
    L10.disabled = 0
    L10.mac = A1
    L5(L6, L7, L8, L9, L10)
  end
  L6 = L3
  L7 = "smartvpn"
  L5(L6, L7)
  return L5
end
editMac = L7
function L7()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "luci.model.uci"
  L0 = L0(L1)
  L0 = L0.cursor
  L0 = L0()
  L2 = L0
  L1 = L0.get
  L3 = "network"
  L4 = "vpn"
  L5 = "trafficall"
  L1 = L1(L2, L3, L4, L5)
  if L1 then
    L2 = string
    L2 = L2.lower
    L3 = L1
    L2 = L2(L3)
    if L2 == "yes" then
      L2 = 1
      return L2
  end
  else
    L2 = 0
    return L2
  end
end
mivpnInfo = L7
function L7(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9
  L1 = require
  L2 = "luci.model.uci"
  L1 = L1(L2)
  L1 = L1.cursor
  L1 = L1()
  L3 = L1
  L2 = L1.get_all
  L4 = "network"
  L5 = "vpn"
  L2 = L2(L3, L4, L5)
  L4 = L1
  L3 = L1.get
  L5 = "smartvpn"
  L6 = "vpn"
  L7 = "switch"
  L3 = L3(L4, L5, L6, L7)
  if A0 and L3 then
    L4 = tonumber
    L5 = L3
    L4 = L4(L5)
    if L4 == 1 then
      L4 = setSmartVPN
      L5 = 0
      L6 = 1
      L4(L5, L6)
    end
  end
  if L2 then
    L5 = L1
    L4 = L1.set
    L6 = "network"
    L7 = "vpn"
    L8 = "trafficall"
    if A0 then
      L9 = "yes"
      if L9 then
        goto lbl_40
      end
    end
    L9 = "no"
    ::lbl_40::
    L4(L5, L6, L7, L8, L9)
    L5 = L1
    L4 = L1.commit
    L6 = "network"
    L4(L5, L6)
    if not A0 then
      L4 = setMiVPN
      L5 = 0
      L4(L5)
    end
    L4 = true
    return L4
  else
    L4 = false
    return L4
  end
end
mivpnSwitch = L7
