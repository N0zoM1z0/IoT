local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19
L0 = module
L1 = "xiaoqiang.util.XQSecureUtil"
L2 = package
L2 = L2.seeall
L0(L1, L2)
L0 = require
L1 = "luci.util"
L0(L1)
L0 = require
L1 = "luci.sys"
L0(L1)
L0 = require
L1 = "bit"
L0 = L0(L1)
L1 = require
L2 = "nixio"
L1 = L1(L2)
L2 = require
L3 = "nixio.util"
L2(L3)
L2 = require
L3 = "nixio.fs"
L2 = L2(L3)
L3 = require
L4 = "xiaoqiang.XQLog"
L3 = L3(L4)
L4 = require
L5 = "xssFilter"
L4 = L4(L5)
L4 = L4.new
L4 = L4()
L5 = require
L6 = "xiaoqiang.common.XQFunction"
L5 = L5(L6)
L6 = require
L7 = "xiaoqiang.XQPreference"
L6 = L6(L7)
L7 = require
L8 = "xiaoqiang.util.XQCryptoUtil"
L7 = L7(L8)
L8 = "a2ffa5c9be07488bbb04a3a47d3c5f6a"
L9 = "echo -e '%s' | openssl aes-128-cbc -d -K '%s' -iv '64175472480004614961023454661220' -base64"
L10 = "echo -e '%s' | /usr/bin/aes_crypt -b -d -k '%s' -i 64175472480004614961023454661220 -"
L11 = "/etc/tmp"
L12 = "/etc/tmp/luci-nonce"
function L13(A0)
  local L1, L2, L3
  L1 = #A0
  L2 = A0
  L1 = A0.match
  L3 = "^[a-fA-F0-9]+$"
  L1 = L1(L2, L3)
  L1 = not L1
  L1 = A0 and L1
  return L1
end
checkid = L13
function L13()
  local L0, L1, L2
  L0 = _UPVALUE0_
  L0 = L0.mkdir
  L1 = _UPVALUE1_
  L2 = 700
  L0(L1, L2)
  L0 = _UPVALUE0_
  L0 = L0.mkdir
  L1 = _UPVALUE2_
  L2 = 700
  L0(L1, L2)
  L0 = sane
  L0 = L0()
  if not L0 then
    L0 = error
    L1 = "Security Exception: Nonce path is not sane!"
    L0(L1)
  end
end
prepare = L13
function L13(A0)
  local L1, L2, L3, L4
  L1 = luci
  L1 = L1.sys
  L1 = L1.process
  L1 = L1.info
  L2 = "uid"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.stat
  L3 = A0 or L3
  if not A0 then
    L3 = _UPVALUE1_
  end
  L4 = "uid"
  L2 = L2(L3, L4)
  L1 = L1 == L2
  return L1
end
sane = L13
function L13(A0)
  local L1, L2, L3, L4, L5
  if A0 then
    L1 = checkid
    L2 = A0
    L1 = L1(L2)
    if L1 then
      goto lbl_10
    end
  end
  L1 = nil
  do return L1 end
  ::lbl_10::
  L1 = sane
  L2 = _UPVALUE0_
  L3 = "/"
  L4 = A0
  L2 = L2 .. L3 .. L4
  L1 = L1(L2)
  if not L1 then
    L1 = nil
    return L1
  end
  L1 = _UPVALUE1_
  L1 = L1.readfile
  L2 = _UPVALUE0_
  L3 = "/"
  L4 = A0
  L2 = L2 .. L3 .. L4
  L1 = L1(L2)
  L2 = loadstring
  L3 = L1
  L2 = L2(L3)
  L3 = setfenv
  L4 = L2
  L5 = {}
  L3(L4, L5)
  L3 = L2
  L3 = L3()
  L4 = type
  L5 = L3
  L4 = L4(L5)
  if L4 ~= "table" then
    L4 = nil
    return L4
  end
  return L3
end
readNonce = L13
function L13(A0, A1)
  local L2, L3, L4, L5
  L2 = sane
  L2 = L2()
  if not L2 then
    L2 = prepare
    L2()
  end
  L2 = checkid
  L3 = A0
  L2 = L2(L3)
  if L2 then
    L2 = type
    L3 = A1
    L2 = L2(L3)
    if L2 == "table" then
      goto lbl_18
    end
  end
  do return end
  ::lbl_18::
  L2 = luci
  L2 = L2.util
  L2 = L2.get_bytecode
  L3 = A1
  L2 = L2(L3)
  A1 = L2
  L2 = _UPVALUE0_
  L2 = L2.open
  L3 = _UPVALUE1_
  L4 = "/"
  L5 = A0
  L3 = L3 .. L4 .. L5
  L4 = "w"
  L5 = 600
  L2 = L2(L3, L4, L5)
  L4 = L2
  L3 = L2.writeall
  L5 = A1
  L3(L4, L5)
  L4 = L2
  L3 = L2.close
  L3(L4)
end
writeNonce = L13
function L13(A0)
  local L1, L2, L3, L4, L5, L6, L7
  L1 = _UPVALUE0_
  L1 = L1.isStrNil
  L2 = A0
  L1 = L1(L2)
  if L1 then
    return A0
  end
  L1 = type
  L2 = A0
  L1 = L1(L2)
  if L1 == "string" then
    L1 = _UPVALUE1_
    L2 = L1
    L1 = L1.filter
    L3 = A0
    L1, L2 = L1(L2, L3)
    if L1 then
      return L1
    else
      L3 = require
      L4 = "xiaoqiang.XQLog"
      L3 = L3(L4)
      L4 = L3.log
      L5 = 4
      L6 = "XSS Warning:"
      L7 = A0
      L6 = L6 .. L7
      L4(L5, L6)
      L4 = nil
      return L4
    end
  else
    return A0
  end
end
xssCheck = L13
function L13(A0)
  local L1, L2, L3, L4, L5, L6, L7
  L1 = require
  L2 = "luci.sys"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.sauth"
  L2 = L2(L3)
  L3 = {}
  L4 = L1.uniqueid
  L5 = 16
  L4 = L4(L5)
  L5 = tostring
  L6 = A0
  L5 = L5(L6)
  L3.type = L5
  L5 = L2.write
  L6 = L4
  L7 = L3
  L5(L6, L7)
  return L4
end
generateRedirectKey = L13
function L13(A0)
  local L1, L2, L3, L4, L5, L6
  L1 = _UPVALUE0_
  L1 = L1.isStrNil
  L2 = A0
  L1 = L1(L2)
  if L1 then
    L1 = false
    return L1
  end
  L1 = require
  L2 = "luci.sys"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.sauth"
  L2 = L2(L3)
  L3 = L2.read
  L4 = A0
  L3 = L3(L4)
  if L3 then
    L4 = type
    L5 = L3
    L4 = L4(L5)
    if L4 == "table" then
      L4 = L2.kill
      L5 = A0
      L4(L5)
      L4 = L1.uptime
      L4 = L4()
      L5 = L3.atime
      L5 = L4 - L5
      if 10 < L5 then
        L5 = false
        return L5
      else
        L5 = tostring
        L6 = L3.type
        return L5(L6)
      end
    end
  end
  L4 = false
  return L4
end
checkRedirectKey = L13
function L13(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L1 = _UPVALUE0_
  L1 = L1.isStrNil
  L2 = A0
  L1 = L1(L2)
  if L1 then
    L1 = ""
    return L1
  end
  L1 = math
  L1 = L1.ceil
  L2 = #A0
  L2 = L2 / 64
  L1 = L1(L2)
  L2 = {}
  for L6 = L3, L4, L5 do
    if L6 ~= L1 then
      L7 = table
      L7 = L7.insert
      L8 = L2
      L9 = string
      L9 = L9.sub
      L10 = A0
      L11 = L6 - 1
      L11 = L11 * 64
      L11 = 1 + L11
      L12 = 64 * L6
      L9, L10, L11, L12 = L9(L10, L11, L12)
      L7(L8, L9, L10, L11, L12)
    else
      L7 = table
      L7 = L7.insert
      L8 = L2
      L9 = string
      L9 = L9.sub
      L10 = A0
      L11 = L6 - 1
      L11 = L11 * 64
      L11 = 1 + L11
      L12 = -1
      L9, L10, L11, L12 = L9(L10, L11, L12)
      L7(L8, L9, L10, L11, L12)
    end
  end
  return L3(L4, L5)
end
ciphertextFormat = L13
function L13(A0, A1)
  local L2, L3, L4, L5, L6, L7
  L2 = _UPVALUE0_
  L2 = L2.isStrNil
  L3 = A1
  L2 = L2(L3)
  if not L2 then
    L3 = A1
    L2 = A1.match
    L4 = "\""
    L2 = L2(L3, L4)
    if not L2 then
      L3 = A1
      L2 = A1.match
      L4 = " "
      L2 = L2(L3, L4)
      if not L2 then
        L3 = A1
        L2 = A1.match
        L4 = "'"
        L2 = L2(L3, L4)
        if not L2 then
          goto lbl_24
        end
      end
    end
  end
  L2 = nil
  do return L2 end
  ::lbl_24::
  L2 = _UPVALUE1_
  L2 = L2.get
  L3 = A0
  L4 = ""
  L5 = "account"
  L2 = L2(L3, L4, L5)
  L3 = string
  L3 = L3.format
  L4 = _UPVALUE2_
  L5 = ciphertextFormat
  L6 = A1
  L5 = L5(L6)
  L6 = L2
  L3 = L3(L4, L5, L6)
  L4 = string
  L4 = L4.format
  L5 = _UPVALUE3_
  L6 = A1
  L7 = L2
  L4 = L4(L5, L6, L7)
  L5 = os
  L5 = L5.execute
  L6 = L3
  L5 = L5(L6)
  if L5 == 0 then
    L5 = luci
    L5 = L5.util
    L5 = L5.trim
    L6 = luci
    L6 = L6.util
    L6 = L6.exec
    L7 = L3
    L6, L7 = L6(L7)
    return L5(L6, L7)
  else
    L5 = os
    L5 = L5.execute
    L6 = L4
    L5 = L5(L6)
    if L5 == 0 then
      L5 = luci
      L5 = L5.util
      L5 = L5.trim
      L6 = luci
      L6 = L6.util
      L6 = L6.exec
      L7 = L4
      L6, L7 = L6(L7)
      return L5(L6, L7)
    end
  end
  L5 = nil
  return L5
end
decCiphertext = L13
function L13(A0, A1)
  local L2, L3, L4, L5, L6
  L2 = _UPVALUE0_
  L2 = L2.isStrNil
  L3 = A0
  L2 = L2(L3)
  if not L2 then
    L2 = _UPVALUE0_
    L2 = L2.isStrNil
    L3 = A1
    L2 = L2(L3)
    if not L2 then
      goto lbl_15
    end
  end
  L2 = false
  do return L2 end
  ::lbl_15::
  L2 = _UPVALUE1_
  L2 = L2.sha1
  L3 = A1
  L4 = _UPVALUE2_
  L3 = L3 .. L4
  L2 = L2(L3)
  L3 = _UPVALUE3_
  L3 = L3.set
  L4 = A0
  L5 = L2
  L6 = "account"
  L3(L4, L5, L6)
  L3 = _UPVALUE0_
  L3 = L3.nvramSet
  L4 = "nv_sys_pwd"
  L5 = L2
  L3(L4, L5)
  L3 = _UPVALUE0_
  L3 = L3.nvramCommit
  L3()
  L3 = true
  return L3
end
savePlaintextPwd = L13
function L13(A0, A1)
  local L2, L3, L4, L5, L6
  L2 = _UPVALUE0_
  L2 = L2.isStrNil
  L3 = A0
  L2 = L2(L3)
  if not L2 then
    L2 = _UPVALUE0_
    L2 = L2.isStrNil
    L3 = A1
    L2 = L2(L3)
    if not L2 then
      goto lbl_15
    end
  end
  L2 = false
  do return L2 end
  ::lbl_15::
  L2 = decCiphertext
  L3 = A0
  L4 = A1
  L2 = L2(L3, L4)
  if L2 then
    L3 = _UPVALUE1_
    L3 = L3.set
    L4 = A0
    L5 = L2
    L6 = "account"
    L3(L4, L5, L6)
    L3 = _UPVALUE0_
    L3 = L3.nvramSet
    L4 = "nv_sys_pwd"
    L5 = L2
    L3(L4, L5)
    L3 = _UPVALUE0_
    L3 = L3.nvramCommit
    L3()
    L3 = true
    return L3
  end
  L3 = false
  return L3
end
saveCiphertextPwd = L13
function L13(A0, A1)
  local L2, L3, L4, L5
  L2 = _UPVALUE0_
  L2 = L2.isStrNil
  L3 = A0
  L2 = L2(L3)
  if not L2 then
    L2 = _UPVALUE0_
    L2 = L2.isStrNil
    L3 = A1
    L2 = L2(L3)
    if not L2 then
      goto lbl_15
    end
  end
  L2 = false
  do return L2 end
  ::lbl_15::
  L2 = _UPVALUE1_
  L2 = L2.get
  L3 = A0
  L4 = ""
  L5 = "account"
  L2 = L2(L3, L4, L5)
  L3 = _UPVALUE2_
  L3 = L3.sha1
  L4 = A1
  L5 = _UPVALUE3_
  L4 = L4 .. L5
  L3 = L3(L4)
  if L2 == L3 then
    L4 = true
    return L4
  else
    L4 = false
    return L4
  end
end
checkPlaintextPwd = L13
function L13(A0, A1, A2)
  local L3, L4, L5, L6, L7, L8, L9
  L3 = _UPVALUE0_
  L3 = L3.get
  L4 = A0
  L5 = nil
  L6 = "account"
  L3 = L3(L4, L5, L6)
  if L3 then
    L4 = _UPVALUE1_
    L4 = L4.isStrNil
    L5 = A2
    L4 = L4(L5)
    if not L4 then
      L4 = _UPVALUE1_
      L4 = L4.isStrNil
      L5 = A1
      L4 = L4(L5)
      if not L4 then
        L4 = _UPVALUE2_
        L4 = L4.sha1
        L5 = A1
        L6 = L3
        L5 = L5 .. L6
        L4 = L4(L5)
        if L4 == A2 then
          L4 = true
          return L4
        end
      end
    end
  end
  L4 = _UPVALUE3_
  L4 = L4.log
  L5 = 4
  L6 = luci
  L6 = L6.http
  L6 = L6.getenv
  L7 = "REMOTE_ADDR"
  L6 = L6(L7)
  L6 = L6 or L6
  L7 = " Authentication failed"
  L6 = L6 .. L7
  L7 = A1
  L8 = L3
  L9 = A2
  L4(L5, L6, L7, L8, L9)
  L4 = false
  return L4
end
checkUser = L13
function L13(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16
  L2 = require
  L3 = "luci.util"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.sys"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQCryptoUtil"
  L4 = L4(L5)
  if A0 and A1 then
    L5 = _UPVALUE0_
    L5 = L5.macFormat
    L6 = A1
    L5 = L5(L6)
    A1 = L5
    L5 = L2.split
    L6 = A0
    L7 = "_"
    L5 = L5(L6, L7)
    L6 = #L5
    if L6 ~= 4 then
      L6 = _UPVALUE1_
      L6 = L6.log
      L7 = 6
      L8 = "Nonce check failed!: Illegal"
      L9 = A0
      L10 = " remote MAC address:"
      L11 = A1
      L8 = L8 .. L9 .. L10 .. L11
      L6(L7, L8)
      L6 = false
      return L6
    end
    L6 = tonumber
    L7 = L5[1]
    L6 = L6(L7)
    L7 = tostring
    L8 = L5[2]
    L7 = L7(L8)
    L8 = tonumber
    L9 = L5[3]
    L8 = L8(L9)
    if L6 and L7 then
      L9 = L4.sha1
      L10 = L6
      L11 = L7
      L10 = L10 .. L11
      L9 = L9(L10)
      if 4 < L6 then
        L10 = _UPVALUE1_
        L10 = L10.log
        L11 = 6
        L12 = "Nonce check failed! Type error:"
        L13 = A0
        L14 = " remote MAC address:"
        L15 = A1
        L12 = L12 .. L13 .. L14 .. L15
        L10(L11, L12)
        L10 = false
        return L10
      end
      L10 = readNonce
      L11 = L9
      L10 = L10(L11)
      if L10 then
        L11 = type
        L12 = L10
        L11 = L11(L12)
        if L11 == "table" then
          L11 = tonumber
          L12 = L10.mark
          L11 = L11(L12)
          if L8 > L11 then
            L11 = L10.mac
            if A1 ~= L11 then
              L11 = _UPVALUE1_
              L11 = L11.log
              L12 = 6
              L13 = "Mac address changed: "
              L14 = L10.mac
              L15 = " --> "
              L16 = A1
              L13 = L13 .. L14 .. L15 .. L16
              L14 = L10
              L15 = A0
              L11(L12, L13, L14, L15)
            end
            L11 = tostring
            L12 = L8
            L11 = L11(L12)
            L10.mark = L11
            L11 = writeNonce
            L12 = L9
            L13 = L10
            L11(L12, L13)
            L11 = true
            return L11
          else
            L11 = _UPVALUE1_
            L11 = L11.log
            L12 = 6
            L13 = "Nonce check failed!: Not match"
            L14 = A0
            L15 = " remote MAC address:"
            L16 = A1
            L13 = L13 .. L14 .. L15 .. L16
            L14 = L10
            L11(L12, L13, L14)
          end
      end
      else
        L11 = {}
        L10 = L11
        L11 = tostring
        L12 = L8
        L11 = L11(L12)
        L10.mark = L11
        L10.mac = A1
        L11 = writeNonce
        L12 = L9
        L13 = L10
        L11(L12, L13)
        L11 = true
        return L11
      end
    end
  end
  L5 = false
  return L5
end
checkNonce = L13
L13 = "xiaoqiang-web"
function L14()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L0 = require
  L1 = "luci.http.protocol"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQConfigs"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQCryptoUtil"
  L2 = L2(L3)
  L3 = nil
  L4 = "http://miwifi.com/cgi-bin/luci/web/xmaccount"
  L5 = "followup="
  L6 = L4
  L5 = L5 .. L6
  L6 = L2.binaryBase64Enc
  L7 = L2.sha1Binary
  L8 = L5
  L7, L8, L9, L10, L11, L12, L13, L14 = L7(L8)
  L6 = L6(L7, L8, L9, L10, L11, L12, L13, L14)
  L7 = L1.SERVER_CONFIG
  if L7 == 0 then
    L7 = L1.PASSPORT_CONFIG_ONLINE_URL
    L8 = "?callback="
    L9 = L0.urlencode
    L10 = L1.XQ_SERVER_ONLINE_STS_URL
    L11 = "?sign="
    L12 = L6
    L13 = "&followup="
    L14 = L4
    L10 = L10 .. L11 .. L12 .. L13 .. L14
    L9 = L9(L10)
    L10 = "&sid="
    L11 = _UPVALUE0_
    L3 = L7 .. L8 .. L9 .. L10 .. L11
  else
    L7 = L1.SERVER_CONFIG
    if L7 == 1 then
      L7 = L1.PASSPORT_CONFIG_PREVIEW_URL
      L8 = "?callback="
      L9 = L0.urlencode
      L10 = L1.XQ_SERVER_STAGING_STS_URL
      L11 = "?sign="
      L12 = L6
      L13 = "&followup="
      L14 = L4
      L10 = L10 .. L11 .. L12 .. L13 .. L14
      L9 = L9(L10)
      L10 = "&sid="
      L11 = _UPVALUE0_
      L3 = L7 .. L8 .. L9 .. L10 .. L11
    end
  end
  return L3
end
passportLoginUrl = L14
function L14()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "xiaoqiang.util.XQSysUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.http.protocol"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQConfigs"
  L2 = L2(L3)
  L3 = nil
  L4 = L0.getPassportBindInfo
  L4 = L4()
  L5 = _UPVALUE0_
  L5 = L5.isStrNil
  L6 = L4
  L5 = L5(L6)
  if L5 then
    L5 = ""
    return L5
  end
  L5 = "http://miwifi.com/cgi-bin/luci/web/home"
  L6 = L2.SERVER_CONFIG
  if L6 == 0 then
    L6 = L2.PASSPORT_LOGOUT_ONLINE_URL
    L7 = "?callback="
    L8 = L1.urlencode
    L9 = L5
    L8 = L8(L9)
    L9 = "&sid="
    L10 = _UPVALUE1_
    L11 = "&userId="
    L12 = L4
    L3 = L6 .. L7 .. L8 .. L9 .. L10 .. L11 .. L12
  else
    L6 = L2.SERVER_CONFIG
    if L6 == 1 then
      L6 = L2.PASSPORT_LOGOUT_PREVIEW_URL
      L7 = "?callback="
      L8 = L1.urlencode
      L9 = L5
      L8 = L8(L9)
      L9 = "&sid="
      L10 = _UPVALUE1_
      L11 = "&userId="
      L12 = L4
      L3 = L6 .. L7 .. L8 .. L9 .. L10 .. L11 .. L12
    end
  end
  return L3
end
passportLogoutUrl = L14
function L14(A0)
  local L1, L2, L3, L4, L5
  L1 = 0
  L2 = {}
  L2.l = 0.5
  L3 = _UPVALUE0_
  L3 = L3.isStrNil
  L4 = A0
  L3 = L3(L4)
  if L3 then
    L3 = 1
    return L3
  end
  L3 = #A0
  if L3 < 6 then
    L3 = 1
    return L3
  else
    L3 = L2.l
    L4 = math
    L4 = L4.sqrt
    L5 = #A0
    L5 = L5 - 6
    L5 = L5 / 2
    L4 = L4(L5)
    L3 = L3 * L4
    if 2 < L3 then
      L3 = 1
    end
    L1 = L1 + L3
  end
  L4 = A0
  L3 = A0.match
  L5 = "%d"
  L3 = L3(L4, L5)
  if L3 then
    L1 = L1 + 1
  end
  L4 = A0
  L3 = A0.match
  L5 = "%l"
  L3 = L3(L4, L5)
  if L3 then
    L1 = L1 + 1
  end
  L4 = A0
  L3 = A0.match
  L5 = "%u"
  L3 = L3(L4, L5)
  if L3 then
    L1 = L1 + 1
  end
  L4 = A0
  L3 = A0.match
  L5 = "%W"
  L3 = L3(L4, L5)
  if L3 then
    L1 = L1 + 1
  end
  if L1 < 2 then
    L3 = 1
    return L3
  elseif L1 < 3 then
    L3 = 2
    return L3
  else
    L3 = 3
    return L3
  end
end
checkStrong = L14
L14 = {}
L15 = "'"
L16 = ";"
L17 = "nvram"
L18 = "dropbear"
L19 = "bdata"
L14[1] = L15
L14[2] = L16
L14[3] = L17
L14[4] = L18
L14[5] = L19
KEY_WORDS = L14
function L14(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10
  if L1 then
    return L1
  else
    A0 = L1
  end
  for L4, L5 in L1, L2, L3 do
    L7 = A0
    L6 = A0.match
    L8 = L5
    L6 = L6(L7, L8)
    if L6 then
      L6 = require
      L7 = "xiaoqiang.XQLog"
      L6 = L6(L7)
      L7 = L6.log
      L8 = 6
      L9 = "Keyword Warning:"
      L10 = A0
      L9 = L9 .. L10
      L7(L8, L9)
      L7 = false
      return L7
    end
  end
  return L1
end
_keyWordsFilter = L14
function L14(A0)
  local L1, L2
  L1 = _keyWordsFilter
  L2 = A0
  return L1(L2)
end
cmdSafeCheck = L14
L14 = "[`;|$&]"
L15 = {}
L15.ssid = 1
L15.pwd = 1
L15.password = 1
L15.username = 1
function L16(A0, A1)
  local L2, L3, L4
  do return A1 end
  if not A0 or not A1 then
    return A1
  end
  L2 = _UPVALUE0_
  L2 = L2[A0]
  if L2 then
    return A1
  end
  L2 = string
  L2 = L2.find
  L3 = A1
  L4 = _UPVALUE1_
  L2 = L2(L3, L4)
  if L2 then
    L2 = ""
    return L2
  end
  return A1
end
hackCheck = L16
function L16(A0)
  local L1, L2, L3
  L1 = string
  L1 = L1.find
  L2 = A0
  L3 = _UPVALUE0_
  L1 = L1(L2, L3)
  if L1 then
    L1 = ""
    return L1
  end
  return A0
end
hackCharsCheck = L16
function L16(A0)
  local L1, L2, L3, L4
  L1 = _UPVALUE0_
  L1 = L1.isStrNil
  L2 = A0
  L1 = L1(L2)
  if L1 then
    L1 = ""
    return L1
  else
    L2 = A0
    L1 = A0.gsub
    L3 = "\\"
    L4 = "\\\\"
    L1 = L1(L2, L3, L4)
    L2 = L1
    L1 = L1.gsub
    L3 = "`"
    L4 = "\\`"
    L1 = L1(L2, L3, L4)
    L2 = L1
    L1 = L1.gsub
    L3 = "\""
    L4 = "\\\""
    L1 = L1(L2, L3, L4)
    L2 = L1
    L1 = L1.gsub
    L3 = "%$"
    L4 = "\\$"
    L1 = L1(L2, L3, L4)
    L2 = L1
    L1 = L1.gsub
    L3 = "%&"
    L4 = "\\&"
    L1 = L1(L2, L3, L4)
    L2 = L1
    L1 = L1.gsub
    L3 = "%|"
    L4 = "\\|"
    L1 = L1(L2, L3, L4)
    L2 = L1
    L1 = L1.gsub
    L3 = "%;"
    L4 = "\\;"
    return L1(L2, L3, L4)
  end
end
parseCmdline = L16
