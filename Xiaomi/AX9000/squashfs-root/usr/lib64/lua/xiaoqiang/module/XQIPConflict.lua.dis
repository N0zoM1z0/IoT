local L0, L1, L2, L3, L4, L5, L6, L7
L0 = module
L1 = "xiaoqiang.module.XQIPConflict"
L2 = package
L2 = L2.seeall
L0(L1, L2)
L0 = require
L1 = "bit"
L0 = L0(L1)
L1 = require
L2 = "json"
L1 = L1(L2)
L2 = require
L3 = "luci.util"
L2 = L2(L3)
L3 = require
L4 = "xiaoqiang.common.XQFunction"
L3 = L3(L4)
L4 = require
L5 = "xiaoqiang.util.XQLanWanUtil"
L4 = L4(L5)
L5 = require
L6 = "luci.model.uci"
L5 = L5(L6)
L5 = L5.cursor
L5 = L5()
L6 = require
L7 = "luci.util"
L6 = L6(L7)
function L7(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  if A0 then
    L2, L3, L4, L5, L6, L7 = nil, nil, nil, nil, nil, nil
    L8 = _UPVALUE0_
    L9 = L8
    L8 = L8.get
    L10 = "network"
    L11 = "lan"
    L12 = "netmask"
    L8 = L8(L9, L10, L11, L12)
    L9 = string
    L9 = L9.find
    L10 = L8
    L11 = "255.255.255.0"
    L9 = L9(L10, L11)
    if 1 == L9 then
      L5 = ".%d+.%d+$"
      L6 = ".(%d+).%d+$"
      L7 = ".1"
    else
      L5 = ".%d+.%d+.%d+$"
      L6 = ".(%d+).(%d+).%d+$"
      L7 = ".0.1"
    end
    L10 = A0
    L9 = A0.gsub
    L11 = L5
    L12 = ""
    L9 = L9(L10, L11, L12)
    L2 = L9
    L9 = tonumber
    L11 = A0
    L10 = A0.match
    L12 = L6
    L10 = L10(L11, L12)
    L11 = 10
    L9 = L9(L10, L11)
    L3 = L9
    L9 = L2
    L10 = "."
    L11 = tostring
    L12 = _UPVALUE1_
    L12 = L12.bxor
    L13 = L3
    L14 = A1
    L12, L13, L14 = L12(L13, L14)
    L11 = L11(L12, L13, L14)
    L12 = L7
    L4 = L9 .. L10 .. L11 .. L12
    return L4
  end
  L2 = ""
  return L2
end
_gen_new_ip_with_bit = L7
function L7()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.model.uci"
  L1 = L1(L2)
  L1 = L1.cursor
  L1 = L1()
  L3 = L1
  L2 = L1.get
  L4 = "network"
  L5 = "wan"
  L6 = "proto"
  L2 = L2(L3, L4, L5, L6)
  L4 = L1
  L3 = L1.get
  L5 = "network"
  L6 = "lan"
  L7 = "ipaddr"
  L3 = L3(L4, L5, L6, L7)
  L5 = L1
  L4 = L1.get
  L6 = "network"
  L7 = "lan"
  L8 = "netmask"
  L4 = L4(L5, L6, L7, L8)
  L6 = L1
  L5 = L1.get
  L7 = "network"
  L8 = "miot"
  L9 = "ipaddr"
  L5 = L5(L6, L7, L8, L9)
  L6 = _UPVALUE0_
  L6 = L6.getNetModeType
  L6 = L6()
  L7, L8, L9, L10 = nil, nil, nil, nil
  if L6 ~= 0 then
    L11 = false
    return L11
  end
  L11 = string
  L11 = L11.find
  L12 = L4
  L13 = "255.255.255.0"
  L11 = L11(L12, L13)
  if 1 == L11 then
    L7 = ".%d+$"
  else
    L7 = ".%d+.%d+$"
  end
  L11 = L0.ubusDualWanStatus
  L11 = L11()
  if L11 then
    L12 = L11.wan
    L12 = L12.ipv4
    if L12 then
      L12 = L11.wan
      L12 = L12.ipv4
      L8 = L12.address
    end
  end
  if L11 then
    L12 = L11.wan2
    L12 = L12.ipv4
    if L12 then
      L12 = L11.wan2
      L12 = L12.ipv4
      L9 = L12.address
    end
  end
  L13 = L8
  L12 = L8.gsub
  L14 = L7
  L15 = ""
  L12 = L12(L13, L14, L15)
  L14 = L3
  L13 = L3.gsub
  L15 = L7
  L16 = ""
  L13 = L13(L14, L15, L16)
  if L12 == L13 then
    L12 = _gen_new_ip_with_bit
    L13 = L8
    L14 = 3
    L12 = L12(L13, L14)
    L10 = L12
    L13 = L9
    L12 = L9.gsub
    L14 = L7
    L15 = ""
    L12 = L12(L13, L14, L15)
    L14 = L10
    L13 = L10.gsub
    L15 = L7
    L16 = ""
    L13 = L13(L14, L15, L16)
    if L12 == L13 then
      L12 = _gen_new_ip_with_bit
      L13 = L8
      L14 = 7
      L12 = L12(L13, L14)
      L10 = L12
    end
    return L10
  end
  L13 = L9
  L12 = L9.gsub
  L14 = L7
  L15 = ""
  L12 = L12(L13, L14, L15)
  L14 = L3
  L13 = L3.gsub
  L15 = L7
  L16 = ""
  L13 = L13(L14, L15, L16)
  if L12 == L13 then
    L12 = _gen_new_ip_with_bit
    L13 = L9
    L14 = 3
    L12 = L12(L13, L14)
    L10 = L12
    L13 = L8
    L12 = L8.gsub
    L14 = L7
    L15 = ""
    L12 = L12(L13, L14, L15)
    L14 = L10
    L13 = L10.gsub
    L15 = L7
    L16 = ""
    L13 = L13(L14, L15, L16)
    if L12 == L13 then
      L12 = _gen_new_ip_with_bit
      L13 = L9
      L14 = 7
      L12 = L12(L13, L14)
      L10 = L12
    end
    return L10
  end
  L13 = L8
  L12 = L8.gsub
  L14 = L7
  L15 = ""
  L12 = L12(L13, L14, L15)
  L14 = L5
  L13 = L5.gsub
  L15 = L7
  L16 = ""
  L13 = L13(L14, L15, L16)
  if L12 == L13 then
    L12 = _gen_new_ip_with_bit
    L13 = L8
    L14 = 3
    L12 = L12(L13, L14)
    L5 = L12
    L13 = L5
    L12 = L5.gsub
    L14 = L7
    L15 = ""
    L12 = L12(L13, L14, L15)
    L14 = L3
    L13 = L3.gsub
    L15 = L7
    L16 = ""
    L13 = L13(L14, L15, L16)
    if L12 == L13 then
      L12 = _gen_new_ip_with_bit
      L13 = L8
      L14 = 7
      L12 = L12(L13, L14)
      L5 = L12
      L13 = L9
      L12 = L9.gsub
      L14 = L7
      L15 = ""
      L12 = L12(L13, L14, L15)
      L14 = L5
      L13 = L5.gsub
      L15 = L7
      L16 = ""
      L13 = L13(L14, L15, L16)
      if L12 == L13 then
        L12 = _gen_new_ip_with_bit
        L13 = L9
        L14 = 5
        L12 = L12(L13, L14)
        L5 = L12
      end
    end
    L13 = L1
    L12 = L1.set
    L14 = "network"
    L15 = "miot"
    L16 = "ipaddr"
    L17 = L5
    L12(L13, L14, L15, L16, L17)
    L13 = L1
    L12 = L1.commit
    L14 = "network"
    L12(L13, L14)
    L12 = require
    L13 = "luci.util"
    L12 = L12(L13)
    L13 = L12.exec
    L14 = "/etc/init.d/network reload"
    L13(L14)
  end
  L12 = false
  return L12
end
ip_conflict_detection = L7
function L7(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQLanWanUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.model.uci"
  L3 = L3(L4)
  L3 = L3.cursor
  L3 = L3()
  L5 = L3
  L4 = L3.get
  L6 = "network"
  L7 = "lan"
  L8 = "ipaddr"
  L4 = L4(L5, L6, L7, L8)
  L6 = L3
  L5 = L3.get
  L7 = "network"
  L8 = "lan"
  L9 = "netmask"
  L5 = L5(L6, L7, L8, L9)
  L7 = L3
  L6 = L3.get
  L8 = "network"
  L9 = "miot"
  L10 = "ipaddr"
  L6 = L6(L7, L8, L9, L10)
  L7 = L2.ubusDualWanStatus
  L7 = L7()
  L8, L9, L10, L11, L12, L13, L14 = nil, nil, nil, nil, nil, nil, nil
  L15 = string
  L15 = L15.find
  L16 = L5
  L17 = "255.255.255.0"
  L15 = L15(L16, L17)
  if 1 == L15 then
    L8 = ".%d+$"
    L13 = ".10"
    L14 = ".209"
  else
    L8 = ".%d+.%d+$"
    L13 = ".0.10"
    L14 = ".0.209"
    L16 = L3
    L15 = L3.get
    L17 = "dhcp"
    L18 = "lan"
    L19 = "startip"
    L15 = L15(L16, L17, L18, L19)
    L9 = L15
    L16 = L3
    L15 = L3.get
    L17 = "dhcp"
    L18 = "lan"
    L19 = "endip"
    L15 = L15(L16, L17, L18, L19)
    L10 = L15
    L16 = L3
    L15 = L3.get
    L17 = "dhcp"
    L18 = "miot"
    L19 = "startip"
    L15 = L15(L16, L17, L18, L19)
    L11 = L15
    L16 = L3
    L15 = L3.get
    L17 = "dhcp"
    L18 = "miot"
    L19 = "endip"
    L15 = L15(L16, L17, L18, L19)
    L12 = L15
    if nil == L9 or nil == L10 then
      L16 = A0
      L15 = A0.gsub
      L17 = L8
      L18 = ""
      L15 = L15(L16, L17, L18)
      L16 = ".0.5"
      L9 = L15 .. L16
      L16 = A0
      L15 = A0.gsub
      L17 = L8
      L18 = ""
      L15 = L15(L16, L17, L18)
      L16 = ".3.237"
      L10 = L15 .. L16
    else
      L16 = A0
      L15 = A0.gsub
      L17 = L8
      L18 = ""
      L15 = L15(L16, L17, L18)
      L17 = L9
      L16 = L9.match
      L18 = L8
      L16 = L16(L17, L18)
      L9 = L15 .. L16
      L16 = A0
      L15 = A0.gsub
      L17 = L8
      L18 = ""
      L15 = L15(L16, L17, L18)
      L17 = L10
      L16 = L10.match
      L18 = L8
      L16 = L16(L17, L18)
      L10 = L15 .. L16
    end
    L16 = L3
    L15 = L3.set
    L17 = "dhcp"
    L18 = "lan"
    L19 = "startip"
    L20 = L9
    L15(L16, L17, L18, L19, L20)
    L16 = L3
    L15 = L3.set
    L17 = "dhcp"
    L18 = "lan"
    L19 = "endip"
    L20 = L10
    L15(L16, L17, L18, L19, L20)
  end
  L15 = L1.isStrNil
  L16 = A0
  L15 = L15(L16)
  if not L15 then
    L15 = L1.isStrNil
    L16 = L6
    L15 = L15(L16)
    if not L15 then
      L16 = A0
      L15 = A0.gsub
      L17 = L8
      L18 = ""
      L15 = L15(L16, L17, L18)
      L17 = L6
      L16 = L6.gsub
      L18 = L8
      L19 = ""
      L16 = L16(L17, L18, L19)
      if L15 == L16 then
        L15 = _gen_new_ip_with_bit
        L16 = A0
        L17 = 3
        L15 = L15(L16, L17)
        L6 = L15
        if L7 then
          L15 = L7.wan
          L15 = L15.ipv4
          if L15 then
            L15 = L7.wan
            L15 = L15.ipv4
            L15 = L15.address
            L17 = L6
            L16 = L6.gsub
            L18 = L8
            L19 = ""
            L16 = L16(L17, L18, L19)
            L18 = L15
            L17 = L15.gsub
            L19 = L8
            L20 = ""
            L17 = L17(L18, L19, L20)
            if L16 == L17 then
              L16 = _gen_new_ip_with_bit
              L17 = A0
              L18 = 7
              L16 = L16(L17, L18)
              L6 = L16
              if L7 then
                L16 = L7.wan2
                L16 = L16.ipv4
                if L16 then
                  L16 = L7.wan2
                  L16 = L16.ipv4
                  L16 = L16.address
                  L18 = L6
                  L17 = L6.gsub
                  L19 = L8
                  L20 = ""
                  L17 = L17(L18, L19, L20)
                  L19 = L16
                  L18 = L16.gsub
                  L20 = L8
                  L21 = ""
                  L18 = L18(L19, L20, L21)
                  if L17 == L18 then
                    L17 = _gen_new_ip_with_bit
                    L18 = A0
                    L19 = 5
                    L17 = L17(L18, L19)
                    L6 = L17
                  end
                end
              end
            end
            L17 = L3
            L16 = L3.set
            L18 = "network"
            L19 = "miot"
            L20 = "ipaddr"
            L21 = L6
            L16(L17, L18, L19, L20, L21)
            L17 = L3
            L16 = L3.commit
            L18 = "network"
            L16(L17, L18)
          end
        end
        if nil == L11 or nil == L12 then
          L16 = L6
          L15 = L6.gsub
          L17 = L8
          L18 = ""
          L15 = L15(L16, L17, L18)
          L16 = L13
          L11 = L15 .. L16
          L16 = L6
          L15 = L6.gsub
          L17 = L8
          L18 = ""
          L15 = L15(L16, L17, L18)
          L16 = L14
          L12 = L15 .. L16
        else
          L16 = L6
          L15 = L6.gsub
          L17 = L8
          L18 = ""
          L15 = L15(L16, L17, L18)
          L17 = L11
          L16 = L11.match
          L18 = L8
          L16 = L16(L17, L18)
          L11 = L15 .. L16
          L16 = L6
          L15 = L6.gsub
          L17 = L8
          L18 = ""
          L15 = L15(L16, L17, L18)
          L17 = L12
          L16 = L12.match
          L18 = L8
          L16 = L16(L17, L18)
          L12 = L15 .. L16
        end
        L16 = L3
        L15 = L3.set
        L17 = "dhcp"
        L18 = "miot"
        L19 = "startip"
        L20 = L11
        L15(L16, L17, L18, L19, L20)
        L16 = L3
        L15 = L3.set
        L17 = "dhcp"
        L18 = "miot"
        L19 = "endip"
        L20 = L12
        L15(L16, L17, L18, L19, L20)
        L16 = L3
        L15 = L3.commit
        L17 = "dhcp"
        L15(L16, L17)
      end
    end
  end
end
miotip_conflict_resolution = L7
function L7()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16
  L0 = require
  L1 = "xiaoqiang.module.XQMessageBox"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.model.uci"
  L1 = L1(L2)
  L1 = L1.cursor
  L1 = L1()
  L2 = require
  L3 = "xiaoqiang.XQEvent"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQLanWanUtil"
  L3 = L3(L4)
  L5 = L1
  L4 = L1.get
  L6 = "network"
  L7 = "lan"
  L8 = "ipaddr"
  L4 = L4(L5, L6, L7, L8)
  L6 = L1
  L5 = L1.get
  L7 = "network"
  L8 = "lan"
  L9 = "netmask"
  L5 = L5(L6, L7, L8, L9)
  L6 = L3.ubusDualWanStatus
  L6 = L6()
  L7, L8, L9, L10 = nil, nil, nil, nil
  L11 = string
  L11 = L11.find
  L12 = L5
  L13 = "255.255.255.0"
  L11 = L11(L12, L13)
  if 1 == L11 then
    L7 = ".%d+$"
  else
    L7 = ".%d+.%d+$"
  end
  if L6 then
    L11 = L6.wan
    L11 = L11.ipv4
    if L11 then
      L11 = L6.wan
      L11 = L11.ipv4
      L8 = L11.address
    end
  end
  if L6 then
    L11 = L6.wan2
    L11 = L11.ipv4
    if L11 then
      L11 = L6.wan2
      L11 = L11.ipv4
      L9 = L11.address
    end
  end
  L12 = L8
  L11 = L8.gsub
  L13 = L7
  L14 = ""
  L11 = L11(L12, L13, L14)
  L13 = L4
  L12 = L4.gsub
  L14 = L7
  L15 = ""
  L12 = L12(L13, L14, L15)
  if L11 == L12 then
    L11 = _gen_new_ip_with_bit
    L12 = L8
    L13 = 3
    L11 = L11(L12, L13)
    L10 = L11
    L12 = L9
    L11 = L9.gsub
    L13 = L7
    L14 = ""
    L11 = L11(L12, L13, L14)
    L13 = L10
    L12 = L10.gsub
    L14 = L7
    L15 = ""
    L12 = L12(L13, L14, L15)
    if L11 == L12 then
      L11 = _gen_new_ip_with_bit
      L12 = L8
      L13 = 7
      L11 = L11(L12, L13)
      L10 = L11
    end
  end
  L12 = L9
  L11 = L9.gsub
  L13 = L7
  L14 = ""
  L11 = L11(L12, L13, L14)
  L13 = L4
  L12 = L4.gsub
  L14 = L7
  L15 = ""
  L12 = L12(L13, L14, L15)
  if L11 == L12 then
    L11 = _gen_new_ip_with_bit
    L12 = L9
    L13 = 3
    L11 = L11(L12, L13)
    L10 = L11
    L12 = L8
    L11 = L8.gsub
    L13 = L7
    L14 = ""
    L11 = L11(L12, L13, L14)
    L13 = L10
    L12 = L10.gsub
    L14 = L7
    L15 = ""
    L12 = L12(L13, L14, L15)
    if L11 == L12 then
      L11 = _gen_new_ip_with_bit
      L12 = L9
      L13 = 7
      L11 = L11(L12, L13)
      L10 = L11
    end
  end
  L12 = L1
  L11 = L1.set
  L13 = "network"
  L14 = "lan"
  L15 = "ipaddr"
  L16 = L10
  L11(L12, L13, L14, L15, L16)
  L12 = L1
  L11 = L1.commit
  L13 = "network"
  L11(L12, L13)
  L11 = L3.setLanDHCPConfig
  L12 = L10
  L11(L12)
  L11 = L2.lanIPChange
  L12 = L10
  L11(L12)
end
ip_conflict_resolution = L7
function L7(A0)
  local L1, L2, L3, L4, L5
  L1 = _UPVALUE0_
  L2 = L1
  L1 = L1.get
  L3 = "dualwan"
  L4 = "common"
  L5 = "enable"
  L1 = L1(L2, L3, L4, L5)
  L2 = [[
        sleep 4;
        /etc/init.d/network restart 2>/dev/null;
        /etc/init.d/dnsmasq stop 2>/dev/null;
        /etc/init.d/dnsmasq restart 2>/dev/null;
        /usr/sbin/dhcp_apclient.sh restart lan 2>/dev/null;
        /etc/init.d/trafficd restart 2>/dev/null;
        /etc/init.d/minet restart 2>/dev/null;
        /usr/sbin/shareUpdate -b 2>/dev/null
    ]]
  if L1 == "1" then
    L3 = _UPVALUE1_
    L3 = L3.exec
    L4 = "/usr/sbin/dualwan.firewall clean_set"
    L3(L4)
  end
  if A0 then
    L3 = _UPVALUE2_
    L3 = L3.forkExec
    L4 = L2
    L3(L4)
  else
    L3 = os
    L3 = L3.execute
    L4 = L2
    L3(L4)
  end
end
restart_services = L7
