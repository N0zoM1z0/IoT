<%
local xqlanwanutil = require "xiaoqiang.util.XQLanWanUtil"
local mode = xqlanwanutil.getWanLanMode()
local mac2default = string.upper(xqlanwanutil.getDefaultWan2MacAddress())
local mac1default = string.upper(xqlanwanutil.getDefaultWanMacAddress())
%>
<script>
$(function() {
    // disalog
    var wanSpeedRatioDialog = undefined
    var listaddDialog = undefined
    var selfaddDialog = undefined
    var isDualWanOn = false
    var loadingDialog = false
    var isQosOn = false
    var isDdnsOn = false
    // 
    var askcount = 0
    var routerPolicyList = []
    var cachePPPoE = {}
    var pppoeInfo = {}
    var wanInfo = {}
    var wan1Mac = ''
    var WAN_TYPE_MAP = {
        0: 'pppoe',
        1: 'dhcp',
        2: 'static'
    }
    var DUAL_WAN_SETTING_SECTION = [
        'wan-info',
        'mac-address-clone',
        'wan-speed-ratio',
        'policy-routing'
    ]
    var MAX_ROUTER_POLICY_LIST_NUM = 1000


    // dualWanSection style
    var dualWanDisplay = (function (status) {
        return {
            show: function(){
                $(".dual-wan-body").attr('style', "display:block;")
            },
            hide: function() {
                $(".dual-wan-body").attr('style', "display:none;")
            }
        }
    })()

    var wan2Switch = (function (status) {
        return {
            on: function(){
                $('#wan2Switch').attr('class', 'btn-switch btn-switch-on')
            },
            off: function() {
                $('#wan2Switch').attr('class', 'btn-switch btn-switch-off')
            }
        }
    })()

    // sub event
    $.sub('dualWanHelp:show', function(evt, data) {
        $('#helpArrow').show();
        $('#helpSection').show();
    });
    $.sub('dualWanHelp:hide', function(evt, data) {
        $('#helpArrow').hide();
        $('#helpSection').hide();
    });

    $('#wan2Set').delegate('input[type=text], input[type=radio], input[type=checkbox]', 'click', onControlFocus)
                .delegate('.ipt-text', 'click', onControlFocus);
    $('#wan2Set').delegate('select','change', function(){
        $('#wan2Set').find('.btn-primary, .btn-dft').removeClass('hidden');
    });


    // 获取设备列表 
    $.sub('getDevices', function() {
        $.ajax({
            url: '<%=luci.dispatcher.build_url("api", "xqnetwork","get_policy_routing_toadd")%>',
            type: "GET",
            dataType: 'json',
            success: function(res) {
                if(res.code === 0){
                    var list = res.info
                    if ($.isArray(list) && list.length > 0) {
                        var tableList = list.reduce(function(arr, item) {
                            return arr.concat(StringH.tmpl($('#tmplOnlineDevice').html(), {
                                oname: StringH.encode4Html(item.oname),
                                mac: item.mac,
                                ip: item.ip,
                                val: encodeURIComponent(JSON.stringify({
                                    oname: StringH.encode4Html(item.oname),
                                    mac: item.mac,
                                    ip: item.ip,
                                }))
                            }))
                        }, [])
                        $('#dialogdeviceslist').html(tableList.join(''));
                        
                        // 提交设备列表添加
                        $('#devicesAdd').on('submit', function(e) {
                            e.preventDefault();
                            const checkList = $('.devicesInputCheck:checked')

                            if(!checkList.length) {
                                $.alert('<%:请至少选择一个设备%>')
                                return
                            }
                            if((checkList.length + routerPolicyList.length) <= MAX_ROUTER_POLICY_LIST_NUM) {
                                var macArr = []
                                checkList.each(function(index, item){
                                    macArr.push((JSON.parse(decodeURIComponent(item.value))['mac']))
                                })
                                addRouterPolicy({
                                    mac: macArr.join(',')
                                },false)
                                listaddDialog.close()
                            } else {
                                $.alert('<%:错误：策略数量最大值为1000%>')
                            }
                        })
                    } else {
                        $('#dialogdeviceslist').html('<tr><td colspan="4"><%:没有未添加的设备连接进来%></td></tr>');
                    }
                } else {
                    $('#dialogdeviceslist').html('<tr><td colspan="4"><%:没有未添加的设备连接进来%></td></tr>');
                }
            },
            error: function() {
                $.alert( '<%:网络异常，请检查是否联网%>' );
            }
        })
    })

    $.sub('wan2Switch', function( evt, data ){
        var root = $('#wan2Set'),
            status = $('#wanStatus'),
            tab = root.find( '#wantypeselect' ),
            tabCon = root.find( '.tab-con-item' ),
            index = data['index'];
            tab.val(index);
            tabCon.removeClass( 'active' ).eq( index ).addClass( 'active' );
        if (index === '0') {
            var $inputpppoeName = $( 'input[name="pppoeName"]' ),
                $pppoePwd = $( 'input[name="pppoePwd"]' );
            if ( cachePPPoE['pppoeName'] && cachePPPoE['pppoeName'] !== '' ) {
                $inputpppoeName.val( cachePPPoE['pppoeName'] );
                $pppoePwd.val( cachePPPoE['pppoePassword'] );
                $.formInit('#pppoe');
            }
        }
    });

    $(document.body ).delegate( '#wantypeselect', 'change', function( e ){
        e.preventDefault();

        var tar = this,
            $tar = $(tar),
            switchto = $tar.val();
        // clearTimeout( timer );
        setTimeout(function(){
            $.pub( 'wan2Switch', [{index: switchto}] );
        }, 200);
    });

    //问题排查
    $('#wanStatus').delegate('#showpppoeissue', 'click', function(e){
        e.preventDefault();
        var perror = $(this).attr('data-perror');
        var html = '';
        var tpl = $('#tmplPPPoEissue').html();
        html = StringH.tmpl( tpl, {
            perror: perror
        } );
        $.dialog({
            title: '<%:问题排查%>',
            content: html,
            lock: true,
            width: 870
        });
    });


    $.sub('pppoeStatus', function(evt, data){
        var timer = null

        time = data ? data.time : 0;
        clearTimeout(timer);
        function ask(){
            $.ajax({
                url: '<%=luci.dispatcher.build_url("api", "xqnetwork","pppoe_status")%>',
                type: "POST",
                dataType: "json",
                data: data.params,
                success : function(rsp){
                    var msg,
                        ip = '-.-.-.-',
                        mask =  '-.-.-.-',
                        gateway =  '-.-.-.-',
                        dns = [],
                        action = '';

                    pppoeInfo = rsp
                    if(rsp.proto == 'pppoe'){
                        switch(rsp.status){
                            case 1 :
                                msg = '<%:正在拨号...%>';
                                timer = setTimeout(ask, 2000);
                                break;
                            case 2 :
                                msg = '<%:拨号成功%>';
                                ip = rsp.ip['address'];
                                mask = rsp.ip['mask'];
                                gateway = rsp.gw;
                                dns = rsp.dns;
                                action = '<a id="pppoeStop" href="#"><%:断开%></a>';
                                break;
                            case 3 :
                                msg = rsp.msg || '<%:拨号失败%>';
                                msg = msg + '<%:，正在尝试特殊拨号模式...%>';
                                timer = setTimeout(ask, 2000);
                                break;
                            case 4 :
                                msg = '<%:已断开%>';
                                action = '<a id="pppoeStart" href="#"><%:立即连接%></a>';
                                // 断开后重新连接查询3次，防止拿不到底层新数据
                                if ( askcount < 4 ) {
                                    timer = setTimeout(ask, 2000);
                                }
                                askcount ++;
                                break;								
                            default:
                                break;
                        }
                        var showissue;
                        var perror;
                        if( rsp.perror ){
                            switch( rsp.perror ){
                                case 33:
                                    showissue = true;
                                    break;
                                case 34:
                                    showissue = true;
                                    break;
                                case 35:
                                    showissue = true;
                                    break;
                                case 36:
                                    showissue = true;
                                    break;
                                default:
                                    break;
                            }
                            perror = rsp.perror;
                        }
                        var statusHTML = StringH.tmpl( $('#tmplPPPoE').html(), {
                            status: msg,
                            ip: ip,
                            mask: mask,
                            gateway: gateway,
                            dns: dns,
                            username: rsp.pppoename,
                            action: action,
                            showissue: showissue,
                            perror: perror
                        });

                        $( '#wanStatus' ).html( statusHTML );
                    } else {
                        if ( rsp.proto == 'dhcp') {
                            ip = rsp.ip['address'];
                            mask = rsp.ip['mask'];
                            gateway = rsp.gw;
                            dns = rsp.dns;
                            if ( ip == '' ) {
                                timer = setTimeout(ask, 2000);
                            } else {
                                clearTimeout( timer );
                            }
                            var statusHTML = StringH.tmpl( $('#tmplDHCP').html(), {
                                ip: ip,
                                mask: mask,
                                gateway: gateway,
                                dns: dns
                            });
                            $( '#wanStatus' ).html( statusHTML );
                        } else {
                            ip = rsp.ip['address'];
                            mask = rsp.ip['mask'];
                            gateway = rsp.gw;
                            dns = rsp.dns;
                            var statusHTML = StringH.tmpl( $('#tmplStaticIP').html(), {
                                ip: ip,
                                mask: mask,
                                gateway: gateway,
                                dns: dns
                            });
                            $( '#wanStatus' ).html( statusHTML );
                        }
                    }
                }
            });
        }
        setTimeout(ask, time);
    });

    // 设置wan2信息
    $.sub('setWan2Info', function(evt, payload, reslove, reject){
        var wrapName = '#' + WAN_TYPE_MAP[String($('#wantypeselect').val())]
        var autoset = Number($(wrapName).find('.set-wan-more:checked').val())
        var dns1Name = wrapName + ' input[name="dns1"]'
        var dns2Name = wrapName + ' input[name="dns2"]'
        var params = {
            enable: $('#wan2Switch').hasClass('btn-switch-on')?1:0,
            wanType: WAN_TYPE_MAP[String($('#wantypeselect').val())],
            wanMode: '<%=mode%>'==='2.5G'?'1G':'2.5G',
            staticIp: $('input[name=special]').val() || '',
            staticMask: $('input[name=staticMask]').val() || '',
            staticGateway: $('input[name=staticGateway]').val() || '',
            autoset: autoset,
            special: autoset ? ($('input[name=special]').prop('checked')?1:0) : undefined,
            pppoeName: $('input[name="pppoeName"]').val(),
            pppoePwd: $('input[name="pppoePwd"]').val(),
            dns1: autoset ? $(dns1Name).val():undefined,
            dns2: autoset ? $(dns2Name).val():undefined,
        }

        return $.ajax({
            url: '<%=luci.dispatcher.build_url("api", "xqnetwork","set_wan2")%>',
            type: "POST",
            dataType: 'json',
            data: $.extend({}, params, payload),
            success: function(res) {
                if( res.code === 0 ){  
                    reslove && reslove(res)
                    $.pub('setWan2Info:success', [res])
                } else {  
                    reject && reject(res)
                    $.pub('setWan2Info:error', [res])                            
                }
            },
            error: function(err) {
                reject && reject(err)
                $.pub('setWan2Info:error', [err])
            }
        })
    });

    // 获取wan1info
    $.sub( 'getWan1Info', function(){
        var requestURL = '<%=luci.dispatcher.build_url("api", "xqnetwork","wan_info")%>',
            requestData = {};
        $.getJSON( requestURL, requestData, function( rsp ) {
            if( rsp.code === 0 ){
                var mac = rsp.info.mac;
                if ( mac && mac != "" ){
                    wan1Mac =  mac.toUpperCase() 
                }
                if( rsp.status === 0 ){
                    return;
                }
            } else {
                $.alert("WAN1 MAC地址获取错误")
            }
        });
  
    } );


    // 获取wan2info
    $.sub('getWan2Info', function(){
        var requestURL = '<%=luci.dispatcher.build_url("api", "xqnetwork","wan2_info")%>',
            requestData = {};
        $.getJSON( requestURL, requestData, function( rsp ) {
            $('.dual-wan-wrapper').show()
            if( rsp.code === 0 && rsp.info ){
                var mac = rsp.info.mac
                if ( mac && mac != "" ){
                    $('#currMac').text(mac.toUpperCase());              
                }
                if( rsp.status === 0 ){
                    return;
                }
                wanInfo = rsp.info
                isDualWanOn = true
                dualWanDisplay.show()
                wan2Switch.on()
                $.pub('pppoeStatus', [{time : 500, params: { wan_name: 'wan2' }}]);
                $.pub('setWanSpeedRatio', [rsp.info])
                $.pub( 'fillwanform', [rsp] );
                $.pub('dual-wan-setting:show')
                //ipv6 渲染
                ipv6isOn = rsp.info.ipv6_info.wanType !=="off";
                
                if((rsp.info && rsp.info.ipv6_show == 1) || !("ipv6_show" in rsp.info)){
                    $.pub( 'fillipv6form', [rsp] );
                }else{
                    $('#wanStatus_ipv6').hide(); 
                    $('#ipv6_set').hide();
                }
                $.pub( 'fillwanstatus', [rsp] );
                $.pub('getRouterPolicyList')
            } else {
                isDualWanOn = false
                dualWanDisplay.hide()
                wan2Switch.off()
                $.pub('dual-wan-setting:hide')
                $.pub( 'fillwanform', [{
                    info: {
                        details: {
                            wanType: 'dhcp'
                        }
                    }
                }] );
                $('#wan2Set').find('.btn-primary, .btn-dft').removeClass('hidden');
                $( '#currMac' ).text( '<%:获取失败%>,' + rsp.msg );
            }   
        });
    });

    $.sub('getWanType', function(){
        $.ajax({
            url: '<%=luci.dispatcher.build_url("api", "xqnetwork", "check_wan_type")%>',
            type: 'GET',
            dataType: 'json',
            success: function( rsp ){
                if ( rsp.code === 0 ) {
                    if ( rsp.wanType == 1 ) {
                        $('#wanType').html('<%:经过检测，建议使用PPPoE方式(需要输入帐号与密码)%>');
                    } else if ( rsp.wanType == 2 ) {
                        $('#wanType').html('<%:经过检测，建议使用DHCP方式(系统自动分配IP地址)%>');
                    } else if ( rsp.wanType == 3 ) {
                        $('#wanType').html('<%:经过检测，建议使用静态IP方式%>');
                    } else if ( rsp.wanType == 99 ) {
                        $('#wanType').html('<%:经过检测，你的WAN口无法连通，可能网线没插好%>');
                    } else {
                        $('#wanType').html('<%:经过检测，无法识别你的上网类型，请手工选择上网方式%>');
                    }
                    cachePPPoE['pppoeName'] = rsp.pppoeName;
                    cachePPPoE['pppoePassword'] = rsp.pppoePassword;
                }
            }
        });
    });

    // 设置wan1/wan2比例
    $.sub('setWanWeight', function(evt, params, reslove, reject) {
        return $.ajax({
            url: '<%=luci.dispatcher.build_url("api", "xqnetwork","set_weight")%>',
            type: "GET",
            dataType: 'json',
            data: params,
            success: function(res) {
                if(res.code === 0) {
                    reslove && reslove()
                } else {
                    reject && reject()
                }
            },
            error: function() {
                reject && reject()
            }
        })
    });
    
    // 获取路由策略列表
    $.sub('getRouterPolicyList', function(){
        $.ajax({
            url: '<%=luci.dispatcher.build_url("api", "xqnetwork","get_policy_routing_added")%>',
            type: "GET",
            dataType: 'json',
            success: function(res) {
                if(res.code === 0 && res.info && !$.isEmptyObject(res.info)) {
                    routerPolicyList = Object.keys(res.info).reduce(function(arr, key) {
                        var list = res.info[key]

                        if($.isArray(list) && list.length){
                            list.forEach(function(item, index) {
                                list[index] = $.extend({}, item, {
                                    manual: (key === 'manual')? '1' : '0',
                                })
                            })
                        }
                        return arr.concat(res.info[key])
                    }, [])
                    if ($.isArray(routerPolicyList) && routerPolicyList.length) {
                        var tableList = routerPolicyList.reduce(function(arr, item) {
                            return arr.concat(StringH.tmpl($('#tmplRouterPolicyTable').html(), $.extend({}, item, {
                                value: JSON.stringify(item)
                            }
                        }, [])

                        $('#policyList').html(tableList.join(''))

                        // 注册删除按钮事件
                        $('#policyList div[name="routerPolicyDeleteBtn"]').each(function(index, item) {
                            $(item).on('click', function(e) {
                                delRouterPolicy(routerPolicyList[index])
                            })
                        })
                        // 
                        $('#policyList select[name="wan"]').each(function(index, item) {
                            var row = routerPolicyList[index]
                            $(item).val(row.wan)
                            $(item).on('change', function(e) {
                                $.pub('setRouterPolicy', $.extend({}, row, {
                                    opt: 0, // 修改时opt为1
                                    wan: String($(item).val())
                                }))
                            })
                        })
                        // 美化select
                        $.selectBeautify()
                    } else {
                        $('#policyList').html('<%: 还没有策略加入 %>')
                    }
                } else {
                    $.alert(res.msg)
                    $('#policyList').html('<%: 网络异常，获取列表失败 %>')
                }
            },
            error: function(err) {
                $.alert(err.msg)
                $('#tmplRouterPolicyTable').html('<%: 网络异常，获取列表失败 %>')
            }
        })
    })

    // 设置路由策略
    $.sub('setRouterPolicy', function(evt, data){
        return $.ajax({
            url: '<%=luci.dispatcher.build_url("api", "xqnetwork","set_policy_routing")%>',
            type: "POST",
            dataType: 'json',
            data: data,
            success: function(res) {
                if(res.code === 0) {
                    $.pub('getRouterPolicyList')
                } else {
                    $.alert(res.msg)
                }
            },
            error: function(err) {
                $.alert(err.msg)
            }
        })
    })

    // 获取当前路由器qos状态
    $.sub('getQosStatus', function(evt, success) {
        $.getJSON('<%=luci.dispatcher.build_url("api", "misystem", "qos_info")%>', { }, function(rsp){
            if(rsp && rsp.code === 0) {
                isQosOn = rsp.status.on
                success && success()
            } else {
                $.alert('getQosStatus fail')
            }
        })
    })

    // 获取当前路由器ddns状态
    $.sub('getDdnsStatus', function(evt, success){
        $.ajax({
            url: '<%=luci.dispatcher.build_url("api", "xqnetwork", "ddns")%>',
            type: 'GET',
            dataType: 'json',
            success: function(res){
                if(res && res.code === 0) {
                    isDdnsOn = res.on
                    success && success()
                }
            },
            error: function(err) {
                $.alert(err && err.msg || '')
            }
        })
    })

    $.sub('checkDualWanEnable:tips', function() {
        $.dialog({
            width: 420,
            title: '现有功能与双WAN功能冲突',
            content: 'QoS，DDNS功能与双WAN功能有冲突，若想开启双WAN功能，请先关闭QoS功能，并禁用DDNS功能后再试',
            ok: function() { 
            }
        }).lock()
    })

    // 判断是否可以开启双WAN功能
    // 产品规定：必须关闭qos和ddns功能，才可以启动双WAN 
    $.sub('checkDualWanEnable', function(evt, cb) {
        $.pub('getQosStatus', function(){
            if(!isQosOn) {
                $.pub('getDdnsStatus', function() {
                    if(!isDdnsOn) {
                        cb()
                        return
                    }
                    $.pub('checkDualWanEnable:tips')
                })
                return
            }
            $.pub('checkDualWanEnable:tips')
        })
    })

    $.sub('fillwanform', function( evt, data ){
        var rsp = data,
            wantype = rsp.info.details.wanType,
            isauto = true,
            autoset = function( isauto ){
                var dtd = $.Deferred();
                if ( isauto ) {
                    $(".set-wan-more[value=0]").prop("checked", true);
                    $('.item-more-group').find('input').prop('disabled', true);
                } else {
                    $(".set-wan-more[value=1]").prop("checked", true);
                    $('.item-more-group').find('input').prop('disabled', false);
                }
                dtd.resolve();
                return dtd.promise();
            };
        if ( wantype === 'pppoe' ){
            $( 'input[name="pppoeName"]' ).val( rsp.info.details.username );
            $( 'input[name="pppoePwd"]' ).val( rsp.info.details.password );
            // mtu
            var mtuval = rsp.info.mtu;
            if ( mtuval != '1480' ) {
                isauto = false;
            }
            $('input[name=mtu]').val( mtuval );
            var service = rsp.info.details.service;
            if ( service != '' ) {
                isauto = false;
            }
            $('input[name=service]').val( service );
            // special
            var special = rsp.info.special;
            if ( special == '1' ) {
                isauto = false;
                $('input[name=special]').prop('checked', true);
            } else {
                $('input[name=special]').prop('checked', false);
            }

            $('#wantypeselect').val(0);
            $.pub( 'wan2Switch', [{index: '0'}] );
        }
        if ( wantype === 'static' ){
            $( 'input[name="staticIp"]' ).val( rsp.info.details.ipaddr );
            $( 'input[name="staticMask"]' ).val( rsp.info.details.netmask );
            $( 'input[name="staticGateway"]' ).val( rsp.info.details.gateway );
            $('#wantypeselect').val(2);
            $.pub( 'wan2Switch', [{index: '2'}] );
        }
        if ( wantype === 'dhcp') {
            $('#wantypeselect').val(1);
            $.pub( 'wan2Switch', [{index: '1'}] );
        }
        var dnslist = rsp.info.details.dns;
        if ( dnslist && $.isArray( dnslist ) && dnslist.length > 0 ) {
            for (var i = 0; i < dnslist.length; i++) {
                $( '#wanStatus input[name="dns' + (i + 1)  + '"]' ).val( dnslist[i] );
                $( '#wan2Set input[name="dns' + (i + 1)  + '"]' ).val( dnslist[i] );
            }
            isauto = false;
        }

        autoset( isauto ).then(function(){
            $.formInit();
            $.selectBeautify({ container:'#wan2Set'});
        });

    } );

    $.sub('wan2Switch:close', function() {
        dualWanDisplay.hide()
        wan2Switch.off()
    })

    $.sub('wan2Switch:open', function() {
        dualWanDisplay.show()
        wan2Switch.on()
        $.pub('getRouterPolicyList')
    })

    $.sub('setWan2Info:success', function(){
        loading({
            title: '<%:双WAN设置%>',
            content: '<%:双WAN设置中，请稍等...%>',
            refresh: true,
        })
    })

    $.sub('setWan2Info:error', function(evt, rsp){
        $.alert( rsp && rsp.msg );
    })

    // 填充双wan比例
    $.sub('setWanSpeedRatio', function(evt, rsp) {
        $('#wan1Speed').text(rsp.weight_wan1)
        $('#wan2Speed').text(rsp.weight_wan2)
    })

    $.sub( 'maccloneEvent', function(){
        // mac clone
        $( '#macClone' ).on('submit', function( e ){
            e.preventDefault();
            var formName = this.name,
                requestData,
                requestURL = '<%=luci.dispatcher.build_url("api", "xqnetwork","mac_clone")%>',
                mac = $('input[name=mac]').val(),
                validator = Valid.checkAll( this );
            
            // 产品在wan2的mac clone校验给出了新规则    
            if ( mac == wan1Mac ) {
                $.alert( '<%:该MAC地址与WAN1口MAC地址冲突，请输入其他MAC地址%>' );
                return;
            }
            if ( validator ) {
                requestData = {
                    mac: mac,
                    wan_name: 'wan2',
                };
                $.pub( 'wait', {id: '#btnMacSubmit'} );
                $.getJSON( requestURL, requestData, function( rsp ){
                    if( rsp.code === 0 ){
                        $.alert('<%:设置成功%>', function(){
                            location.reload( true );
                        }).lock();
                    } else {
                        $.alert( rsp.msg );
                    }
                    $.pub( 'done', {id: '#btnMacSubmit'} );
                });
            }
        } );
        // 恢复MAC地址
        $('#btnMacRecover').on('click', function(e){
            e.preventDefault();
            var requestData = {
                    mac: '<%=mac2default%>',
                    wan_name: 'wan2'
                },
                requestURL = '<%=luci.dispatcher.build_url("api", "xqnetwork","mac_clone")%>';
            $.pub( 'wait', {id: '#btnMacRecover'} );
            $.getJSON( requestURL, requestData, function( rsp ){
                if( rsp.code === 0 ){
                    $.alert('<%:设置成功%>', function(){
                        location.reload( true );
                    }).lock();
                } else {
                    $.alert( rsp.msg );
                }
                $.pub( 'done', {id: '#btnMacRecover'} );
            });
        });
    } );

    //PPPoE Stop
    $.sub('pppoeStop', function(){
        askcount = 0;
        $.ajax({
            url: '<%=luci.dispatcher.build_url("api", "xqnetwork","pppoe_stop")%>',
            type: "POST",
            dataType: "json",
            data: { wan_name: 'wan2' },
            success : function(rsp){
                $.pub('pppoeStatus', [{time : 500, params: { wan_name: 'wan2' }}]);
            }
        });
    });

     //PPPoE Connect
     $.sub('pppoeConnect', function(){
        askcount = 0;
        $.ajax({
            url: '<%=luci.dispatcher.build_url("api", "xqnetwork","pppoe_start")%>',
            type: "POST",
            dataType: "json",
            data: { wan_name: 'wan2' },
            success : function(rsp){
                $.pub('pppoeStatus', [{time : 500, params: { wan_name: 'wan2' }}]);
            }
        });
    });

    $.sub('dual-wan-setting:show', function(){
        DUAL_WAN_SETTING_SECTION.forEach(function(name){
            var className = '.' + name
            $(className).attr('style', "display:block;")
        })
    });

    $.sub('dual-wan-setting:hide', function(){
        DUAL_WAN_SETTING_SECTION.forEach(function(name){
            var className = '.' + name
            $(className).attr('style', "display:none;")
        })
    });

    // 帮助提示功能
    $('.help .ico').on('click', function(){
        $.pub('dualWanHelp:show');
    });
    $('.help-close').on('click', function(){
        $.pub('dualWanHelp:hide');
    });

    // 从设备列表添加
    $('#btnDevicesAdd').on('click', function (e) {
        e.preventDefault();
        listaddDialog = $.dialog({
            title: '<%:设备列表%><span id="devicesRefresh" class="ico-dev-refresh"></span>',
            content: $('#tmplDevicesAdd').html(),
            lock: true,
            padding: 0,
            width: 770
        });
        // 绑定刷新设备列表事件
        $('#devicesRefresh').on('click', function() {
            $.pub('getDevices')
        })
        $.pub('getDevices')
    });
    
    // 设置pppoe
    $('#pppoe').on( 'submit', function( e ){
        e.preventDefault();
        var formName = this.name;
        var validator = Valid.checkAll( this );
        if ( validator ) {
            var params = {}
            $( this ).serializeArray().forEach(function(item) {
                params[item.name]=item.value
            })
            $.pub('setWan2Info', [params])
        }
    })

    // 设置static
    $('#static').on( 'submit', function( e ){
        e.preventDefault();
        var formName = this.name;
        var validator = Valid.checkAll( this );
        if ( validator ) {
            var params = {}
            $( this ).serializeArray().forEach(function(item) {
                params[item.name]=item.value
            })
            $.pub('setWan2Info', [params])
        }
    })

    // 设置dhcp
    $('#dhcp').on('submit', function( e ){
        e.preventDefault();
        var formName = this.name;
        var validator = Valid.checkAll( this );
        
        if ( validator ) {
            var params = {}
            $( this ).serializeArray().forEach(function(item) {
                params[item.name]=item.value
            })
            $.pub('setWan2Info', [params])
        }
    })


    // 手工添加
    $('#btnSelfAdd').on('click', function (e) {
        e.preventDefault();
        selfaddDialog = $.dialog({
            title: '<%:手工添加%>',
            content: $('#tmplAddSelf').html(),
            lock: true,
            padding: 0,
        });
        $('#selfAdd').on('submit', function(e) {
            e.preventDefault();
            var validator = Valid.checkAll( this );
            
            if ( validator ) {
                if((routerPolicyList.length <= MAX_ROUTER_POLICY_LIST_NUM - 1)) {
                    addRouterPolicy({
                        oname: $('#selfAdd input[name="oname"]').val(),
                        mac: $('#selfAdd input[name="mac"]').val()
                    }, true)
                    selfaddDialog.close()
                    setTimeout(function () {
                        $.formInit();
                    }, 100);
                } else {
                    $.alert('<%:错误：策略数量最大值为'+ MAX_ROUTER_POLICY_LIST_NUM +'%>')
                }
            }
        })
    });

    // wan口速率比设置
    $('#btnWanSpeedRatioSet').on('click', function (e) {
        e.preventDefault();

        wanSpeedRatioDialog = $.dialog({
            title: '<%:手工设置外网带宽%>',
            content: $('#tmplWanSpeedRatio').html().tmpl({
                wan1Speed: wanInfo['bandwidth_wan1'] > 0 ? wanInfo['bandwidth_wan1'] : '',
                wan2Speed: wanInfo['bandwidth_wan2'] > 0 ? wanInfo['bandwidth_wan2'] : '',
            }),
            lock: true
        })

        // 注册提交按钮事件
        $('#wanSpeedRatio').on('submit', function(e) {
            e.preventDefault();
            var validator = Valid.checkAll( this );
            if ( validator ) {
                var s1 = Number($('.wanSpeedRatio input[name="wan1Speed"]').val())
                var s2 = Number($('.wanSpeedRatio input[name="wan2Speed"]').val())
                // 产品需求：s1和s2 比例限制在1～100
                if(s1/s2 < 1 && s2/s1 > 100) {
                    s1 = 1
                    s2 = 100
                }
                if(s2/s1 < 1 && s1/s2 > 100) {
                    s1 = 100
                    s2 = 1
                }

                $.pub('setWanWeight', [{
                    bandwidth_wan1: s1,
                    bandwidth_wan2: s2,
                }, function(){
                    wanSpeedRatioDialog.close()
                    location.reload( true );
                }, function() {
                    $.alert('<%:  设置失败%>')
                }])
            }
        })
    })

    $('#wan2Switch').on('click', function(e) {
        e.preventDefault()
        if($('#wan2Switch').hasClass('btn-switch-on')) {
            isDualWanOn
                ? 
                $.pub('setWan2Info', [{ enable: 0 }, function() {
                    $.pub('wan2Switch:close')
                }])
                :
                $.pub('wan2Switch:close')
        } else {
            $.pub('checkDualWanEnable', function(){
                $.pub('wan2Switch:open')
            })
        }
    })

    // set wan more option
    $('.set-wan-more').on('click', function( e ){
        var tar = e.target,
            $tar = $(tar),
            isauto = $tar.val() === '0',
            $moreset = $tar.parents('.item-more').next('.item-more-group');
        if ( isauto ) {
            $moreset.find('input,select').prop('disabled', true);
            $moreset.find('.form-item').addClass('form-item-disabled');
        } else {
            $moreset.find('input,select').prop('disabled', false);
            $moreset.find('.form-item').removeClass('form-item-disabled');
        }
    });

    $('.btn-cancel-set').on('click', function( e ){
        e.preventDefault();
    });

    // stop connect
    $( document.body ).delegate( '#pppoeStop', 'click', function( e ){
        e.preventDefault();
        $.pub('pppoeStop');
    } );

    // reconnect
    $( document.body ).delegate( '#pppoeStart', 'click', function( e ){
        e.preventDefault();
        $.pub('pppoeConnect');
    } );

    function loading(opts){
        loadingDialog = $.loadingDialog({
            title : opts.title || '设置中',
            content : opts.content || '设置中，请稍等...',
            beforeunload: function() {
                opts.refresh && window.top.location.reload(true);
            }
        }).lock().time(opts.time || 30*1000)
    }

    // 显示btn
    function onControlFocus() {
        $(this).parents('form').find('.btn-primary, .btn-dft').removeClass('hidden');
    }

    // 设置在线策略路由列表
    function addRouterPolicy (payload, manual) {
        return $.pub('setRouterPolicy', [$.extend({}, payload, {
            opt: 0, // 0：添加一个MAC地址，1：删除一个MAC地址
            manual: manual?'1':'0', // 0：从设备列表添加, 1：从手工添加
            wan: '1', // 默认wan1
        })])
    }

    // 删除在线策略路由列表
    function delRouterPolicy (item) {
        $.pub('setRouterPolicy', $.extend({}, item, {
            opt: 1, // 0：添加一个MAC地址，1：删除一个MAC地址
        }))
    }

    function init() {
        $.pub('getWan1Info');
        $.pub('getWan2Info');
        $.pub('maccloneEvent');
    }

    init();
    
})
</script>
