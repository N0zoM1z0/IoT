local L0, L1, L2, L3, L4, L5, L6
L0 = module
L1 = "luci.controller.api.xqnetwork"
L2 = package
L2 = L2.seeall
L0(L1, L2)
L0 = require
L1 = "xiaoqiang.XQLog"
L0 = L0(L1)
logger = L0
function L0()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = node
  L1 = "api"
  L2 = "xqnetwork"
  L0 = L0(L1, L2)
  L1 = require
  L2 = "xiaoqiang.util.XQSysUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.XQFeatures"
  L2 = L2(L3)
  L2 = L2.FEATURES
  L3 = firstchild
  L3 = L3()
  L0.target = L3
  L0.title = ""
  L0.order = 200
  L0.sysauth = "admin"
  L0.sysauth_authenticator = "jsonauth"
  L0.index = true
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L4[1] = L5
  L4[2] = L6
  L5 = firstchild
  L5 = L5()
  L6 = ""
  L7 = 200
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWifiStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 201
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_detail"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWifiInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 202
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_detail_all"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getAllWifiInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 202
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_connect_devices"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWifiConDev"
  L5 = L5(L6)
  L6 = ""
  L7 = 203
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_txpwr_channel"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWifiChTx"
  L5 = L5(L6)
  L6 = ""
  L7 = 204
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wifi_txpwr"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWifiTxpwr"
  L5 = L5(L6)
  L6 = ""
  L7 = 205
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_up"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "turnOnWifi"
  L5 = L5(L6)
  L6 = ""
  L7 = 206
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_down"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "shutDownWifi"
  L5 = L5(L6)
  L6 = ""
  L7 = 207
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wifi"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWifi"
  L5 = L5(L6)
  L6 = ""
  L7 = 208
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wifi_without_restart"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWifiWithoutRestart"
  L5 = L5(L6)
  L6 = ""
  L7 = 208
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "check_wired_link"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "checkWiredLink"
  L5 = L5(L6)
  L6 = ""
  L7 = 212
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "lan_info"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getLanInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 213
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wan_info"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWanInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 214
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "lan_dhcp"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getLanDhcp"
  L5 = L5(L6)
  L6 = ""
  L7 = 215
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wan_down"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "wanDown"
  L5 = L5(L6)
  L6 = ""
  L7 = 216
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wan_up"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "wanUp"
  L5 = L5(L6)
  L6 = ""
  L7 = 217
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "check_wan_type"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getAutoWanType"
  L5 = L5(L6)
  L6 = ""
  L7 = 218
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "check_wan_link"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getAutoWanLink"
  L5 = L5(L6)
  L6 = ""
  L7 = 218
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wan_statistics"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWanStatistics"
  L5 = L5(L6)
  L6 = ""
  L7 = 219
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "devices_statistics"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getDevsStatistics"
  L5 = L5(L6)
  L6 = ""
  L7 = 220
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "device_statistics"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getDevStatistics"
  L5 = L5(L6)
  L6 = ""
  L7 = 221
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_lan_ip"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setLanIp"
  L5 = L5(L6)
  L6 = ""
  L7 = 222
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wan"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWan"
  L5 = L5(L6)
  L6 = ""
  L7 = 223
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wan_new"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWanNew"
  L5 = L5(L6)
  L6 = ""
  L7 = 223
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_lan_dhcp"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setLanDhcp"
  L5 = L5(L6)
  L6 = ""
  L7 = 224
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "mac_clone"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWanMac"
  L5 = L5(L6)
  L6 = ""
  L7 = 225
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_all_wifi"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setAllWifi"
  L5 = L5(L6)
  L6 = ""
  L7 = 226
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_dwb_wifi"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setDWBWifi"
  L5 = L5(L6)
  L6 = ""
  L3(L4, L5, L6)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "avaliable_channels"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getChannels"
  L5 = L5(L6)
  L6 = ""
  L7 = 227
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_macfilter_info"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWifiMacfilterInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 228
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wifi_macfilter"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWifiMacfilter"
  L5 = L5(L6)
  L6 = ""
  L7 = 229
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "edit_device"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "editDevice"
  L5 = L5(L6)
  L6 = ""
  L7 = 230
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "manually_add"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "manuallyAdd"
  L5 = L5(L6)
  L6 = ""
  L7 = 231
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "mac_bind"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "macBind"
  L5 = L5(L6)
  L6 = ""
  L7 = 231
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "mac_unbind"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "macUnbind"
  L5 = L5(L6)
  L6 = ""
  L7 = 232
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "savebind"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "saveBind"
  L5 = L5(L6)
  L6 = ""
  L7 = 233
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "unbindall"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "unbindAll"
  L5 = L5(L6)
  L6 = ""
  L7 = 234
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "macbind_info"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getMacBindInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 235
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "ipmac_check_enable"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setIPMACCheckEnable"
  L5 = L5(L6)
  L6 = ""
  L7 = 235
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "ipmac_check_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getIPMACCheckStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 235
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "pppoe_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "pppoeStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 236
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "pppoe_stop"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "pppoeStop"
  L5 = L5(L6)
  L6 = ""
  L7 = 237
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "pppoe_start"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "pppoeStart"
  L5 = L5(L6)
  L6 = ""
  L7 = 238
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "qos_info"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getQosInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 239
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "qos_switch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "qosSwitch"
  L5 = L5(L6)
  L6 = ""
  L7 = 240
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "qos_mode"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "qosMode"
  L5 = L5(L6)
  L6 = ""
  L7 = 241
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "qos_limit"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "qosLimit"
  L5 = L5(L6)
  L6 = ""
  L7 = 242
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "qos_limits"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "qosLimits"
  L5 = L5(L6)
  L6 = ""
  L7 = 242
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "qos_offlimit"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "qosOffLimit"
  L5 = L5(L6)
  L6 = ""
  L7 = 243
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_band"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setBand"
  L5 = L5(L6)
  L6 = ""
  L7 = 244
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "ddns"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "ddnsStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 253
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "ddns_switch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "ddnsSwitch"
  L5 = L5(L6)
  L6 = ""
  L7 = 254
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "add_server"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "addServer"
  L5 = L5(L6)
  L6 = ""
  L7 = 255
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "del_server"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "deleteServer"
  L5 = L5(L6)
  L6 = ""
  L7 = 256
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "server_switch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "serverSwitch"
  L5 = L5(L6)
  L6 = ""
  L7 = 258
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "ddns_reload"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "ddnsReload"
  L5 = L5(L6)
  L6 = ""
  L7 = 259
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "ddns_edit"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "ddnsEdit"
  L5 = L5(L6)
  L6 = ""
  L7 = 260
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_server"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getServer"
  L5 = L5(L6)
  L6 = ""
  L7 = 261
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_list"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getScanList"
  L5 = L5(L6)
  L6 = ""
  L7 = 262
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "disable_ap"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "disableap"
  L5 = L5(L6)
  L6 = ""
  L7 = 263
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "mode"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getMode"
  L5 = L5(L6)
  L6 = ""
  L7 = 264
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wan_link"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWanLinkStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 265
  L8 = 9
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wifi_ap"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWifiApMode"
  L5 = L5(L6)
  L6 = ""
  L7 = 266
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "app_set_wifi_ap"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "appSetWifiApMode"
  L5 = L5(L6)
  L6 = ""
  L7 = 286
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifiap_signal"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "apcli_get_signal"
  L5 = L5(L6)
  L6 = ""
  L7 = 267
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifiap_restart"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "serviceRestart"
  L5 = L5(L6)
  L6 = ""
  L7 = 268
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_lan_ap"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setLanAP"
  L5 = L5(L6)
  L6 = ""
  L7 = 272
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "disable_lan_ap"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "disableLanAP"
  L5 = L5(L6)
  L6 = ""
  L7 = 273
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "app_wifiap_restart"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "wifiAPserviceRestart"
  L5 = L5(L6)
  L6 = ""
  L7 = 287
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getModeStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 288
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_active_apcli_index"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getActiveApcliIndex"
  L5 = L5(L6)
  L6 = ""
  L7 = 289
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "channel_scan_start"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "channelScanStart"
  L5 = L5(L6)
  L6 = ""
  L7 = 269
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "channel_scan_result"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getScanResult"
  L5 = L5(L6)
  L6 = ""
  L7 = 270
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_channel"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setChannel"
  L5 = L5(L6)
  L6 = ""
  L7 = 271
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wan_speed"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWanSpeed"
  L5 = L5(L6)
  L6 = ""
  L7 = 262
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wan_speed"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWanSpeed"
  L5 = L5(L6)
  L6 = ""
  L7 = 263
  L3(L4, L5, L6, L7)
  L3 = L2.apps
  if L3 then
    L3 = L2.apps
    L3 = L3.sfp
    if L3 == "1" then
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_sfp"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "GetSFPSpeed"
      L5 = L5(L6)
      L6 = ""
      L7 = 374
      L3(L4, L5, L6, L7)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_sfp"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "SetSFPSpeed"
      L5 = L5(L6)
      L6 = ""
      L7 = 375
      L3(L4, L5, L6, L7)
    end
  end
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "pppoe_catch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "pppoeCatch"
  L5 = L5(L6)
  L6 = ""
  L7 = 264
  L8 = 9
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "wifi_diag_detail_all"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getDiagAllWifiInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 275
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diagdevicelist"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getDiagDeviceList"
  L5 = L5(L6)
  L6 = ""
  L7 = 276
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diagudiskstatus"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getDiagUdiskStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 277
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diagdiskstatus"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getDiagDiskStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 278
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diag_wifi_test"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "diagWifiTest"
  L5 = L5(L6)
  L6 = ""
  L7 = 279
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diag_usb_test"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "diagUsbTest"
  L5 = L5(L6)
  L6 = ""
  L7 = 280
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diag_hdd_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "diagHddStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 281
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diag_disk_test"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "diagDiskTest"
  L5 = L5(L6)
  L6 = ""
  L7 = 282
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diag_get_paras"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getDiagParas"
  L5 = L5(L6)
  L6 = ""
  L7 = 283
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diag_set_paras"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setDiagParas"
  L5 = L5(L6)
  L6 = ""
  L7 = 284
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "diag_get_log"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getDiagLog"
  L5 = L5(L6)
  L6 = ""
  L7 = 285
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wifi_weak"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWifiWeakInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 286
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_wifi_weak"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWifiWeakInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 287
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wan6"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWan6"
  L5 = L5(L6)
  L6 = ""
  L7 = 223
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "ipv6_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "ipv6Status"
  L5 = L5(L6)
  L6 = ""
  L7 = 223
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = "system"
  L3 = L2[L3]
  L4 = "ipv6_wired_v2"
  L3 = L3[L4]
  if L3 then
    L3 = "system"
    L3 = L2[L3]
    L4 = "ipv6_wired_v2"
    L3 = L3[L4]
    if L3 == "1" then
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_wan6_v2"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setWan6V2"
      L5 = L5(L6)
      L6 = ""
      L7 = 360
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_wan6_v2"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getWan6V2"
      L5 = L5(L6)
      L6 = ""
      L7 = 361
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_lan6_v2"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setLan6V2"
      L5 = L5(L6)
      L6 = ""
      L7 = 362
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_lan6_v2"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getLan6V2"
      L5 = L5(L6)
      L6 = ""
      L7 = 363
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_wan6_info_v2"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getWan6InfoV2"
      L5 = L5(L6)
      L6 = ""
      L7 = 364
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_wan6_switch_v2"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setWan6SwitchV2"
      L5 = L5(L6)
      L6 = ""
      L7 = 365
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_wan6_switch_v2"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getWan6SwitchV2"
      L5 = L5(L6)
      L6 = ""
      L7 = 366
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_wan_status"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getWanStatus"
      L5 = L5(L6)
      L6 = ""
      L7 = 367
      L8 = 8
      L3(L4, L5, L6, L7, L8)
    end
  end
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_son_backhaul_mode"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setSonBackhaulMode"
  L5 = L5(L6)
  L6 = ""
  L7 = 209
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_son_backhaul_mode"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getSonBackhaulMode"
  L5 = L5(L6)
  L6 = ""
  L7 = 209
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "miscan_switch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "miscanSwitch"
  L5 = L5(L6)
  L6 = ""
  L7 = 290
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_miscan_switch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getMiscanSwitch"
  L5 = L5(L6)
  L6 = ""
  L7 = 291
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wifi_txbf"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWifiTxbf"
  L5 = L5(L6)
  L6 = ""
  L7 = 295
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wifi_ax"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWifiAx"
  L5 = L5(L6)
  L6 = ""
  L7 = 296
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "scan_mesh_node"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "scanMeshNode"
  L5 = L5(L6)
  L6 = ""
  L7 = 297
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "add_mesh_node"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "addMeshNode"
  L5 = L5(L6)
  L6 = ""
  L7 = 298
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_addnode_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getMeshNodeStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 299
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_netmode"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getNetMode"
  L5 = L5(L6)
  L6 = ""
  L7 = 300
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wan_lan_swap"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWanLanSwap"
  L5 = L5(L6)
  L6 = ""
  L7 = 301
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_wan_port_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWanPortStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 302
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_wan_lan_port"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWanLanPort"
  L5 = L5(L6)
  L6 = ""
  L7 = 303
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_wan_lan_port"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setWanLanPort"
  L5 = L5(L6)
  L6 = ""
  L7 = 304
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_wan_lan_mode"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWanLanMode"
  L5 = L5(L6)
  L6 = ""
  L7 = 305
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "miotrelay_switch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "miotrelaySwitch"
  L5 = L5(L6)
  L6 = ""
  L7 = 306
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_miotrelay_switch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getMiotrelaySwitch"
  L5 = L5(L6)
  L6 = ""
  L7 = 307
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_ipv6_firewall"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setIpv6Firewall"
  L5 = L5(L6)
  L6 = ""
  L7 = 308
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_ipv6_firewall"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getIpv6Firewall"
  L5 = L5(L6)
  L6 = ""
  L7 = 309
  L8 = 8
  L3(L4, L5, L6, L7, L8)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_nfc_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setNfcStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 320
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_nfc_info"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getNfcInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 321
  L3(L4, L5, L6, L7)
  L3 = "system"
  L3 = L2[L3]
  L4 = "multiwan"
  L3 = L3[L4]
  if L3 then
    L3 = "system"
    L3 = L2[L3]
    L4 = "multiwan"
    L3 = L3[L4]
    if L3 == "1" then
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_multiwan_basic_info"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getMultiwanBasicInfo"
      L5 = L5(L6)
      L6 = ""
      L7 = 322
      L8 = 9
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_multiwan_dev_list"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getMultiwanDevList"
      L5 = L5(L6)
      L6 = ""
      L7 = 323
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_multiwan_dev_policies"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getMultiwanDevPolicies"
      L5 = L5(L6)
      L6 = ""
      L7 = 324
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_multiwan_dev_policy"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setMultiwanDevPolicy"
      L5 = L5(L6)
      L6 = ""
      L7 = 325
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_multiwan_weight"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setMultiwanWeight"
      L5 = L5(L6)
      L6 = ""
      L7 = 326
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_multiwan_enable"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setMultiwanEnable"
      L5 = L5(L6)
      L6 = ""
      L7 = 327
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_multiwan_policy"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setMultiwanPolicy"
      L5 = L5(L6)
      L6 = ""
      L7 = 328
      L8 = 8
      L3(L4, L5, L6, L7, L8)
    end
  end
  L3 = "system"
  L3 = L2[L3]
  L4 = "tr069"
  L3 = L3[L4]
  if L3 then
    L3 = "system"
    L3 = L2[L3]
    L4 = "tr069"
    L3 = L3[L4]
    if L3 == "1" then
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_cwmp"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setCwmp"
      L5 = L5(L6)
      L6 = ""
      L7 = 330
      L3(L4, L5, L6, L7)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_cwmp_info"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getCwmpInfo"
      L5 = L5(L6)
      L6 = ""
      L7 = 331
      L3(L4, L5, L6, L7)
    end
  end
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_wps_info"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getWpsInfo"
  L5 = L5(L6)
  L6 = ""
  L7 = 332
  L3(L4, L5, L6, L7)
  L3 = L2.apps
  L4 = "baidupan"
  L3 = L3[L4]
  if L3 then
    L3 = L2.apps
    L4 = "baidupan"
    L3 = L3[L4]
    if L3 == "1" then
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_router_to_baidu"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setRouterToBaidu"
      L5 = L5(L6)
      L6 = ""
      L7 = 333
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_baidu_to_router"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setBaiduToRouter"
      L5 = L5(L6)
      L6 = ""
      L7 = 334
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "delete_transport_list"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "deleteTransportList"
      L5 = L5(L6)
      L6 = ""
      L7 = 335
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_transport_list"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getTransportList"
      L5 = L5(L6)
      L6 = ""
      L7 = 336
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_translist_action"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setTransListAction"
      L5 = L5(L6)
      L6 = ""
      L7 = 337
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_translist_file_stat"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getTransListFileStat"
      L5 = L5(L6)
      L6 = ""
      L7 = 338
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_translist_count"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getTransListCount"
      L5 = L5(L6)
      L6 = ""
      L7 = 339
      L8 = 8
      L3(L4, L5, L6, L7, L8)
    end
  end
  L3 = L2.apps
  L4 = "docker"
  L3 = L3[L4]
  if L3 then
    L3 = L2.apps
    L4 = "docker"
    L3 = L3[L4]
    if L3 == "1" then
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_mi_docker"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setMiDocker"
      L5 = L5(L6)
      L6 = ""
      L7 = 340
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_mi_docker_environment"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setMiDockerEnv"
      L5 = L5(L6)
      L6 = ""
      L7 = 341
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_portainer_environment"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setPortainerEnv"
      L5 = L5(L6)
      L6 = ""
      L7 = 342
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_portainer_manage"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setPortainerManage"
      L5 = L5(L6)
      L6 = ""
      L7 = 343
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_docker_info"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getDockerInfo"
      L5 = L5(L6)
      L6 = ""
      L7 = 344
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_mi_docker_cancel"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setMiDockerCancel"
      L5 = L5(L6)
      L6 = ""
      L7 = 345
      L8 = 8
      L3(L4, L5, L6, L7, L8)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_portainer_cancel"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setPortainerCancel"
      L5 = L5(L6)
      L6 = ""
      L7 = 346
      L8 = 8
      L3(L4, L5, L6, L7, L8)
    end
  end
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_hostap_mlo"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setHostapMLO"
  L5 = L5(L6)
  L6 = ""
  L7 = 372
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_hostap_mlo"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getHostapMLO"
  L5 = L5(L6)
  L6 = ""
  L7 = 373
  L3(L4, L5, L6, L7)
  L3 = "wifi"
  L3 = L2[L3]
  L4 = "twt"
  L3 = L3[L4]
  if L3 then
    L3 = "wifi"
    L3 = L2[L3]
    L4 = "twt"
    L3 = L3[L4]
    if L3 == "1" then
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_twt"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getTwt"
      L5 = L5(L6)
      L6 = ""
      L3(L4, L5, L6)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_twt"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setTwt"
      L5 = L5(L6)
      L6 = ""
      L3(L4, L5, L6)
    end
  end
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_mesh_switch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setMeshSwitch"
  L5 = L5(L6)
  L6 = ""
  L7 = 374
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_mesh_switch"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getMeshSwitch"
  L5 = L5(L6)
  L6 = ""
  L7 = 375
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "set_roam_rssi_threshold"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "setRoamRssiThreshold"
  L5 = L5(L6)
  L6 = ""
  L7 = 376
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "get_roam_rssi_threshold"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getRoamRssiThreshold"
  L5 = L5(L6)
  L6 = ""
  L7 = 377
  L3(L4, L5, L6, L7)
  L3 = entry
  L4 = {}
  L5 = "api"
  L6 = "xqnetwork"
  L7 = "bridge_lan_status"
  L4[1] = L5
  L4[2] = L6
  L4[3] = L7
  L5 = call
  L6 = "getBridgeLanStatus"
  L5 = L5(L6)
  L6 = ""
  L7 = 382
  L3(L4, L5, L6, L7)
  L3 = L2.apps
  if L3 then
    L3 = L2.apps
    L4 = "local_gw_security"
    L3 = L3[L4]
    if L3 == "1" then
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "set_gw_security"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "setGwSecurity"
      L5 = L5(L6)
      L6 = ""
      L7 = 383
      L3(L4, L5, L6, L7)
      L3 = entry
      L4 = {}
      L5 = "api"
      L6 = "xqnetwork"
      L7 = "get_gw_security"
      L4[1] = L5
      L4[2] = L6
      L4[3] = L7
      L5 = call
      L6 = "getGwSecurity"
      L5 = L5(L6)
      L6 = ""
      L7 = 384
      L3(L4, L5, L6, L7)
    end
  end
end
index = L0
L0 = require
L1 = "luci.http"
L0 = L0(L1)
L1 = require
L2 = "xiaoqiang.util.XQErrorUtil"
L1 = L1(L2)
L2 = require
L3 = "luci.model.uci"
L2 = L2(L3)
L2 = L2.cursor
L2 = L2()
function L3()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L2 = {}
  L3 = table
  L3 = L3.insert
  L4 = L2
  L5 = L0.getWifiStatus
  L6 = 1
  L5, L6 = L5(L6)
  L3(L4, L5, L6)
  L3 = table
  L3 = L3.insert
  L4 = L2
  L5 = L0.getWifiStatus
  L6 = 2
  L5, L6 = L5(L6)
  L3(L4, L5, L6)
  L1.code = 0
  L1.status = L2
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
getWifiStatus = L3
function L3()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L2 = 0
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "wifiIndex"
  L4, L5 = L4(L5)
  L3 = L3(L4, L5)
  if L3 and L3 < 3 then
    L4 = L0.getAllWifiInfo
    L4 = L4()
    L4 = L4[L3]
    L1.info = L4
  else
    L2 = 1523
  end
  if L2 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L2
    L4 = L4(L5)
    L1.msg = L4
  end
  L1.code = L2
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L1
  L4(L5)
end
getWifiInfo = L3
function L3()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.DedicatedWirelessBackhaulUtil"
  L1 = L1(L2)
  L2 = {}
  L3 = 0
  L4 = L0.getAllWifiInfo
  L4 = L4()
  L2.info = L4
  L2.code = L3
  L4 = L2.info
  L4 = #L4
  if 0 < L4 then
    L4 = tonumber
    L5 = L2.info
    L5 = L5[1]
    L5 = L5.bsd
    L4 = L4(L5)
    L2.bsd = L4
    L4 = L2.bsd
    if not L4 then
      L2.bsd = 0
    end
  end
  if L1 then
    L4 = L1.is_supported
    L4 = L4()
    if L4 then
      L4 = L1.mesh_get_dwb_type
      L4 = L4()
      L2.dwb_type = L4
      L4 = L1.mesh_get_dwb_band
      L4 = L4()
      L2.dwb_band = L4
      L4 = L1.mesh_get_dwb_status
      L4 = L4()
      L4 = L4 or L4
      L5 = tonumber
      L6 = L4
      L5 = L5(L6)
      L2.dwb_status = L5
    end
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L2
  L4(L5)
end
getAllWifiInfo = L3
function L3()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L2 = 0
  L3 = L0.getDiagAllWifiInfo
  L3 = L3()
  L1.info = L3
  L1.code = L2
  L3 = L1.info
  L3 = #L3
  if 0 < L3 then
    L3 = tonumber
    L4 = L1.info
    L4 = L4[1]
    L4 = L4.bsd
    L3 = L3(L4)
    L1.bsd = L3
    L3 = L1.bsd
    if not L3 then
      L1.bsd = 0
    end
  end
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
getDiagAllWifiInfo = L3
function L3()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = L0.getAllWifiConnetDeviceList
  L2 = L2()
  L1.list = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getWifiConDev = L3
function L3()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = L0.getWifiChannelTxpwrList
  L2 = L2()
  L1.list = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getWifiChTx = L3
function L3()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = {}
  L3 = 0
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "channel1"
  L4 = L4(L5)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "txpwr1"
  L5 = L5(L6)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "channel2"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "txpwr2"
  L7 = L7(L8)
  L8 = L1.isStrNil
  L9 = L4
  L8 = L8(L9)
  if L8 then
    L8 = L1.isStrNil
    L9 = L6
    L8 = L8(L9)
    if L8 then
      L8 = L1.isStrNil
      L9 = L5
      L8 = L8(L9)
      if L8 then
        L8 = L1.isStrNil
        L9 = L7
        L8 = L8(L9)
        if L8 then
          L3 = 1502
      end
    end
  end
  else
    L8 = L0.setWifiChannelTxpwr
    L9 = L4
    L10 = L5
    L11 = L6
    L12 = L7
    L8(L9, L10, L11, L12)
  end
  if L3 ~= 0 then
    L8 = _UPVALUE1_
    L8 = L8.getErrorMessage
    L9 = L3
    L8 = L8(L9)
    L2.msg = L8
  end
  L2.code = L3
  L8 = _UPVALUE0_
  L8 = L8.write_json
  L9 = L2
  L8(L9)
  if L3 == 0 then
    L8 = _UPVALUE0_
    L8 = L8.close
    L8()
    L8 = L1.forkRestartWifi
    L8()
  end
end
setWifiChTx = L3
function L3()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = {}
  L3 = 0
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "txpwr"
  L4 = L4(L5)
  L5 = L1.isStrNil
  L6 = L4
  L5 = L5(L6)
  if L5 then
    L3 = 1502
  else
    L5 = L0.setWifiTxpwr
    L6 = L4
    L5(L6)
  end
  if L3 ~= 0 then
    L5 = _UPVALUE1_
    L5 = L5.getErrorMessage
    L6 = L3
    L5 = L5(L6)
    L2.msg = L5
  end
  L2.code = L3
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L2
  L5(L6)
  if L3 == 0 then
    L5 = _UPVALUE0_
    L5 = L5.close
    L5()
    L5 = L1.forkRestartWifi
    L5()
  end
end
setWifiTxpwr = L3
function L3()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = {}
  L3 = 0
  L4 = 0
  L5 = L0.get_require_cac
  L5 = L5()
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "txbf"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "user_confirm"
  L7 = L7(L8)
  L8 = logger
  L8 = L8.log
  L9 = 6
  L10 = "======================== txbf "
  L11 = L6
  L10 = L10 .. L11
  L8(L9, L10)
  if L5 == true then
    L8 = L1.get_cac_time
    L9 = "cfg_file"
    L10 = "wl0"
    L11 = "0"
    L12 = "0"
    L8 = L8(L9, L10, L11, L12)
    L4 = L8
  else
    L4 = 0
  end
  if L7 == nil then
    L7 = "1"
  end
  if L4 == 600 and L7 == "0" then
    L2.need_confirm = 1
    L2.cac_time = L4
    L2.code = 0
    L8 = _UPVALUE0_
    L8 = L8.write_json
    L9 = L2
    L8(L9)
    L8 = true
    return L8
  end
  L8 = L1.isStrNil
  L9 = L6
  L8 = L8(L9)
  if L8 then
    L3 = 1502
  else
    L8 = L0.setWifiTxbf
    L9 = L6
    L8(L9)
  end
  if L3 ~= 0 then
    L8 = _UPVALUE1_
    L8 = L8.getErrorMessage
    L9 = L3
    L8 = L8(L9)
    L2.msg = L8
  end
  L2.cac_time = L4
  L2.code = L3
  L8 = _UPVALUE0_
  L8 = L8.write_json
  L9 = L2
  L8(L9)
  if L3 == 0 then
    L8 = _UPVALUE0_
    L8 = L8.close
    L8()
    L8 = L1.forkRestartWifi
    L8()
  end
end
setWifiTxbf = L3
function L3()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = {}
  L3 = 0
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "ax"
  L4 = L4(L5)
  L5 = 0
  L6 = L0.get_require_cac
  L6 = L6()
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "user_confirm"
  L7 = L7(L8)
  if L7 == nil then
    L7 = "1"
  end
  if L6 == true then
    L8 = L1.get_cac_time
    L9 = "cfg_file"
    L10 = "wl0"
    L11 = "0"
    L12 = "0"
    L8 = L8(L9, L10, L11, L12)
    L5 = L8
  else
    L5 = 0
  end
  if L5 == 600 and L7 == "0" then
    L2.need_confirm = 1
    L2.cac_time = L5
    L2.code = 0
    L8 = _UPVALUE0_
    L8 = L8.write_json
    L9 = L2
    L8(L9)
    L8 = true
    return L8
  end
  L8 = L1.isStrNil
  L9 = L4
  L8 = L8(L9)
  if L8 then
    L3 = 1502
  else
    L8 = L0.setWifiAx
    L9 = L4
    L8(L9)
  end
  if L3 ~= 0 then
    L8 = _UPVALUE1_
    L8 = L8.getErrorMessage
    L9 = L3
    L8 = L8(L9)
    L2.msg = L8
  end
  L2.cac_time = L5
  L2.code = L3
  L8 = _UPVALUE0_
  L8 = L8.write_json
  L9 = L2
  L8(L9)
  if L3 == 0 then
    L8 = _UPVALUE0_
    L8 = L8.close
    L8()
    L8 = L1.forkRestartWifi
    L8()
  end
end
setWifiAx = L3
function L3()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L2 = 0
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "wifiIndex"
  L4, L5 = L4(L5)
  L3 = L3(L4, L5)
  if L3 and L3 < 3 then
    L4 = L0.turnWifiOn
    L5 = L3
    L4(L5)
  else
    L2 = 1523
  end
  if L2 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L2
    L4 = L4(L5)
    L1.msg = L4
  end
  L1.code = L2
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L1
  L4(L5)
end
turnOnWifi = L3
function L3()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L2 = 0
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "wifiIndex"
  L4, L5 = L4(L5)
  L3 = L3(L4, L5)
  if L3 and L3 < 3 then
    L4 = L0.turnWifiOff
    L5 = L3
    L4(L5)
  else
    L2 = 1523
  end
  if L2 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L2
    L4 = L4(L5)
    L1.msg = L4
  end
  L1.code = L2
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L1
  L4(L5)
end
shutDownWifi = L3
function L3(A0)
  local L1, L2, L3
  L1 = io
  L1 = L1.open
  L2 = A0
  L3 = "r"
  L1 = L1(L2, L3)
  if L1 == nil then
    L2 = false
    return L2
  end
  L3 = L1
  L2 = L1.close
  L2(L3)
  L2 = true
  return L2
end
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39, L40
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = {}
  L4 = 0
  L5 = tonumber
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "wifiIndex"
  L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39, L40 = L6(L7)
  L5 = L5(L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39, L40)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "ssid"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "pwd"
  L7 = L7(L8)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "encryption"
  L8 = L8(L9)
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "channel"
  L9 = L9(L10)
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "bandwidth"
  L10 = L10(L11)
  L11 = _UPVALUE0_
  L11 = L11.formvalue
  L12 = "txpwr"
  L11 = L11(L12)
  L12 = _UPVALUE0_
  L12 = L12.formvalue
  L13 = "hidden"
  L12 = L12(L13)
  L13 = _UPVALUE0_
  L13 = L13.formvalue
  L14 = "on"
  L13 = L13(L14)
  L14 = _UPVALUE0_
  L14 = L14.formvalue
  L15 = "txbf"
  L14 = L14(L15)
  L15 = _UPVALUE0_
  L15 = L15.formvalue
  L16 = "weakenable"
  L15 = L15(L16)
  L16 = _UPVALUE0_
  L16 = L16.formvalue
  L17 = "weakthreshold"
  L16 = L16(L17)
  L17 = _UPVALUE0_
  L17 = L17.formvalue
  L18 = "kickthreshold"
  L17 = L17(L18)
  L18 = _UPVALUE0_
  L18 = L18.formvalue
  L19 = "ax"
  L18 = L18(L19)
  L19 = _UPVALUE0_
  L19 = L19.formvalue
  L20 = "wifimode"
  L19 = L19(L20)
  L20 = require
  L21 = "luci.util"
  L20 = L20(L21)
  L21 = L20.trim
  L22 = L20.exec
  L23 = "getIspCapability wl_wifi5_vap 2>/dev/null"
  L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39, L40 = L22(L23)
  L21 = L21(L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39, L40)
  if L13 ~= nil then
    L22 = tonumber
    L23 = L13
    L22 = L22(L23)
    L13 = L22
  end
  if L5 == 1 then
    if L9 then
      L22 = L0.check
      L23 = 0
      L24 = L0.KEY_FUNC_2G_CHANNEL
      L25 = L9
      L22(L23, L24, L25)
    end
    if L11 then
      L22 = L0.check
      L23 = 0
      L24 = L0.KEY_FUNC_2G_SIGNAL
      L25 = L11
      L22(L23, L24, L25)
    end
  elseif L5 == 2 then
    if L9 then
      L22 = L0.check
      L23 = 0
      L24 = L0.KEY_FUNC_5G_CHANNEL
      L25 = L9
      L22(L23, L24, L25)
    end
    if L11 then
      L22 = L0.check
      L23 = 0
      L24 = L0.KEY_FUNC_5G_SIGNAL
      L25 = L11
      L22(L23, L24, L25)
    end
  elseif L5 == 3 then
  end
  L22 = true
  L23 = false
  if L5 == 1 then
    L24 = L1.getWifiBasicInfo
    L25 = L5
    L24 = L24(L25)
    L25 = L24.password
    if L25 == nil then
      L24.password = ""
    end
    L25 = L24.ssid
    if L25 == L6 then
      L25 = L24.password
      if L25 == L7 then
        L25 = L24.encryption
        if L25 == L8 then
          goto lbl_145
        end
      end
    end
    L23 = true
  end
  ::lbl_145::
  L24 = L1.checkSSID
  L25 = L6
  L26 = 31
  L24 = L24(L25, L26)
  L4 = L24
  if L4 == 0 then
    if L5 == 1 or L5 == 2 then
      L24 = L1.setWifiBasicInfo
      L25 = L5
      L26 = L6
      L27 = L7
      L28 = L8
      L29 = L9
      L30 = L11
      L31 = L12
      L32 = L13
      L33 = L10
      L34 = nil
      L35 = L14
      L36 = L15
      L37 = L16
      L38 = L17
      L39 = L18
      L40 = L19
      L24 = L24(L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39, L40)
      if L24 == false then
        L25 = L1.checkWifiPasswd
        L26 = L7
        L27 = L8
        L25 = L25(L26, L27)
        L4 = L25
      end
      if L21 ~= nil and L21 == "1" then
        L25 = nil
        L26 = L6
        L27 = L26
        L28 = "-WiFi5"
        L25 = L27 .. L28
        L27 = string
        L27 = L27.len
        L28 = L25
        L27 = L27(L28)
        if 31 < L27 then
          L27 = string
          L27 = L27.sub
          L28 = L26
          L29 = 1
          L30 = #L26
          L31 = string
          L31 = L31.len
          L32 = L26
          L31 = L31(L32)
          L31 = L31 - 25
          L30 = L30 - L31
          L27 = L27(L28, L29, L30)
          L26 = L27
          L27 = L26
          L28 = "-WiFi5"
          L25 = L27 .. L28
        end
        L27 = logger
        L27 = L27.log
        L28 = 6
        L29 = "ssid="
        L30 = L6
        L31 = " wifi5_ssid="
        L32 = L25
        L29 = L29 .. L30 .. L31 .. L32
        L27(L28, L29)
        L27 = L1.setWifi5BackupInfo
        L28 = L5
        L29 = L25
        L30 = L7
        L31 = L8
        L32 = L12
        L27 = L27(L28, L29, L30, L31, L32)
        L24 = L27
        if L24 == false then
          L27 = L1.checkWifiPasswd
          L28 = L7
          L29 = L8
          L27 = L27(L28, L29)
          L4 = L27
        end
      end
    elseif L5 == 3 then
      L22 = true
    end
  end
  if L4 ~= 0 then
    L24 = _UPVALUE1_
    L24 = L24.getErrorMessage
    L25 = L4
    L24 = L24(L25)
    L3.msg = L24
  end
  L3.code = L4
  L24 = _UPVALUE0_
  L24 = L24.write_json
  L25 = L3
  L24(L25)
  if L4 == 0 then
    L24 = _UPVALUE0_
    L24 = L24.close
    L24()
    if L22 then
      if L23 then
        L24 = L2.forkRestartWifiNotify
        L24()
      else
        L24 = L2.forkRestartWifiNotifyButMiio
        L24()
      end
    end
  end
end
setWifi = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = {}
  L4 = 0
  L5 = tonumber
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "wifiIndex"
  L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33 = L6(L7)
  L5 = L5(L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "ssid"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "pwd"
  L7 = L7(L8)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "encryption"
  L8 = L8(L9)
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "channel"
  L9 = L9(L10)
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "bandwidth"
  L10 = L10(L11)
  L11 = _UPVALUE0_
  L11 = L11.formvalue
  L12 = "txpwr"
  L11 = L11(L12)
  L12 = _UPVALUE0_
  L12 = L12.formvalue
  L13 = "hidden"
  L12 = L12(L13)
  L13 = _UPVALUE0_
  L13 = L13.formvalue
  L14 = "on"
  L13 = L13(L14)
  L14 = _UPVALUE0_
  L14 = L14.formvalue
  L15 = "txbf"
  L14 = L14(L15)
  L15 = _UPVALUE0_
  L15 = L15.formvalue
  L16 = "ax"
  L15 = L15(L16)
  if L13 ~= nil then
    L16 = tonumber
    L17 = L13
    L16 = L16(L17)
    L13 = L16
  end
  if L9 == "0" then
    L10 = "0"
  end
  if L5 == 1 then
    if L9 then
      L16 = L0.check
      L17 = 0
      L18 = L0.KEY_FUNC_2G_CHANNEL
      L19 = L9
      L16(L17, L18, L19)
    end
    if L11 then
      L16 = L0.check
      L17 = 0
      L18 = L0.KEY_FUNC_2G_SIGNAL
      L19 = L11
      L16(L17, L18, L19)
    end
  elseif L5 == 2 then
    if L9 then
      L16 = L0.check
      L17 = 0
      L18 = L0.KEY_FUNC_5G_CHANNEL
      L19 = L9
      L16(L17, L18, L19)
    end
    if L11 then
      L16 = L0.check
      L17 = 0
      L18 = L0.KEY_FUNC_5G_SIGNAL
      L19 = L11
      L16(L17, L18, L19)
    end
  elseif L5 == 3 then
  end
  L16 = true
  L17 = false
  if L5 == 1 then
    L18 = L1.getWifiBasicInfo
    L19 = L5
    L18 = L18(L19)
    L19 = L18.password
    if L19 == nil then
      L18.password = ""
    end
    L19 = L18.ssid
    if L19 == L6 then
      L19 = L18.password
      if L19 == L7 then
        L19 = L18.encryption
        if L19 == L8 then
          goto lbl_124
        end
      end
    end
    L17 = true
  end
  ::lbl_124::
  L18 = L1.checkSSID
  L19 = L6
  L20 = 31
  L18 = L18(L19, L20)
  L4 = L18
  if L4 == 0 then
    if L5 == 1 or L5 == 2 then
      L18 = L1.setWifiBasicInfo
      L19 = L5
      L20 = L6
      L21 = L7
      L22 = L8
      L23 = L9
      L24 = L11
      L25 = L12
      L26 = L13
      L27 = L10
      L28 = nil
      L29 = L14
      L30, L31, L32 = nil, nil, nil
      L33 = L15
      L18 = L18(L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33)
      if L18 == false then
        L19 = L1.checkWifiPasswd
        L20 = L7
        L21 = L8
        L19 = L19(L20, L21)
        L4 = L19
      end
    elseif L5 == 3 then
      L18 = require
      L19 = "xiaoqiang.module.XQGuestWifi"
      L18 = L18(L19)
      L19 = require
      L20 = "xiaoqiang.module.XQWifiShare"
      L19 = L19(L20)
      L20 = L18.setGuestWifi
      L21 = 1
      L22 = L6
      L23 = L8
      L24 = L7
      L25 = 1
      L26 = L13
      L20 = L20(L21, L22, L23, L24, L25, L26)
      if L20 == false then
        L4 = 1615
      else
        if L8 ~= "none" and L13 == 1 then
          L21 = L19.wifi_share_switch
          L22 = 0
          L21(L22)
        end
        L16 = false
      end
    end
  end
  if L4 ~= 0 then
    L18 = _UPVALUE1_
    L18 = L18.getErrorMessage
    L19 = L4
    L18 = L18(L19)
    L3.msg = L18
  end
  L3.code = L4
  L18 = _UPVALUE0_
  L18 = L18.write_json
  L19 = L3
  L18(L19)
end
setWifiWithoutRestart = L4
function L4(A0)
  local L1, L2, L3, L4
  L1 = {}
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "on"
  L4 = A0
  L3 = L3 .. L4
  L2 = L2(L3)
  L1.on = L2
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "ssid"
  L4 = A0
  L3 = L3 .. L4
  L2 = L2(L3)
  L1.ssid = L2
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "pwd"
  L4 = A0
  L3 = L3 .. L4
  L2 = L2(L3)
  L2 = L2 or L2
  L1.passwd = L2
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "encryption"
  L4 = A0
  L3 = L3 .. L4
  L2 = L2(L3)
  L1.encryption = L2
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "channel"
  L4 = A0
  L3 = L3 .. L4
  L2 = L2(L3)
  L1.channel = L2
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "txpwr"
  L4 = A0
  L3 = L3 .. L4
  L2 = L2(L3)
  L1.txpwr = L2
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "hidden"
  L4 = A0
  L3 = L3 .. L4
  L2 = L2(L3)
  L1.hidden = L2
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "bandwidth"
  L4 = A0
  L3 = L3 .. L4
  L2 = L2(L3)
  L1.bw = L2
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "wifimode"
  L4 = A0
  L3 = L3 .. L4
  L2 = L2(L3)
  L2 = L2 or L2
  L1.wifimode = L2
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "bsd"
  L2 = L2(L3)
  L2 = L2 or L2
  L3 = L1.on
  if L3 == nil then
    if L2 == "1" then
      L1.on = 1
      return L1
    else
      return L1
    end
  else
    L3 = tonumber
    L4 = L1.on
    L3 = L3(L4)
    L1.on = L3
    return L1
  end
end
get_http_formvalue_by_index = L4
function L4(A0)
  local L1, L2, L3, L4, L5
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = 0
  L3 = A0.ssid
  if L3 then
    L3 = string
    L3 = L3.len
    L4 = A0.ssid
    L3 = L3(L4)
    if L3 ~= 0 then
      goto lbl_16
    end
  end
  L2 = 0
  goto lbl_32
  ::lbl_16::
  L3 = string
  L3 = L3.len
  L4 = A0.ssid
  L3 = L3(L4)
  if 31 < L3 then
    L2 = 1572
  else
    L3 = A0.on
    if L3 == 1 then
      L3 = L1.checkWifiPasswd
      L4 = A0.passwd
      L5 = A0.encryption
      L3 = L3(L4, L5)
      L2 = L3
    end
  end
  ::lbl_32::
  return L2
end
check_wl_setting_info = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15
  L0 = require
  L1 = "luci.model.uci"
  L0 = L0(L1)
  L0 = L0.cursor
  L0 = L0()
  L1 = require
  L2 = "xiaoqiang.util.XQNfcUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQWifiUtil"
  L2 = L2(L3)
  L3 = {}
  L4 = {}
  L5 = {}
  L6 = 0
  L8 = L0
  L7 = L0.get
  L9 = "misc"
  L7 = L7(L8, L9, L10, L11)
  L7 = L7 or L7
  L9 = L0
  L8 = L0.get
  L8 = L8(L9, L10, L11, L12)
  L8 = L8 or L8
  L9 = L0.get
  L13 = "ifname_5GH"
  L9 = L9(L10, L11, L12, L13)
  L9 = L9 or L9
  L3 = L10
  for L13, L14 in L10, L11, L12 do
    L15 = L14.ifname
    if L15 == L8 then
      L15 = L14.status
      if L15 == "1" then
        L4 = L14
        L6 = 1
        break
      end
    end
  end
  if L6 == 0 then
    for L13, L14 in L10, L11, L12 do
      L15 = L14.ifname
      if L15 == L9 then
        L15 = L14.status
        if L15 == "1" then
          L4 = L14
          L6 = 1
          break
        end
      end
    end
  end
  if L6 == 0 then
    for L13, L14 in L10, L11, L12 do
      L15 = L14.ifname
      if L15 == L7 then
        L15 = L14.status
        if L15 == "1" then
          L4 = L14
          L6 = 1
          break
        end
      end
    end
  end
  if L6 == 0 then
    for L13, L14 in L10, L11, L12 do
      L15 = L14.status
      if L15 == "1" then
        L4 = L14
        L6 = 1
        break
      end
    end
  end
  L5.code = 0
  L13 = "misc"
  L14 = "nfc"
  L15 = "nfc_support"
  L13, L14, L15 = L11(L12, L13, L14, L15)
  L5.nfc_support = L10
  L13 = "nfc"
  L14 = "nfc"
  L15 = "nfc_enable"
  L13, L14, L15 = L11(L12, L13, L14, L15)
  L5.nfc_enable = L10
  if L6 == 1 then
    if L10 == "ccmp" then
      L5.wpa3_only = 1
  end
  else
    L5.wpa3_only = 0
  end
  L10(L11)
end
getNfcInfo = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.model.uci"
  L1 = L1(L2)
  L1 = L1.cursor
  L1 = L1()
  L2 = require
  L3 = "xiaoqiang.util.XQNfcUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "nfc_enable"
  L4 = L4(L5)
  L5 = {}
  L5.code = 0
  L7 = L1
  L6 = L1.set
  L8 = "nfc"
  L9 = "nfc"
  L10 = "nfc_enable"
  L11 = L4
  L6(L7, L8, L9, L10, L11)
  L7 = L1
  L6 = L1.commit
  L8 = "nfc"
  L6(L7, L8)
  if L4 == "0" then
    L6 = L2.nfc_disable
    L6()
  else
    L6 = L2.nfc_update
    L6()
  end
  L6 = L3.isMeshRe
  L6 = L6()
  if L6 then
    L6 = L2.nfc_mesh_sync_disable
    L6()
  else
    L6 = L3.isMeshCap
    L6 = L6()
    if L6 then
      L6 = L3.GenRandID
      L7 = 8
      L6 = L6(L7)
      L8 = L1
      L7 = L1.set
      L9 = "nfc"
      L10 = "nfc"
      L11 = "config_id"
      L12 = L6
      L7(L8, L9, L10, L11, L12)
      L7 = {}
      L7.cmd = "sync_nfc"
      L8 = tostring
      L9 = L4
      L8 = L8(L9)
      L7.nfc_enable = L8
      L8 = require
      L9 = "luci.json"
      L8 = L8(L9)
      L9 = L8.encode
      L10 = L7
      L9 = L9(L10)
      L10 = L0.log
      L11 = 6
      L12 = "CAP call RE do action msg:"
      L13 = L9
      L12 = L12 .. L13
      L10(L11, L12)
      L10 = L3.forkExec
      L11 = "/sbin/whc_to_re_common_api.sh action '"
      L12 = L9
      L13 = "'"
      L11 = L11 .. L12 .. L13
      L10(L11)
    end
  end
  L7 = L1
  L6 = L1.commit
  L8 = "nfc"
  L6(L7, L8)
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L5
  L6(L7)
end
setNfcStatus = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10
  L0 = require
  L1 = "luci.model.uci"
  L0 = L0(L1)
  L0 = L0.cursor
  L0 = L0()
  L1 = require
  L2 = "xiaoqiang.util.XQSysUtil"
  L1 = L1(L2)
  L2 = L1.isMLOSupport
  L2 = L2()
  L3 = {}
  L4 = _UPVALUE0_
  L5 = L4
  L4 = L4.get
  L6 = "misc"
  L7 = "mld"
  L8 = "hostap"
  L4 = L4(L5, L6, L7, L8)
  L4 = L4 or L4
  L3.code = 0
  if L2 then
    L5 = 1
    if L5 then
      goto lbl_28
    end
  end
  L5 = 0
  ::lbl_28::
  L3.mlo_support = L5
  if L4 == "NULL" then
    L3.mlo_enable = 0
  else
    L5 = tonumber
    L7 = L0
    L6 = L0.get
    L8 = "wireless"
    L9 = L4
    L10 = "mlo_enable"
    L6, L7, L8, L9, L10 = L6(L7, L8, L9, L10)
    L5 = L5(L6, L7, L8, L9, L10)
    L5 = L5 or L5
    L3.mlo_enable = L5
  end
  L5 = _UPVALUE1_
  L5 = L5.write_json
  L6 = L3
  L5(L6)
end
getHostapMLO = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "mlo_enable"
  L4, L5 = L4(L5)
  L3 = L3(L4, L5)
  if L3 == 1 then
    L4 = L0.mlo_hostap_enable
    L4()
  else
    L4 = L0.mlo_hostap_disable
    L4()
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L2
  L4(L5)
  L4 = L1.forkRestartWifiNotify
  L4()
end
setHostapMLO = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L0 = require
  L1 = "luci.model.uci"
  L0 = L0(L1)
  L0 = L0.cursor
  L0 = L0()
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = {}
  L3 = {}
  L4 = {}
  L5 = 0
  L7 = L0
  L6 = L0.get
  L8 = "misc"
  L6 = L6(L7, L8, L9, L10)
  L6 = L6 or L6
  L8 = L0
  L7 = L0.get
  L7 = L7(L8, L9, L10, L11)
  L7 = L7 or L7
  L8 = L0.get
  L12 = "ifname_5GH"
  L8 = L8(L9, L10, L11, L12)
  L8 = L8 or L8
  L2 = L9
  for L12, L13 in L9, L10, L11 do
    L14 = L13.ifname
    if L14 == L7 then
      L14 = L13.status
      if L14 == "1" then
        L3 = L13
        L5 = 1
        break
      end
    end
  end
  if L5 == 0 then
    for L12, L13 in L9, L10, L11 do
      L14 = L13.ifname
      if L14 == L8 then
        L14 = L13.status
        if L14 == "1" then
          L3 = L13
          L5 = 1
          break
        end
      end
    end
  end
  if L5 == 0 then
    for L12, L13 in L9, L10, L11 do
      L14 = L13.ifname
      if L14 == L6 then
        L14 = L13.status
        if L14 == "1" then
          L3 = L13
          L5 = 1
          break
        end
      end
    end
  end
  if L5 == 0 then
    for L12, L13 in L9, L10, L11 do
      L14 = L13.status
      if L14 == "1" then
        L3 = L13
        L5 = 1
        break
      end
    end
  end
  L4.code = 0
  L12 = "wireless"
  L13 = "wps"
  L14 = "enable"
  L12, L13, L14 = L10(L11, L12, L13, L14)
  L4.wps_enable = L9
  if L5 == 1 then
    if L9 == "ccmp" then
      L4.wpa3_only = 1
  end
  else
    L4.wpa3_only = 0
  end
  L9(L10)
end
getWpsInfo = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39, L40, L41, L42, L43, L44, L45, L46, L47, L48, L49
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQSysUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.DedicatedWirelessBackhaulUtil"
  L4 = L4(L5)
  L5 = require
  L6 = "xiaoqiang.XQFeatures"
  L5 = L5(L6)
  L5 = L5.FEATURES
  L6 = L1.getAllWifiInfo
  L6 = L6()
  L7 = L1.get_wlan_count
  L7 = L7()
  L8 = L1.getWifiDevNames
  L8 = L8()
  L9 = L1.get_ssid_len_limit_2g
  L9 = L9()
  L10 = {}
  L11 = {}
  L12 = {}
  L13 = {}
  L14 = 0
  L15 = 0
  L16 = _UPVALUE0_
  L16 = L16.formvalue
  L17 = "user_confirm"
  L16 = L16(L17)
  L17 = require
  L18 = "luci.util"
  L17 = L17(L18)
  L18 = L17.trim
  L19 = L17.exec
  L20 = "getIspCapability wl_wifi5_vap 2>/dev/null"
  L19, L20, L21, L22, L23, L24, L28, L32, L33, L34, L35, L36, L37, L38, L39, L40, L41, L42, L43, L44, L45, L46, L47, L48, L49 = L19(L20)
  L18 = L18(L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39, L40, L41, L42, L43, L44, L45, L46, L47, L48, L49)
  L19 = require
  L20 = "luci.model.uci"
  L19 = L19(L20)
  L19 = L19.cursor
  L19 = L19()
  L21 = L19
  L20 = L19.get
  L22 = "misc"
  L23 = "mesh"
  L24 = "easymesh"
  L20 = L20(L21, L22, L23, L24)
  L20 = L20 or L20
  L21 = _UPVALUE0_
  L21 = L21.formvalue
  L22 = "ver"
  L21 = L21(L22)
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "bsd"
  L22 = L22(L23)
  L23 = L6[1]
  L23 = L23.bsd
  L24 = _UPVALUE0_
  L24 = L24.formvalue
  L24 = L24(L25)
  if L24 then
    if L25 == "table" then
      L24 = L24[1]
    end
  end
  L24 = L25
  if L16 == nil then
    L16 = "1"
  end
  for L28 = L25, L26, L27 do
    L12[L28] = L29
    if L29 then
      if L29 ~= nil then
        if L29 == false then
          L29.channel = 0
        end
      end
    end
  end
  if L20 ~= nil then
    if L25 == 1 then
      if L25 then
        L25.on = 1
        L25.on = 1
      end
    end
  end
  if L22 ~= nil then
    if L25 == 1 then
      if L23 ~= nil then
        if L25 ~= 0 then
          goto lbl_144
        end
      end
      L25.on = 1
      ::lbl_144::
      for L28 = L25, L26, L27 do
        if L29 then
          L29.on = L30
          L29.ssid = L30
          L29.encryption = L30
          L29.passwd = L30
          L29.hidden = L30
        end
      end
      if L24 == nil or not L24 then
      end
      if L23 ~= nil then
      end
      if L26 == 0 and L25 == 1 then
        L26()
      end
      L28 = L0.KEY_FUNC_WIFI_BSD
      L26(L27, L28, L29)
    end
  end
  if L23 ~= nil then
    if L25 == 1 and L22 ~= nil then
      if L25 == 0 then
        if L21 == nil then
          L25.on = 1
          for L28 = L25, L26, L27 do
            if L29 then
              L29.on = L30
              if L28 == 2 then
                if L29 ~= "" then
                  if not L30 then
                    goto lbl_249
                  end
                end
                L32 = L12[1]
                L32 = L32.ssid
                L33 = "_5G"
                L32 = L32 .. L33
                L33 = 1
                L34 = 31
                L30.ssid = L31
                goto lbl_275
                ::lbl_249::
                L32 = L12[1]
                L32 = L32.ssid
                L33 = "-5G"
                L32 = L32 .. L33
                L33 = 1
                L34 = 31
                L30.ssid = L31
              elseif L28 == 3 then
                L32 = L1.get5G2BandSuffix
                L32 = L32()
                L32 = 1
                L33 = 31
                L29.ssid = L30
              end
              ::lbl_275::
              L29.encryption = L30
              L29.passwd = L30
              L29.hidden = L30
            end
          end
        end
        L25()
      end
    end
  end
  for L28 = L25, L26, L27 do
    if L29 then
      L13 = L29
      if 0 < L13 then
        L11[L29] = L30
        L29.code = L13
        L29.msg = L30
        L14 = L13
      end
    end
  end
  if L25 then
    if L25 > L26 then
      L11[L25] = L26
      L25.code = 1572
      L25.msg = L26
      L14 = 1572
    end
  end
  L10.code = L14
  if L14 ~= 0 then
    L10.msg = L25
    L10.errorDetails = L11
    L25(L26)
    return
  end
  if L22 ~= nil then
    if L25 ~= 0 then
      goto lbl_392
    end
  end
  for L28 = L25, L26, L27 do
    if L29 == 1 then
      L32 = L12[L28]
      L32 = L32.channel
      L33 = L12[L28]
      L33 = L33.bw
      cac_time_new = L29
      if L15 < L29 then
        L15 = cac_time_new
      end
    end
  end
  goto lbl_393
  ::lbl_392::
  L15 = 0
  ::lbl_393::
  if L15 == 600 and L16 == "0" then
    L10.need_confirm = 1
    L10.cac_time = L15
    L10.code = 0
    L25(L26)
    return L25
  end
  L28 = "weakthreshold"
  L28 = _UPVALUE0_
  L28 = L28.formvalue
  L28 = L28(L29)
  if L4 then
    if L29 then
      L32 = L22
      L29(L30, L31, L32)
    end
  end
  if L29 then
    if L29 == "1" then
      if L29 == 1 then
        if L29 == 1 then
          if L29 == L30 then
            if L29 == L30 then
              if L29 == L30 then
                L22 = 1
              end
            end
          end
        end
      end
    end
  end
  for L32 = L29, L30, L31 do
    L33 = L12[L32]
    if L33 then
      L33 = L1.setWifiBasicInfo
      L34 = L32
      L35 = L12[L32]
      L35 = L35.ssid
      L36 = L12[L32]
      L36 = L36.passwd
      L37 = L12[L32]
      L37 = L37.encryption
      L38 = L12[L32]
      L38 = L38.channel
      L39 = L12[L32]
      L39 = L39.txpwr
      L40 = L12[L32]
      L40 = L40.hidden
      L41 = L12[L32]
      L41 = L41.on
      L42 = L12[L32]
      L42 = L42.bw
      L43 = L22
      L44 = L25
      L45 = L26
      L46 = L27
      L47 = L28
      L48 = L24
      L49 = L12[L32]
      L49 = L49.wifimode
      L33(L34, L35, L36, L37, L38, L39, L40, L41, L42, L43, L44, L45, L46, L47, L48, L49)
      if L18 ~= nil and L18 == "1" then
        L33 = nil
        L34 = L12[L32]
        L34 = L34.ssid
        L35 = L34
        L36 = "-WiFi5"
        L33 = L35 .. L36
        L35 = string
        L35 = L35.len
        L36 = L33
        L35 = L35(L36)
        if 31 < L35 then
          L35 = string
          L35 = L35.sub
          L36 = L34
          L37 = 1
          L38 = #L34
          L39 = string
          L39 = L39.len
          L40 = L34
          L39 = L39(L40)
          L39 = L39 - 25
          L38 = L38 - L39
          L35 = L35(L36, L37, L38)
          L34 = L35
          L35 = L34
          L36 = "-WiFi5"
          L33 = L35 .. L36
        end
        L35 = logger
        L35 = L35.log
        L36 = 6
        L37 = "ssid="
        L38 = L34
        L39 = " wifi5_ssid="
        L40 = L33
        L37 = L37 .. L38 .. L39 .. L40
        L35(L36, L37)
        L35 = L1.setWifi5BackupInfo
        L36 = L32
        L37 = L33
        L38 = L12[L32]
        L38 = L38.passwd
        L39 = L12[L32]
        L39 = L39.encryption
        L40 = L12[L32]
        L40 = L40.hidden
        L35(L36, L37, L38, L39, L40)
      end
    end
  end
  L10.cac_time = L15
  if L29 == 0 then
    L29(L30)
  end
  L29(L30)
  L29()
  L29()
end
setAllWifi = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = L0.checkWiredLink
  L1 = L1()
  L2 = {}
  L2.code = 0
  L2.link = L1
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
checkWiredLink = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = L0.getLanWanInfo
  L2 = "lan"
  L1 = L1(L2)
  L2 = L0.getLanLinkList
  L2 = L2()
  L3 = {}
  L3.code = 0
  L3.info = L1
  L3.linkList = L2
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L3
  L4(L5)
end
getLanInfo = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQPortServiceUtil"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "wan_name"
  L2 = L2(L3)
  L2 = L2 or L2
  L3 = L1.PS_WAN_SERVICE_NAME_MAP
  L3 = L3[L2]
  L2 = L3 or L2
  if not L3 then
    L2 = "wan"
  end
  L3 = L0.getLanWanInfo
  L4 = L2
  L3 = L3(L4)
  L4 = {}
  L4.code = 0
  L4.info = L3
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L4
  L5(L6)
end
getWanInfo = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQDeviceUtil"
  L0 = L0(L1)
  L1 = L0.getWanLanNetworkStatistics
  L2 = "wan"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L2.statistics = L1
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
getWanStatistics = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQDeviceUtil"
  L0 = L0(L1)
  L1 = L0.getDevNetStatisticsList
  L1 = L1()
  L2 = {}
  L2.code = 0
  L2.statistics = L1
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
getDevsStatistics = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "xiaoqiang.util.XQDeviceUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = {}
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "mac"
  L3 = L3(L4)
  L4 = L0.getDevNetStatisticsDict
  L4 = L4()
  L5 = L1.macFormat
  L6 = L3
  L5 = L5(L6)
  L5 = L4[L5]
  L2.code = 0
  L2.statistics = L5
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L2
  L6(L7)
end
getDevStatistics = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.XQPreference"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQConfigs"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = luci
  L4 = L4.model
  L4 = L4.uci
  L4 = L4.cursor
  L4 = L4()
  L5 = {}
  L6 = 0
  L7 = L0.getAutoWanType
  L7 = L7()
  if L7 == false then
    L6 = 1524
  else
    L5.wanType = L7
    L9 = L4
    L8 = L4.get
    L10 = "network"
    L11 = "wan"
    L12 = "username"
    L8 = L8(L9, L10, L11, L12)
    L5.pppoeName = L8
    L9 = L4
    L8 = L4.get
    L10 = "network"
    L11 = "wan"
    L12 = "password"
    L8 = L8(L9, L10, L11, L12)
    L5.pppoePassword = L8
    L8 = L3.isSupport160Mhz
    L8 = L8()
    L5.support160Mhz = L8
  end
  if L6 ~= 0 then
    L8 = _UPVALUE0_
    L8 = L8.getErrorMessage
    L9 = L6
    L8 = L8(L9)
    L5.msg = L8
  end
  L5.code = L6
  L8 = _UPVALUE1_
  L8 = L8.write_json
  L9 = L5
  L8(L9)
end
getAutoWanType = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.util"
  L1 = L1(L2)
  L2 = {}
  L3 = 0
  L4 = os
  L4 = L4.execute
  L5 = "/etc/init.d/autowan off"
  L4(L5)
  L4 = os
  L4 = L4.execute
  L5 = "/etc/init.d/network reload_warm 2 eth0; sleep 1"
  L4(L5)
  L4 = L1.exec
  L5 = "ssdk_sh port linkstatus get 2 | grep ENABLE | wc -l"
  L4 = L4(L5)
  L5 = logger
  L5 = L5.log
  L6 = 6
  L7 = "==== getAutoWanLink() get eth0 link: "
  L8 = L1.trim
  L9 = L4
  L8 = L8(L9)
  L7 = L7 .. L8
  L5(L6, L7)
  L5 = L1.trim
  L6 = L4
  L5 = L5(L6)
  L2.code = L5
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L2
  L5(L6)
end
getAutoWanLink = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = {}
  L2 = L0.getLanDHCPService
  L2 = L2()
  L1.code = 0
  L1.info = L2
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
getLanDhcp = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = tonumber
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "wifiIndex"
  L2, L3, L4 = L2(L3)
  L1 = L1(L2, L3, L4)
  L2 = {}
  L2.code = 0
  L3 = L0.getDefaultWifiChannels
  L4 = L1
  L3 = L3(L4)
  L2.list = L3
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
getChannels = L4
function L4()
  local L0, L1, L2
  L0 = luci
  L0 = L0.sys
  L0 = L0.call
  L1 = "env -i /sbin/ifdown wan"
  L0(L1)
  L0 = {}
  L0.code = 0
  L1 = _UPVALUE0_
  L1 = L1.write_json
  L2 = L0
  L1(L2)
end
wanDown = L4
function L4()
  local L0, L1, L2
  L0 = luci
  L0 = L0.sys
  L0 = L0.call
  L1 = "env -i /sbin/ifup wan"
  L0(L1)
  L0 = {}
  L0.code = 0
  L1 = _UPVALUE0_
  L1 = L1.write_json
  L2 = L0
  L1(L2)
end
wanUp = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15
  L0 = require
  L1 = "xiaoqiang.XQFeatures"
  L0 = L0(L1)
  L0 = L0.FEATURES
  L1 = require
  L2 = "xiaoqiang.util.XQLanWanUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.cbi.datatypes"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQSysUtil"
  L4 = L4(L5)
  L5 = require
  L6 = "xiaoqiang.module.XQIPConflict"
  L5 = L5(L6)
  L6 = {}
  L7 = 0
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "ip"
  L8 = L8(L9)
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "mask"
  L9 = L9(L10)
  L10 = L3.ipaddr
  L11 = L8
  L10 = L10(L11)
  if not L10 then
    L7 = 1525
  else
    L10 = L5.lan_wan_ip_conflict_chk
    L11 = L8
    L12 = L9
    L10 = L10(L11, L12)
    if L10 then
      L7 = 1526
    else
      L10 = L1.checkLanIpMask
      L11 = L8
      L12 = L9
      L10 = L10(L11, L12)
      L7 = L10
    end
  end
  if L7 == 0 then
    L10 = L1.setLanIp
    L11 = L8
    L12 = L9
    L10(L11, L12)
    L10 = L5.lan_ip_conflict_resolution
    L10()
    L6.ip = L8
  else
    L10 = _UPVALUE1_
    L10 = L10.getErrorMessage
    L11 = L7
    L10 = L10(L11)
    L6.msg = L10
  end
  L6.code = L7
  L10 = _UPVALUE0_
  L10 = L10.write_json
  L11 = L6
  L10(L11)
  if L7 == 0 then
    L10 = _UPVALUE0_
    L10 = L10.close
    L10()
    L10 = L0.system
    L10 = L10.tr069
    if L10 then
      L10 = L0.system
      L10 = L10.tr069
      if L10 == "1" then
        L10 = nil
        L11 = L2.isMeshCap
        L11 = L11()
        if L11 then
          L11 = "sh /sbin/whc_to_re_common_api.sh gw_update "
          L12 = L8
          L13 = "; sleep 3;"
          L10 = L11 .. L12 .. L13
          L11 = logger
          L11 = L11.log
          L12 = 4
          L13 = string
          L13 = L13.format
          L14 = "@ activate cmd=%s!"
          L15 = L10
          L13, L14, L15 = L13(L14, L15)
          L11(L12, L13, L14, L15)
        end
        L11 = _UPVALUE0_
        L11 = L11.formvalue
        L12 = "is_tr069"
        L11 = L11(L12)
        if not L11 then
          if L10 then
            L12 = L10
            L13 = "reboot"
            L10 = L12 .. L13
          else
            L10 = "reboot"
          end
        end
        if L10 then
          L12 = L2.forkExec
          L13 = L10
          L12(L13)
        end
    end
    else
      L10 = L2.isMeshCap
      L10 = L10()
      if L10 then
        L10 = "sh /sbin/whc_to_re_common_api.sh gw_update "
        L11 = L8
        L12 = "; sleep 3; reboot"
        L10 = L10 .. L11 .. L12
        L11 = logger
        L11 = L11.log
        L12 = 4
        L13 = string
        L13 = L13.format
        L14 = "@ activate cmd=%s!"
        L15 = L10
        L13, L14, L15 = L13(L14, L15)
        L11(L12, L13, L14, L15)
        L11 = L2.forkExec
        L12 = L10
        L11(L12)
      else
        L10 = L2.forkReboot
        L10()
      end
    end
  end
end
setLanIp = L4
function L4(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQLanWanUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.XQFeatures"
  L4 = L4(L5)
  L4 = L4.FEATURES
  L5 = 0
  L6 = L3.isStrNil
  L7 = A0.wanType
  L6 = L6(L7)
  if L6 then
    L6 = L3.isStrNil
    L7 = A0.username
    L6 = L6(L7)
    if L6 then
      L6 = L3.isStrNil
      L7 = A0.password
      L6 = L6(L7)
      if L6 then
        L6 = L3.isStrNil
        L7 = A0.ip
        L6 = L6(L7)
        if L6 then
          L6 = L3.isStrNil
          L7 = A0.mask
          L6 = L6(L7)
          if L6 then
            L6 = L3.isStrNil
            L7 = A0.gw
            L6 = L6(L7)
            if L6 then
              L6 = L3.isStrNil
              L7 = A0.dns1
              L6 = L6(L7)
              if L6 then
                L6 = L3.isStrNil
                L7 = A0.dns2
                L6 = L6(L7)
                if L6 then
                  L6 = L3.isStrNil
                  L7 = A0.autoset
                  L6 = L6(L7)
                  if L6 then
                    L6 = L3.isStrNil
                    L7 = A0.special
                    L6 = L6(L7)
                    if L6 then
                      L6 = 1502
                      return L6
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  L6 = L3.isStrNil
  L7 = A0.dns1
  L6 = L6(L7)
  if L6 then
    L6 = L3.isStrNil
    L7 = A0.dns2
    L6 = L6(L7)
    if L6 then
      A0.autoset = "1"
  end
  else
    A0.autoset = "0"
  end
  L6 = L2.get_wanDevCfg
  L7 = A0.wanConn
  L8 = "Router"
  L9 = A0.wanType
  L10 = 4
  L6 = L6(L7, L8, L9, L10)
  A0.wanDevCfg = L6
  L6 = A0.wanDevCfg
  if not L6 then
    L6 = L1.log
    L7 = 3
    L8 = "_setWan: get wanDevCfg failed!"
    L6(L7, L8)
    L6 = 1529
    return L6
  end
  L6 = L4.system
  L6 = L6.international
  if L6 then
    L6 = L4.system
    L6 = L6.international
    if L6 == "1" then
      L6 = A0.wanType
      if L6 ~= "l2tp" then
        L6 = A0.wanType
        if L6 ~= "pptp" then
          goto lbl_221
        end
      end
      L6 = A0.client
      if L6 == "web" then
        L6 = L1.check
        L7 = 0
        L8 = L1.KEY_VALUE_NETWORK_VPN
        L9 = 1
        L6(L7, L8, L9)
      end
      L6 = L2.chkWan4VPN
      L7 = A0.wanType
      L8 = A0.vpnServer
      L9 = A0.vpnUsername
      L10 = A0.vpnPassword
      L6 = L6(L7, L8, L9, L10)
      L5 = L6
      if L5 == 0 then
        L6 = A0.baseWanType
        if L6 then
          L6 = A0.baseWanType
          if L6 == "dhcp" then
            L6 = L2.chkWan4Dhcp
            L7 = A0.autoset
            L8 = A0.dns1
            L9 = A0.dns2
            L6 = L6(L7, L8, L9)
            L5 = L6
          else
            L6 = A0.baseWanType
            if L6 == "static" then
              L6 = L2.chkWan4StaticIP
              L7 = A0.ipChk
              L8 = A0.ip
              L9 = A0.mask
              L10 = A0.gw
              L11 = A0.dns1
              L12 = A0.dns2
              L6 = L6(L7, L8, L9, L10, L11, L12)
              L5 = L6
            else
              L6 = A0.baseWanType
              if L6 == "pppoe" then
                L6 = L2.chkWan4PPPoE
                L7 = A0.autoset
                L8 = A0.username
                L9 = A0.password
                L10 = A0.mtu
                L11 = A0.dns1
                L12 = A0.dns2
                L13 = A0.service
                L6 = L6(L7, L8, L9, L10, L11, L12, L13)
                L5 = L6
              else
                L5 = 1537
              end
            end
          end
        else
          L5 = 1537
        end
        if L5 ~= 0 then
          return L5
        end
      else
        return L5
      end
      L6 = L2.setWan4VPN
      L7 = A0
      L6 = L6(L7)
      L5 = L6
      if L5 ~= 0 then
        return L5
      end
      L6 = A0.baseWanType
      if L6 == "dhcp" then
        L6 = L2.setWan4Dhcp
        L7 = A0
        L6 = L6(L7)
        L5 = L6
      else
        L6 = A0.baseWanType
        if L6 == "static" then
          L6 = L2.setWan4StaticIP
          L7 = A0
          L6 = L6(L7)
          L5 = L6
        else
          L6 = A0.baseWanType
          if L6 == "pppoe" then
            L6 = L3.isStrNil
            L7 = A0.dns1
            L6 = L6(L7)
            if L6 then
              L6 = L3.isStrNil
              L7 = A0.dns2
              L6 = L6(L7)
              if L6 then
                L6 = A0.autoset
                if L6 == "0" then
                  A0.autoset = "1"
                end
              end
            end
            L6 = L2.setWan4PPPoE
            L7 = A0
            L6 = L6(L7)
            L5 = L6
          end
        end
      end
      do return L5 end
      goto lbl_228
      ::lbl_221::
      L6 = L2.stopWan4VPN
      L7 = A0
      L6 = L6(L7)
      L5 = L6
      if L5 ~= 0 then
        return L5
      end
    end
  end
  ::lbl_228::
  L6 = A0.wanType
  if L6 == "pppoe" then
    L6 = A0.client
    if L6 == "web" then
      L6 = L1.check
      L7 = 0
      L8 = L1.KEY_VALUE_NETWORK_PPPOE
      L9 = 1
      L6(L7, L8, L9)
    end
    L6 = L2.chkWan4PPPoE
    L7 = A0.autoset
    L8 = A0.username
    L9 = A0.password
    L10 = A0.mtu
    L11 = A0.dns1
    L12 = A0.dns2
    L13 = A0.service
    L6 = L6(L7, L8, L9, L10, L11, L12, L13)
    L5 = L6
    if L5 == 0 then
      L6 = L3.isStrNil
      L7 = A0.dns1
      L6 = L6(L7)
      if L6 then
        L6 = L3.isStrNil
        L7 = A0.dns2
        L6 = L6(L7)
        if L6 then
          L6 = A0.autoset
          if L6 == "0" then
            A0.autoset = "1"
          end
        end
      end
      L6 = L2.setWan4PPPoE
      L7 = A0
      L6 = L6(L7)
      L5 = L6
    end
  else
    L6 = A0.wanType
    if L6 == "dhcp" then
      L6 = A0.client
      if L6 == "web" then
        L6 = L1.check
        L7 = 0
        L8 = L1.KEY_VALUE_NETWORK_DHCP
        L9 = 1
        L6(L7, L8, L9)
      end
      L6 = L2.chkWan4Dhcp
      L7 = A0.autoset
      L8 = A0.dns1
      L9 = A0.dns2
      L6 = L6(L7, L8, L9)
      L5 = L6
      if L5 == 0 then
        L6 = L2.setWan4Dhcp
        L7 = A0
        L6 = L6(L7)
        L5 = L6
      end
    else
      L6 = A0.wanType
      if L6 == "static" then
        L6 = A0.client
        if L6 == "web" then
          L6 = L1.check
          L7 = 0
          L8 = L1.KEY_VALUE_NETWORK_STATIC
          L9 = 1
          L6(L7, L8, L9)
        end
        L6 = L2.chkWan4StaticIP
        L7 = A0.ipChk
        L8 = A0.ip
        L9 = A0.mask
        L10 = A0.gw
        L11 = A0.dns1
        L12 = A0.dns2
        L6 = L6(L7, L8, L9, L10, L11, L12)
        L5 = L6
        if L5 == 0 then
          L6 = L2.setWan4StaticIP
          L7 = A0
          L6 = L6(L7)
          L5 = L6
        end
      end
    end
  end
  return L5
end
_setWan = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = {}
  L1 = {}
  L2 = require
  L3 = "xiaoqiang.util.XQPortServiceUtil"
  L2 = L2(L3)
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "wan_name"
  L3 = L3(L4)
  L3 = L3 or L3
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "client"
  L4 = L4(L5)
  L1.client = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "wanType"
  L4 = L4(L5)
  L1.wanType = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "pppoeName"
  L4 = L4(L5)
  L1.username = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "pppoePwd"
  L4 = L4(L5)
  L1.password = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "staticIp"
  L4 = L4(L5)
  L1.ip = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "staticMask"
  L4 = L4(L5)
  L1.mask = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "staticGateway"
  L4 = L4(L5)
  L1.gw = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "dns1"
  L4 = L4(L5)
  L1.dns1 = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "dns2"
  L4 = L4(L5)
  L1.dns2 = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "special"
  L4 = L4(L5)
  L4 = L4 or L4
  L1.special = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "mtu"
  L4 = L4(L5)
  L1.mtu = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "service"
  L4 = L4(L5)
  L1.service = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "autoset"
  L4 = L4(L5)
  L4 = L4 or L4
  L1.autoset = L4
  L4 = L2.PS_WAN_SERVICE_NAME_MAP
  L4 = L4[L3]
  L4 = L4 or L4
  L1.wanConn = L4
  L1.ipChk = "1"
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "baseWanType"
  L4 = L4(L5)
  L1.baseWanType = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "vpnServer"
  L4 = L4(L5)
  L1.vpnServer = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "vpnUsername"
  L4 = L4(L5)
  L1.vpnUsername = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "vpnPassword"
  L4 = L4(L5)
  L1.vpnPassword = L4
  L4 = _setWan
  L5 = L1
  L4 = L4(L5)
  L0.code = L4
  L4 = L0.code
  if L4 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L0.code
    L4 = L4(L5)
    L0.msg = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L0
  L4(L5)
end
setWan = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = {}
  L1 = {}
  L2 = require
  L3 = "xiaoqiang.util.XQPortServiceUtil"
  L2 = L2(L3)
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "wan_name"
  L3 = L3(L4)
  L3 = L3 or L3
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "client"
  L4 = L4(L5)
  L1.client = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "wanType"
  L4 = L4(L5)
  L1.wanType = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "pppoeName"
  L4 = L4(L5)
  L1.username = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "pppoePwd"
  L4 = L4(L5)
  L1.password = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "staticIp"
  L4 = L4(L5)
  L1.ip = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "staticMask"
  L4 = L4(L5)
  L1.mask = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "staticGateway"
  L4 = L4(L5)
  L1.gw = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "dns1"
  L4 = L4(L5)
  L1.dns1 = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "dns2"
  L4 = L4(L5)
  L1.dns2 = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "special"
  L4 = L4(L5)
  L4 = L4 or L4
  L1.special = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "mtu"
  L4 = L4(L5)
  L1.mtu = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "service"
  L4 = L4(L5)
  L1.service = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "autoset"
  L4 = L4(L5)
  L4 = L4 or L4
  L1.autoset = L4
  L4 = L2.PS_WAN_SERVICE_NAME_MAP
  L4 = L4[L3]
  L4 = L4 or L4
  L1.wanConn = L4
  L1.ipChk = "0"
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "baseWanType"
  L4 = L4(L5)
  L1.baseWanType = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "vpnServer"
  L4 = L4(L5)
  L1.vpnServer = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "vpnUsername"
  L4 = L4(L5)
  L1.vpnUsername = L4
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "vpnPassword"
  L4 = L4(L5)
  L1.vpnPassword = L4
  L4 = _setWan
  L5 = L1
  L4 = L4(L5)
  L0.code = L4
  L4 = L0.code
  if L4 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L0.code
    L4 = L4(L5)
    L0.msg = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L0
  L4(L5)
end
setWanNew = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQSecureUtil"
  L2 = L2(L3)
  L3 = 0
  L4 = {}
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "wanType"
  L5 = L5(L6)
  L6 = L2.parseCmdline
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "ipaddr"
  L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19 = L7(L8)
  L6 = L6(L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19)
  L7 = L2.parseCmdline
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "gw"
  L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19 = L8(L9)
  L7 = L7(L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19)
  L8 = L2.parseCmdline
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "prefix"
  L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19 = L9(L10)
  L8 = L8(L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19)
  L9 = L2.parseCmdline
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "assign"
  L10, L11, L12, L13, L14, L15, L16, L17, L18, L19 = L10(L11)
  L9 = L9(L10, L11, L12, L13, L14, L15, L16, L17, L18, L19)
  L10 = L2.parseCmdline
  L11 = _UPVALUE0_
  L11 = L11.formvalue
  L12 = "dns1"
  L11, L12, L13, L14, L15, L16, L17, L18, L19 = L11(L12)
  L10 = L10(L11, L12, L13, L14, L15, L16, L17, L18, L19)
  L11 = L2.parseCmdline
  L12 = _UPVALUE0_
  L12 = L12.formvalue
  L13 = "dns2"
  L12, L13, L14, L15, L16, L17, L18, L19 = L12(L13)
  L11 = L11(L12, L13, L14, L15, L16, L17, L18, L19)
  L12 = L1.isStrNil
  L13 = L5
  L12 = L12(L13)
  if L12 then
    L12 = L1.isStrNil
    L13 = L6
    L12 = L12(L13)
    if L12 then
      L12 = L1.isStrNil
      L13 = L7
      L12 = L12(L13)
      if L12 then
        L12 = L1.isStrNil
        L13 = L8
        L12 = L12(L13)
        if L12 then
          L3 = 1502
      end
    end
  end
  elseif L5 ~= "native" and L5 ~= "nat" and L5 ~= "static" and L5 ~= "off" then
    L3 = 1606
  else
    L12 = L0.setWan6
    L13 = L5
    L14 = L10
    L15 = L11
    L16 = L6
    L17 = L7
    L18 = L8
    L19 = L9
    L12(L13, L14, L15, L16, L17, L18, L19)
  end
  L4.code = L3
  if L3 ~= 0 then
    L12 = _UPVALUE1_
    L12 = L12.getErrorMessage
    L13 = L3
    L12 = L12(L13)
    L4.msg = L12
  end
  L12 = _UPVALUE0_
  L12 = L12.write_json
  L13 = L4
  L12(L13)
end
setWan6 = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39
  L0 = require
  L1 = "luci.model.uci"
  L0 = L0(L1)
  L0 = L0.cursor
  L0 = L0()
  L1 = require
  L2 = "luci.cbi.datatypes"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQLanWanUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQSecureUtil"
  L4 = L4(L5)
  L5 = 0
  L6 = {}
  L7 = {}
  L8 = 0
  L9 = 64
  L10 = "wan"
  L11 = L4.parseCmdline
  L12 = _UPVALUE0_
  L12 = L12.formvalue
  L13 = "wan6_name"
  L12 = L12(L13)
  L12 = L12 or L12
  L11 = L11(L12)
  L12 = tonumber
  L13 = _UPVALUE0_
  L13 = L13.formvalue
  L14 = "automode"
  L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L13(L14)
  L12 = L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L12 = L12 or L12
  L13 = L4.parseCmdline
  L14 = _UPVALUE0_
  L14 = L14.formvalue
  L15 = "ipv6_mode"
  L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L14(L15)
  L13 = L13(L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L14 = L4.parseCmdline
  L15 = _UPVALUE0_
  L15 = L15.formvalue
  L16 = "dns1"
  L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L15(L16)
  L14 = L14(L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L15 = L4.parseCmdline
  L16 = _UPVALUE0_
  L16 = L16.formvalue
  L17 = "dns2"
  L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L16(L17)
  L15 = L15(L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L16 = tonumber
  L17 = _UPVALUE0_
  L17 = L17.formvalue
  L18 = "nat6_enabled"
  L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L17(L18)
  L16 = L16(L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L16 = L16 or L16
  L17 = L4.parseCmdline
  L18 = _UPVALUE0_
  L18 = L18.formvalue
  L19 = "ip6prefix"
  L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L18(L19)
  L17 = L17(L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L18 = tonumber
  L19 = _UPVALUE0_
  L19 = L19.formvalue
  L20 = "ip6prefixlen"
  L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L19(L20)
  L18 = L18(L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L18 = L18 or L18
  L19 = L4.parseCmdline
  L20 = _UPVALUE0_
  L20 = L20.formvalue
  L21 = "ipv6DialAccount"
  L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L20(L21)
  L19 = L19(L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L20 = L4.parseCmdline
  L21 = _UPVALUE0_
  L21 = L21.formvalue
  L22 = "ipv6DialPassword"
  L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L21(L22)
  L20 = L20(L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L21 = tonumber
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "use_pppoev4"
  L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L22(L23)
  L21 = L21(L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L21 = L21 or L21
  L22 = L4.parseCmdline
  L23 = _UPVALUE0_
  L23 = L23.formvalue
  L24 = "ip6addr"
  L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L23(L24)
  L22 = L22(L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L23 = L4.parseCmdline
  L24 = _UPVALUE0_
  L24 = L24.formvalue
  L25 = "ip6gw"
  L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L24(L25)
  L23 = L23(L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L24 = L4.parseCmdline
  L25 = _UPVALUE0_
  L25 = L25.formvalue
  L26 = "peeraddr"
  L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L25(L26)
  L24 = L24(L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L25 = L4.parseCmdline
  L26 = _UPVALUE0_
  L26 = L26.formvalue
  L27 = "tunnelid"
  L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L26(L27)
  L25 = L25(L26, L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L26 = tonumber
  L27 = _UPVALUE0_
  L27 = L27.formvalue
  L28 = "use_dhcp"
  L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L27(L28)
  L26 = L26(L27, L28, L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
  L26 = L26 or L26
  L27 = string
  L27 = L27.find
  L28 = L11
  L29 = "_"
  L27 = L27(L28, L29)
  if L27 then
    L28 = string
    L28 = L28.len
    L29 = "wan6"
    L28 = L28(L29)
    if L27 > L28 then
      L28 = tonumber
      L29 = string
      L29 = L29.sub
      L30 = L11
      L31 = L27 + 1
      L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39 = L29(L30, L31)
      L28 = L28(L29, L30, L31, L32, L33, L34, L35, L36, L37, L38, L39)
      L8 = L28
    end
  end
  if L8 and 0 < L8 then
    L28 = L10
    L29 = "_"
    L30 = L8
    L10 = L28 .. L29 .. L30
  end
  L28 = L3.get_wanDevCfg
  L29 = L10
  L30 = "Router"
  L31 = nil
  L32 = 4
  L28 = L28(L29, L30, L31, L32)
  L30 = L0
  L29 = L0.get
  L31 = "ipv6"
  L32 = L11
  L33 = "permession"
  L29 = L29(L30, L31, L32, L33)
  L29 = L29 or L29
  L31 = L0
  L30 = L0.get
  L32 = "ipv6"
  L33 = "globals"
  L34 = "enabled"
  L30 = L30(L31, L32, L33, L34)
  L30 = L30 or L30
  if L30 == "0" then
    L5 = 2609
  elseif L29 == "0" then
    L5 = 2608
  else
    L31 = L2.isStrNil
    L32 = L13
    L31 = L31(L32)
    if L31 then
      L5 = 1502
    else
      if L28 and L8 then
        L31 = L28.wanSection
        if L31 == L10 then
          goto lbl_213
        end
      end
      L5 = 1523
      goto lbl_435
      ::lbl_213::
      L31 = L3.chkWan6Mode
      L32 = L11
      L33 = L13
      L31 = L31(L32, L33)
      if L31 ~= 0 then
        L5 = 2606
      else
        L31 = {}
        L32 = L2.isStrNil
        L33 = L14
        L32 = L32(L33)
        if L32 then
          L32 = L2.isStrNil
          L33 = L15
          L32 = L32(L33)
          if L32 then
            L7.peerdns = 1
        end
        else
          L7.peerdns = 0
          L32 = L2.isStrNil
          L33 = L14
          L32 = L32(L33)
          if not L32 then
            L32 = L1.ip6addr
            L33 = L14
            L32 = L32(L33)
            if L32 then
              L32 = table
              L32 = L32.insert
              L33 = L31
              L34 = L14
              L32(L33, L34)
            end
          end
          L32 = L2.isStrNil
          L33 = L15
          L32 = L32(L33)
          if not L32 then
            L32 = L1.ip6addr
            L33 = L15
            L32 = L32(L33)
            if L32 then
              L32 = table
              L32 = L32.insert
              L33 = L31
              L34 = L15
              L32(L33, L34)
            end
          end
          L7.dnsList = L31
        end
        if L13 == "native" then
        elseif L13 == "dhcpv6" then
          L32 = L3.chkWan6CfgDHCPv6
          L33 = L16
          L34 = L17
          L35 = L18
          L32 = L32(L33, L34, L35)
          L5 = L32
          if L5 == 0 then
            if L16 ~= 0 then
              L7.nat6Enabled = 1
              L32 = L17
              L33 = "/"
              L34 = L18
              L32 = L32 .. L33 .. L34
              L7.ip6prefix = L32
            else
              L7.nat6Enabled = 0
            end
          end
        elseif L13 == "pppoev6" then
          L32 = L3.chkWan6CfgPPPoEv6
          L33 = L16
          L34 = L17
          L35 = L18
          L36 = L21
          L37 = L19
          L38 = L20
          L32 = L32(L33, L34, L35, L36, L37, L38)
          L5 = L32
          if L5 == 0 then
            if L16 ~= 0 then
              L7.nat6Enabled = 1
              L32 = L17
              L33 = "/"
              L34 = L18
              L32 = L32 .. L33 .. L34
              L7.ip6prefix = L32
            else
              L7.nat6Enabled = 0
            end
            if L21 == 0 then
              L7.username = L19
              L7.password = L20
              L7.usePPPoEv4 = 0
            else
              L7.usePPPoEv4 = 1
            end
          end
        elseif L13 == "static" then
          L32 = L3.chkWan6CfgStatic
          L33 = L22
          L34 = L23
          L35 = L17
          L36 = L18
          L32 = L32(L33, L34, L35, L36)
          L5 = L32
          if L5 == 0 then
            L7.ip6addr = L22
            L7.ip6gw = L23
            L32 = L17
            L33 = "/"
            L34 = L18
            L32 = L32 .. L33 .. L34
            L7.ip6prefix = L32
          end
        elseif L13 == "passthrough" then
        elseif L13 == "relay" then
        elseif L13 == "pi_relay" then
        elseif L13 == "6in4" then
          L32 = L3.chkWan6Cfg6in4
          L33 = L24
          L34 = L22
          L35 = L17
          L36 = L18
          L37 = L25
          L38 = L19
          L39 = L20
          L32 = L32(L33, L34, L35, L36, L37, L38, L39)
          L5 = L32
          if L5 == 0 then
            L7.peeraddr = L24
            L7.ip6addr = L22
            L32 = L17
            L33 = "/"
            L34 = L18
            L32 = L32 .. L33 .. L34
            L7.ip6prefix = L32
            L32 = L2.isStrNil
            L33 = L25
            L32 = L32(L33)
            if not L32 then
              L7.tunnelid = L25
              L7.username = L19
              L7.password = L20
            end
          end
        elseif L13 == "6to4" then
          L32 = L4.parseCmdline
          L33 = _UPVALUE0_
          L33 = L33.formvalue
          L34 = "peeraddr"
          L33 = L33(L34)
          L33 = L33 or L33
          L32 = L32(L33)
          L7.peeraddr = L32
          L32 = L3.chkWan6Cfg6to4
          L33 = L7.peeraddr
          L32 = L32(L33)
          L5 = L32
        elseif L13 == "6rd" then
          L32 = L3.chkWan6Cfg6rd
          L33 = L26
          L34 = L24
          L35 = L17
          L36 = L18
          L32 = L32(L33, L34, L35, L36)
          L5 = L32
          if L5 == 0 then
            if L26 == 0 then
              L7.useDHCP = 0
              L7.peeraddr = L24
              L7.ip6prefix = L17
              L7.ip6prefixlen = L18
            else
              L7.useDHCP = 1
            end
          end
        elseif L13 == "464xlat" then
          L32 = L3.chkWan6Cfg464xlat
          L33 = L17
          L34 = L18
          L32 = L32(L33, L34)
          L5 = L32
          if L5 == 0 then
            L32 = L17
            L33 = "/"
            L34 = L18
            L32 = L32 .. L33 .. L34
            L7.ip6prefix = L32
          end
        elseif L13 == "off" then
        else
          L5 = 2606
        end
      end
    end
  end
  ::lbl_435::
  if L5 == 0 then
    if L13 ~= "off" then
      L31 = tonumber
      L33 = L0
      L32 = L0.get
      L34 = "network"
      L35 = L10
      L36 = "mru"
      L32, L33, L34, L35, L36, L37, L38, L39 = L32(L33, L34, L35, L36)
      L31 = L31(L32, L33, L34, L35, L36, L37, L38, L39)
      L31 = L31 or L31
      if L31 < 1280 then
        L33 = L0
        L32 = L0.set
        L34 = "network"
        L35 = L10
        L36 = "mru"
        L37 = 1280
        L32(L33, L34, L35, L36, L37)
        L33 = L0
        L32 = L0.commit
        L34 = "network"
        L32(L33, L34)
        L32 = L2.forkExec
        L33 = "ubus call network reload"
        L32(L33)
      end
    end
    L7.autoMode = L12
    L7.wanIface = L10
    L7.wan6Iface = L11
    L7.wan6IfaceID = L8
    L31 = L28.wanIfname
    L31 = L31 or L31
    L7.wan6Ifame = L31
    L31 = L28.wantype
    L7.wantype = L31
    L31 = L3.setWan6Cfg
    L32 = L13
    L33 = L7
    L34 = true
    L35 = false
    L31(L32, L33, L34, L35)
    if L12 == 1 then
      L31 = L2.forkExec
      L32 = "/usr/sbin/ipv6.sh autocheck "
      L33 = L11
      L34 = " clear_result"
      L32 = L32 .. L33 .. L34
      L31(L32)
    end
  else
    L31 = _UPVALUE1_
    L31 = L31.getErrorMessage
    L32 = L5
    L31 = L31(L32)
    L6.msg = L31
  end
  L6.code = L5
  L31 = _UPVALUE0_
  L31 = L31.write_json
  L32 = L6
  L31(L32)
end
setWan6V2 = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L0 = 0
  L1 = {}
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L3 = require
  L4 = "xiaoqiang.util.XQSecureUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQLanWanUtil"
  L4 = L4(L5)
  L6 = L2
  L5 = L2.get
  L7 = "ipv6"
  L8 = "globals"
  L9 = "enabled"
  L5 = L5(L6, L7, L8, L9)
  L5 = L5 or L5
  if L5 == "0" then
    L0 = 2609
  else
    L6 = L3.parseCmdline
    L7 = _UPVALUE0_
    L7 = L7.formvalue
    L8 = "wan6_name"
    L7 = L7(L8)
    L7 = L7 or L7
    L6 = L6(L7)
    L7 = L4.get_wanDevCfg
    L8 = L6
    L9 = "Router"
    L10 = nil
    L11 = 6
    L7 = L7(L8, L9, L10, L11)
    L8 = L4.getWan6Cfg
    L9 = L6
    L8 = L8(L9)
    if L8 then
      L1.wan6_cfg = L8
    end
  end
  if L0 ~= 0 then
    L6 = _UPVALUE1_
    L6 = L6.getErrorMessage
    L7 = L0
    L6 = L6(L7)
    L1.msg = L6
  end
  L1.code = L0
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L1
  L6(L7)
end
getWan6V2 = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = L0.getWan6Info
  L1 = L1()
  L2 = {}
  L2.code = 0
  L2.info = L1
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
ipv6Status = L4
function L4(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9
  L1 = require
  L2 = "xiaoqiang.util.XQSecureUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQLanWanUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = L3.isStrNil
  L5 = A0
  L4 = L4(L5)
  if L4 then
    A0 = "wan6"
  end
  L4 = 0
  L5 = {}
  L6 = L1.parseCmdline
  L7 = A0
  L6 = L6(L7)
  L7 = L2.getWan6InfoV2
  L8 = L6
  L7 = L7(L8)
  if L7 then
    L5.wan6_info = L7
  end
  if L4 ~= 0 then
    L8 = _UPVALUE0_
    L8 = L8.getErrorMessage
    L9 = L4
    L8 = L8(L9)
    L5.msg = L8
  end
  L5.code = L4
  return L5
end
wan6InfoV2Handle = L4
function L4()
  local L0, L1, L2, L3
  L0 = _UPVALUE0_
  L0 = L0.formvalue
  L1 = "wan6_name"
  L0 = L0(L1)
  L0 = L0 or L0
  L1 = wan6InfoV2Handle
  L2 = L0
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getWan6InfoV2 = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = 0
  L1 = {}
  L2 = require
  L3 = "xiaoqiang.util.XQSecureUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQLanWanUtil"
  L3 = L3(L4)
  L4 = tonumber
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "enabled"
  L5, L6 = L5(L6)
  L4 = L4(L5, L6)
  if not L4 then
    L0 = 1502
  elseif L4 ~= 0 and L4 ~= 1 then
    L0 = 1523
  end
  if L0 == 0 then
    L5 = L3.setWan6Switch
    L6 = L4
    L5(L6)
  else
    L5 = _UPVALUE1_
    L5 = L5.getErrorMessage
    L6 = L0
    L5 = L5(L6)
    L1.msg = L5
  end
  L1.code = L0
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L1
  L5(L6)
end
setWan6SwitchV2 = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = 0
  L1 = {}
  L2 = require
  L3 = "xiaoqiang.util.XQLanWanUtil"
  L2 = L2(L3)
  L3 = L2.getWan6Switch
  L3 = L3()
  L3 = L3 or L3
  L1.enabled = L3
  L1.code = L0
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
getWan6SwitchV2 = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L0 = 0
  L1 = {}
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L3 = require
  L4 = "luci.cbi.datatypes"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQLanWanUtil"
  L4 = L4(L5)
  L6 = L2
  L5 = L2.get
  L7 = "ipv6"
  L8 = "globals"
  L9 = "enabled"
  L5 = L5(L6, L7, L8, L9)
  L5 = L5 or L5
  if L5 == "0" then
    L0 = 2609
  else
    L6 = {}
    L7 = tonumber
    L8 = _UPVALUE0_
    L8 = L8.formvalue
    L9 = "mode"
    L8, L9, L10, L11 = L8(L9)
    L7 = L7(L8, L9, L10, L11)
    L7 = L7 or L7
    L8 = tonumber
    L9 = _UPVALUE0_
    L9 = L9.formvalue
    L10 = "ip6assign"
    L9, L10, L11 = L9(L10)
    L8 = L8(L9, L10, L11)
    L8 = L8 or L8
    if L7 < 0 or 3 < L7 then
      L0 = 2607
    else
      L9 = L3.ip6prefix
      L10 = L8
      L9 = L9(L10)
      if not L9 then
        L0 = 2604
      else
        L6.ip6assign = L8
        L9 = L4.setLan6Cfg
        L10 = L7
        L11 = L6
        L9(L10, L11)
      end
    end
  end
  if L0 ~= 0 then
    L6 = _UPVALUE1_
    L6 = L6.getErrorMessage
    L7 = L0
    L6 = L6(L7)
    L1.msg = L6
  end
  L1.code = L0
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L1
  L6(L7)
end
setLan6V2 = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = 0
  L1 = {}
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L3 = require
  L4 = "xiaoqiang.util.XQLanWanUtil"
  L3 = L3(L4)
  L5 = L2
  L4 = L2.get
  L6 = "ipv6"
  L7 = "globals"
  L8 = "enabled"
  L4 = L4(L5, L6, L7, L8)
  L4 = L4 or L4
  if L4 == "0" then
    L0 = 2609
  else
    L5 = L3.getLan6Cfg
    L5 = L5()
    if L5 then
      L1.lan6_cfg = L5
    end
  end
  if L0 ~= 0 then
    L5 = _UPVALUE0_
    L5 = L5.getErrorMessage
    L6 = L0
    L5 = L5(L6)
    L1.msg = L5
  end
  L1.code = L0
  L5 = _UPVALUE1_
  L5 = L5.write_json
  L6 = L1
  L5(L6)
end
getLan6V2 = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "mode"
  L2 = L2(L3)
  L2 = L2 or L2
  L3 = L0.setIpv6FirewallV2
  L4 = L2
  L3(L4)
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
setIpv6Firewall = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = L0.getIpv6FirewallV2
  L1 = L1()
  L2 = {}
  L2.code = L1
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
getIpv6Firewall = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.cbi.datatypes"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.module.XQIPMacBind"
  L3 = L3(L4)
  L4 = 0
  L5 = {}
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "start"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "end"
  L7 = L7(L8)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "startip"
  L8 = L8(L9)
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "endip"
  L9 = L9(L10)
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "leasetime"
  L10 = L10(L11)
  L11 = _UPVALUE0_
  L11 = L11.formvalue
  L12 = "ignore"
  L11 = L11(L12)
  L12 = _UPVALUE0_
  L12 = L12.formvalue
  L13 = "router"
  L12 = L12(L13)
  L13 = _UPVALUE0_
  L13 = L13.formvalue
  L14 = "dns1"
  L13 = L13(L14)
  L14 = _UPVALUE0_
  L14 = L14.formvalue
  L15 = "dns2"
  L14 = L14(L15)
  L15 = [[
 sleep 2;
                   /etc/init.d/network restart;
                   /sbin/phyhelper restart lan;
                   [ -f "/usr/sbin/port_service" ] && /usr/sbin/port_service restart;
                ]]
  L16 = tonumber
  L17 = L11
  L16 = L16(L17)
  if L16 == 1 then
    L16 = L0.setLanDHCPService
    L17, L18, L19, L20, L21 = nil, nil, nil, nil, nil
    L22 = L11
    L23, L24, L25 = nil, nil, nil
    L16(L17, L18, L19, L20, L21, L22, L23, L24, L25)
    L16 = L2.forkExec
    L17 = L15
    L16(L17)
    L16 = L3.flushIPMacBindingList
    L16()
  else
    L16 = nil
    L17 = unit
    if L10 then
      L18 = L10
      L17 = L10.match
      L19 = "^(%d+)(%S+)"
      L17, L18 = L17(L18, L19)
      unit = L18
      L16 = L17
    end
    L17 = tonumber
    L18 = L16
    L17 = L17(L18)
    L16 = L17
    if L16 ~= nil then
      L17 = unit
      if L17 ~= "h" then
        L17 = unit
        if L17 ~= "m" then
          goto lbl_107
        end
      end
      if L13 and L13 ~= "" then
        L17 = L1.ipaddr
        L18 = L13
        L17 = L17(L18)
        if not L17 then
          goto lbl_107
        end
      end
      if not L14 or L14 == "" then
        goto lbl_109
      end
      L17 = L1.ipaddr
      L18 = L14
      L17 = L17(L18)
      if L17 then
        goto lbl_109
      end
    end
    ::lbl_107::
    L4 = 1537
    goto lbl_189
    ::lbl_109::
    L17 = unit
    if L17 ~= "h" or not (L16 < 1) and not (48 < L16) then
      L17 = unit
      if not (L17 == "m" and (L16 < 2 or 2880 < L16)) then
        goto lbl_125
      end
    end
    L4 = 1536
    goto lbl_189
    ::lbl_125::
    if L12 and L12 ~= "" then
      L17 = L1.ipaddr
      L18 = L12
      L17 = L17(L18)
      if not L17 then
        L4 = 1532
    end
    elseif L8 and L9 then
      L17 = L0.checkDhcpIpPool
      L18 = 0
      L19 = L8
      L20 = L9
      L17 = L17(L18, L19, L20)
      L4 = L17
      if L4 == 0 then
        L17 = L0.setLanDHCPService
        L18, L19 = nil, nil
        L20 = L8
        L21 = L9
        L22 = L10
        L23 = L11
        L24 = L12
        L25 = L13
        L26 = L14
        L17(L18, L19, L20, L21, L22, L23, L24, L25, L26)
        L17 = L2.forkExec
        L18 = L15
        L17(L18)
      end
    elseif L6 and L7 then
      L17 = L0.checkDhcpIpPool
      L18 = 1
      L19 = L6
      L20 = L7
      L17 = L17(L18, L19, L20)
      L4 = L17
      if L4 == 0 then
        L17 = L0.setLanDHCPService
        L18 = L6
        L19 = L7
        L20, L21 = nil, nil
        L22 = L10
        L23 = L11
        L24 = L12
        L25 = L13
        L26 = L14
        L17(L18, L19, L20, L21, L22, L23, L24, L25, L26)
        L17 = L2.forkExec
        L18 = L15
        L17(L18)
      end
    else
      L4 = 1537
    end
  end
  ::lbl_189::
  L5.code = L4
  if L4 ~= 0 then
    L16 = _UPVALUE1_
    L16 = L16.getErrorMessage
    L17 = L4
    L16 = L16(L17)
    L5.msg = L16
    L16 = L3.reloadIPMacBindingList
    L16()
  end
  L16 = _UPVALUE0_
  L16 = L16.write_json
  L17 = L5
  L16(L17)
end
setLanDhcp = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQLanWanUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.cbi.datatypes"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQPortServiceUtil"
  L3 = L3(L4)
  L4 = 0
  L5 = {}
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "mac"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "wan_name"
  L7 = L7(L8)
  L7 = L7 or L7
  if L6 then
    L8 = L2.macaddr
    L9 = L6
    L8 = L8(L9)
    if L8 then
      L8 = string
      L8 = L8.lower
      L9 = L6
      L8 = L8(L9)
      L6 = L8
      L9 = L6
      L8 = L6.match
      L10 = "^%x[1,3,5,7,9,b,d,f]"
      L8 = L8(L9, L10)
      if L8 then
        L4 = 1637
      else
        L8 = L3.PS_WAN_SERVICE_NAME_MAP
        L8 = L8[L7]
        L7 = L8 or L7
        if not L8 then
          L7 = "wan"
        end
        L8 = L1.setWanMac
        L9 = L6
        L10 = L7
        L8 = L8(L9, L10)
        L9 = L0.check
        L10 = 0
        L11 = L0.KEY_FUNC_MACCLONE
        L12 = 1
        L9(L10, L11, L12)
        if not L8 then
          L4 = 1537
        end
      end
  end
  else
    L4 = 1523
  end
  L5.code = L4
  if L4 ~= 0 then
    L8 = _UPVALUE1_
    L8 = L8.getErrorMessage
    L9 = L4
    L8 = L8(L9)
    L5.msg = L8
  end
  L8 = _UPVALUE0_
  L8 = L8.write_json
  L9 = L5
  L8(L9)
end
setWanMac = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQDeviceUtil"
  L2 = L2(L3)
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "model"
  L4, L5, L6, L7, L8, L12, L13, L17, L18, L19, L20 = L4(L5)
  L3 = L3(L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20)
  L4 = 0
  L5 = {}
  L6 = L1.getWiFiMacfilterInfo
  L7 = L3
  L6 = L6(L7)
  L7 = L2.getDeviceListV2
  L8 = true
  L7 = L7(L8, L9, L10)
  L8 = L2.getDeviceListV2
  L8 = L8(L9, L10, L11)
  L5.enable = L9
  L5.model = L9
  if L9 then
    for L12, L13 in L9, L10, L11 do
      L13.added = 0
      for L17, L18 in L14, L15, L16 do
        L19 = L18.mac
        L20 = L13.mac
        if L19 == L20 then
          L13.added = 1
          break
        end
      end
    end
    for L12, L13 in L9, L10, L11 do
      if L14 then
        L13.added = 1
      else
        L13.added = 0
      end
    end
  end
  L5.code = 0
  L5.list = L7
  L5.macfilter = L9
  L5.weblist = L9
  L5.flist = L8
  L9(L10)
end
getWifiMacfilterInfo = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQWifiUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQPushUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQController"
  L4 = L4(L5)
  L5 = require
  L6 = "xiaoqiang.util.XQSynchrodata"
  L5 = L5(L6)
  L6 = tonumber
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "enable"
  L7, L8, L9, L10, L11 = L7(L8)
  L6 = L6(L7, L8, L9, L10, L11)
  if L6 == 1 then
    L6 = true
    if L6 then
      goto lbl_31
    end
  end
  L6 = false
  ::lbl_31::
  L7 = tonumber
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "model"
  L8, L9, L10, L11 = L8(L9)
  L7 = L7(L8, L9, L10, L11)
  L8 = L0.check
  L9 = 0
  L10 = L0.KEY_FUNC_WIRELESS_ACCESS
  if L6 then
    L11 = 0
    if L11 then
      goto lbl_46
    end
  end
  L11 = 1
  ::lbl_46::
  L8(L9, L10, L11)
  if L7 and L7 == 0 then
    L8 = L0.check
    L9 = 0
    L10 = L0.KEY_FUNC_WIRELESS_BLACK
    L11 = 1
    L8(L9, L10, L11)
  else
    L8 = L0.check
    L9 = 0
    L10 = L0.KEY_FUNC_WIRELESS_WHITE
    L11 = 1
    L8(L9, L10, L11)
  end
  L8 = L3.pushConfig
  L9 = "auth"
  if L6 then
    L10 = "1"
    if L10 then
      goto lbl_70
    end
  end
  L10 = "0"
  ::lbl_70::
  L8(L9, L10)
  L8 = L5.syncProtectionStatus
  if L6 then
    L9 = "1"
    if L9 then
      goto lbl_78
    end
  end
  L9 = "0"
  ::lbl_78::
  L10 = L7
  L8(L9, L10)
  L8 = L2.setWiFiMacfilterModel
  L9 = L6
  L10 = L7
  L8(L9, L10)
  L8 = L4.wifimacfilter
  L9 = nil
  L10 = L6
  L11 = L7
  L8(L9, L10, L11)
  L8 = L1.forkExec
  L9 = "/sbin/notice_tbus_device_maclist.sh"
  L8(L9)
  L8 = {}
  L8.code = 0
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L8
  L9(L10)
end
setWifiMacfilter = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21
  L0 = require
  L1 = "xiaoqiang.util.XQPushUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQController"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = require
  L5 = "luci.util"
  L4 = L4(L5)
  L5 = require
  L6 = "luci.cbi.datatypes"
  L5 = L5(L6)
  L6 = 0
  L7 = {}
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "mac"
  L10 = nil
  L11.name = "regex"
  L11.arg = "^[^`|$&]+$"
  L8 = L8(L9, L10, L11)
  L9 = tonumber
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L10, L14, L15, L16, L17, L18, L19, L20, L21 = L10(L11)
  L9 = L9(L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21)
  L10 = tonumber
  L14, L15, L16, L17, L18, L19, L20, L21 = L11(L12)
  L10 = L10(L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21)
  if L11 then
    L6 = 1523
  else
    L14 = ";"
    L14, L15, L16, L17, L18, L19, L20, L21 = L12(L13, L14)
    for L14, L15 in L11, L12, L13 do
      L16 = L3.isStrNil
      L17 = L15
      L16 = L16(L17)
      if not L16 then
        L16 = L5.macaddr
        L17 = L15
        L16 = L16(L17)
        if L16 then
          goto lbl_68
        end
      end
      L6 = 1523
      do break end
      goto lbl_80
      ::lbl_68::
      L16 = string
      L16 = L16.upper
      L17 = L15
      L16 = L16(L17)
      L15 = L16
      L17 = L15
      L16 = L15.match
      L18 = "^%x[1,3,5,7,9,B,D,F]"
      L16 = L16(L17, L18)
      if L16 then
        L6 = 1637
        break
      end
      ::lbl_80::
    end
    if 0 == L6 then
      L14 = L8
      L15 = ";"
      L14 = L10
      if L11 and L11 == 1 then
        L6 = 1591
      end
    end
  end
  L7.code = L6
  if L6 ~= 0 then
    L7.msg = L11
  else
    L14 = ";"
    L14, L15, L16, L17, L18, L19, L20, L21 = L12(L13, L14)
    for L14, L15 in L11, L12, L13 do
      L16 = os
      L16 = L16.execute
      L17 = string
      L17 = L17.format
      L18 = "milog.sh -m '{\"tag\":\"sec_nic_%slist\",\"mac\":\"%s\",\"enabled\":%s}'"
      if L9 == 1 then
        L19 = "white"
        if L19 then
          goto lbl_124
        end
      end
      L19 = "black"
      ::lbl_124::
      L20 = L15
      if L10 == 1 then
        L21 = "false"
        if L21 then
          goto lbl_131
        end
      end
      L21 = "true"
      ::lbl_131::
      L17, L18, L19, L20, L21 = L17(L18, L19, L20, L21)
      L16(L17, L18, L19, L20, L21)
    end
    L14 = "1"
    L12(L13, L14)
    L14 = L9
    L12(L13, L14)
    L12(L13)
  end
  L11(L12)
end
editDevice = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L0 = require
  L1 = "xiaoqiang.util.XQPushUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQSecureUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "luci.cbi.datatypes"
  L4 = L4(L5)
  L5 = 0
  L6 = {}
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "mac"
  L7 = L7(L8)
  L7 = L7 or L7
  L8 = L3.hackCharsCheck
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "name"
  L9, L10, L11, L12, L13, L14 = L9(L10)
  L8 = L8(L9, L10, L11, L12, L13, L14)
  L8 = L8 or L8
  L9 = tonumber
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "model"
  L10, L11, L12, L13, L14 = L10(L11)
  L9 = L9(L10, L11, L12, L13, L14)
  L10 = L2.isStrNil
  L11 = L7
  L10 = L10(L11)
  if not L10 then
    L10 = L4.macaddr
    L11 = L7
    L10 = L10(L11)
    if L10 then
      goto lbl_52
    end
  end
  L6.code = 1523
  goto lbl_80
  ::lbl_52::
  L10 = string
  L10 = L10.upper
  L11 = L7
  L10 = L10(L11)
  L7 = L10
  L11 = L7
  L10 = L7.match
  L12 = "^%x[1,3,5,7,9,B,D,F]"
  L10 = L10(L11, L12)
  if L10 then
    L5 = 1637
  else
    L10 = L1.addDevice
    L11 = L9
    L12 = L7
    L13 = L8
    L10 = L10(L11, L12, L13)
    if L10 and L10 == 1 then
      L5 = 1591
    elseif L10 and L10 == 3 then
      L5 = 1676
    end
  end
  ::lbl_80::
  L6.code = L5
  if L5 ~= 0 then
    L10 = _UPVALUE1_
    L10 = L10.getErrorMessage
    L11 = L5
    L10 = L10(L11)
    L6.msg = L10
  else
    L10 = os
    L10 = L10.execute
    L11 = string
    L11 = L11.format
    L12 = "milog.sh -m '{\"tag\":\"sec_nic_%slist\",\"mac\":\"%s\",\"enabled\":true}'"
    if L9 == 1 then
      L13 = "white"
      if L13 then
        goto lbl_100
      end
    end
    L13 = "black"
    ::lbl_100::
    L14 = L7
    L11, L12, L13, L14 = L11(L12, L13, L14)
    L10(L11, L12, L13, L14)
    L10 = require
    L11 = "xiaoqiang.util.XQSynchrodata"
    L10 = L10(L11)
    L11 = L0.pushConfig
    L12 = "auth"
    L13 = "1"
    L11(L12, L13)
    L11 = L10.syncProtectionStatus
    L12 = "1"
    L13 = L9
    L11(L12, L13)
    L11 = L2.forkExec
    L12 = "/sbin/notice_tbus_device_maclist.sh"
    L11(L12)
  end
  L10 = _UPVALUE0_
  L10 = L10.write_json
  L11 = L6
  L10(L11)
end
manuallyAdd = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = require
  L1 = "xiaoqiang.module.XQMacBind"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQSecureUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "json"
  L2 = L2(L3)
  L3 = 0
  L4 = 0
  L5 = {}
  L6 = L1.xssCheck
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "data"
  L7, L8 = L7(L8)
  L6 = L6(L7, L8)
  if L6 then
    L7 = L2.decode
    L8 = L6
    L7 = L7(L8)
    L6 = L7
    L7 = L0.addBinds
    L8 = L6
    L7 = L7(L8)
    L4 = L7
  else
    L3 = 1523
  end
  if L4 == 1 then
    L3 = 1593
  elseif L4 == 2 then
    L3 = 1592
  elseif L4 == 3 then
    L3 = 1613
  elseif L4 == 4 then
    L3 = 3100
  end
  L5.code = L3
  if L3 ~= 0 then
    L7 = _UPVALUE1_
    L7 = L7.getErrorMessage
    L8 = L3
    L7 = L7(L8)
    L5.msg = L7
  else
    L7 = L0.reload
    L7()
  end
  L7 = _UPVALUE0_
  L7 = L7.write_json
  L8 = L5
  L7(L8)
end
macBind = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.module.XQMacBind"
  L0 = L0(L1)
  L1 = {}
  L2 = 0
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "enable"
  L4, L5 = L4(L5)
  L3 = L3(L4, L5)
  if L3 ~= nil then
    L4 = L0.setIPMACCheckEnable
    L5 = L3
    L4 = L4(L5)
    L2 = L4
  else
    L2 = 1523
  end
  L1.code = L2
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L1
  L4(L5)
end
setIPMACCheckEnable = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.module.XQMacBind"
  L0 = L0(L1)
  L1 = {}
  L2 = L0.getIPMACCheckEnable
  L2 = L2()
  L1.enable = L2
  L1.code = 0
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
getIPMACCheckStatus = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQMacBind"
  L1 = L1(L2)
  L2 = 0
  L3 = {}
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "mac"
  L6 = nil
  L7 = "string"
  L4 = L4(L5, L6, L7)
  L5 = nil
  if L4 then
    L6 = L0.split
    L7 = L4
    L8 = ";"
    L6 = L6(L7, L8)
    L7 = #L6
    if 1 < L7 then
      L7 = L1.removeBinds
      L8 = L6
      L7 = L7(L8)
      L5 = L7
    else
      L7 = L1.removeBind
      L8 = L4
      L7 = L7(L8)
      L5 = L7
    end
  end
  if not L5 then
    L2 = 1594
  end
  L3.code = L2
  if L2 ~= 0 then
    L6 = _UPVALUE1_
    L6 = L6.getErrorMessage
    L7 = L2
    L6 = L6(L7)
    L3.msg = L6
  else
    L6 = L1.reload
    L6()
  end
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L3
  L6(L7)
end
macUnbind = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQMacBind"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L3 = L1.saveBindInfo
  L3()
  L3 = L1.reload
  L3()
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
saveBind = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQMacBind"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L3 = L1.unbindAll
  L3()
  L3 = L1.reload
  L3()
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
unbindAll = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQDeviceUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.module.XQMacBind"
  L2 = L2(L3)
  L3 = {}
  L3.code = 0
  L4 = {}
  L5 = L2.macBindInfo
  L5 = L5()
  L6 = L1.getDeviceList
  L7 = true
  L8 = true
  L6 = L6(L7, L8)
  L6 = L6 or L6
  L7 = {}
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "mac"
  L8 = L8(L9)
  L9 = 0
  for L13, L14 in L10, L11, L12 do
    L15 = string
    L15 = L15.lower
    L16 = L14.mac
    L15 = L15(L16)
    L15 = L5[L15]
    if L15 then
      L16 = L15.tag
      L14.tag = L16
    else
      L14.tag = 0
    end
    L16 = L14.port
    if L16 then
      L16 = L14.port
      if L16 ~= 3 then
        L16 = L14.isap
        if L16 == 0 then
          L16 = table
          L16 = L16.insert
          L17 = L7
          L18 = L14
          L16(L17, L18)
        end
      end
    end
  end
  if L8 ~= nil then
    L9 = L10
    if L9 == true then
      L13 = string
      L13 = L13.upper
      L14 = L8
      L13 = L13(L14)
      L12.mac = L13
      L10(L11, L12)
    end
  else
    for L13, L14 in L10, L11, L12 do
      L15 = table
      L15 = L15.insert
      L16 = L4
      L17 = {}
      L18 = L14.name
      L17.name = L18
      L18 = string
      L18 = L18.upper
      L19 = L14.mac
      L18 = L18(L19)
      L17.mac = L18
      L18 = L14.ip
      L17.ip = L18
      L18 = L14.tag
      L17.tag = L18
      L18 = L14.instance
      L17.instance = L18
      L15(L16, L17)
    end
  end
  L3.list = L4
  if L8 == nil then
    L3.devicelist = L7
    L3.lanmask = L10
  end
  L10(L11)
end
getMacBindInfo = L4
function L4()
  local L0, L1, L2
  L0 = {}
  L1 = pppoeStatusHandle
  L1 = L1()
  L0.ipv4 = L1
  L1 = wan6InfoV2Handle
  L1 = L1()
  L0.ipv6 = L1
  L0.code = 0
  L1 = _UPVALUE0_
  L1 = L1.write_json
  L2 = L0
  L1(L2)
end
getWanStatus = L4
function L4(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQLanWanUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQPortServiceUtil"
  L3 = L3(L4)
  L4 = L1.isStrNil
  L5 = A0
  L4 = L4(L5)
  if L4 then
    A0 = "WAN1"
  end
  L4 = L3.PS_WAN_SERVICE_NAME_MAP
  L4 = L4[A0]
  A0 = L4 or A0
  if not L4 then
    A0 = "wan"
  end
  L4 = 0
  L5 = L2.getPPPoEStatus
  L6 = A0
  L5 = L5(L6)
  if L5 then
    L6 = L5.errtype
    if L6 == 1 then
      L4 = 1603
    else
      L6 = L5.errtype
      if L6 == 2 then
        L4 = 1604
      else
        L6 = L5.errtype
        if L6 == 3 then
          L4 = 1605
        end
      end
    end
  else
    L4 = 1602
  end
  if L4 ~= 0 then
    if L4 ~= 1602 then
      L6 = string
      L6 = L6.format
      L7 = "%s(%s)"
      L8 = _UPVALUE0_
      L8 = L8.getErrorMessage
      L9 = L4
      L8 = L8(L9)
      L9 = tostring
      L10 = L5.errcode
      L9, L10 = L9(L10)
      L6 = L6(L7, L8, L9, L10)
      L5.msg = L6
    else
      L6 = _UPVALUE0_
      L6 = L6.getErrorMessage
      L7 = L4
      L6 = L6(L7)
      L5.msg = L6
    end
  end
  L5.code = L4
  return L5
end
pppoeStatusHandle = L4
function L4()
  local L0, L1, L2, L3
  L0 = _UPVALUE0_
  L0 = L0.formvalue
  L1 = "wan_name"
  L0 = L0(L1)
  L0 = L0 or L0
  L1 = pppoeStatusHandle
  L2 = L0
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
pppoeStatus = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQPortServiceUtil"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "wan_name"
  L2 = L2(L3)
  L2 = L2 or L2
  L3 = {}
  L3.code = 0
  L4 = L1.PS_WAN_SERVICE_NAME_MAP
  L4 = L4[L2]
  L2 = L4 or L2
  if not L4 then
    L2 = "wan"
  end
  L4 = L0.pppoeStop
  L5 = L2
  L4(L5)
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L3
  L4(L5)
end
pppoeStop = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQPortServiceUtil"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "wan_name"
  L2 = L2(L3)
  L2 = L2 or L2
  L3 = {}
  L3.code = 0
  L4 = L1.PS_WAN_SERVICE_NAME_MAP
  L4 = L4[L2]
  L2 = L4 or L2
  if not L4 then
    L2 = "wan"
  end
  L4 = L0.pppoeStart
  L5 = L2
  L4(L5)
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L3
  L4(L5)
end
pppoeStart = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQQoSUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.XQPreference"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L3 = L0.qosStatus
  L3 = L3()
  L2.status = L3
  L4 = L3.on
  if L4 == 1 then
    L4 = L0.qosBand
    L4 = L4()
    L2.band = L4
    L4 = L0.qosList
    L4 = L4()
    L2.list = L4
    L4 = L0.guestQoSInfo
    L4 = L4()
    L2.guest = L4
  else
    L4 = L0.qosBandinConf
    L4 = L4()
    L2.band = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L2
  L4(L5)
end
getQosInfo = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQQoSUtil"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "on"
  L4, L5, L6, L7 = L4(L5)
  L3 = L3(L4, L5, L6, L7)
  if L3 == 1 then
    L3 = true
    if L3 then
      goto lbl_21
    end
  end
  L3 = false
  ::lbl_21::
  L4 = L0.check
  L5 = 0
  L6 = L0.KEY_FUNC_QOS
  if L3 then
    L7 = 0
    if L7 then
      goto lbl_30
    end
  end
  L7 = 1
  ::lbl_30::
  L4(L5, L6, L7)
  L4 = L1.qosSwitch
  L5 = L3
  L4 = L4(L5)
  if not L4 then
    L2.code = 1606
  end
  L5 = L2.code
  if L5 ~= 0 then
    L5 = _UPVALUE1_
    L5 = L5.getErrorMessage
    L6 = L2.code
    L5 = L5(L6)
    L2.msg = L5
  end
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L2
  L5(L6)
end
qosSwitch = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.util.XQQoSUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "mode"
  L3, L4, L5, L6 = L3(L4)
  L2 = L2(L3, L4, L5, L6)
  L3 = L0.qosStatus
  L3 = L3()
  L4 = nil
  if L3 then
    L5 = L3.on
    if L5 == 1 then
      L5 = L0.setQoSMode
      L6 = L2
      L5 = L5(L6)
      L4 = L5
  end
  else
    L1.code = 1607
  end
  if not L4 then
    L5 = L1.code
    if L5 == 0 then
      L1.code = 1606
    end
  end
  L5 = L1.code
  if L5 ~= 0 then
    L5 = _UPVALUE1_
    L5 = L5.getErrorMessage
    L6 = L1.code
    L5 = L5(L6)
    L1.msg = L5
  else
    L5 = require
    L6 = "xiaoqiang.util.XQSynchrodata"
    L5 = L5(L6)
    L6 = L5.syncQosInfo
    L6()
  end
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L1
  L5(L6)
end
qosMode = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13
  L0 = require
  L1 = "xiaoqiang.util.XQQoSUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "mac"
  L2 = L2(L3)
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "upload"
  L4, L5, L6, L7, L8, L9, L10, L11, L12, L13 = L4(L5)
  L3 = L3(L4, L5, L6, L7, L8, L9, L10, L11, L12, L13)
  L4 = tonumber
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "download"
  L5, L6, L7, L8, L9, L10, L11, L12, L13 = L5(L6)
  L4 = L4(L5, L6, L7, L8, L9, L10, L11, L12, L13)
  L5 = tonumber
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "level"
  L6, L7, L8, L9, L10, L11, L12, L13 = L6(L7)
  L5 = L5(L6, L7, L8, L9, L10, L11, L12, L13)
  L6 = nil
  L7 = L0.qosStatus
  L7 = L7()
  if L7 then
    L8 = L7.on
    if L8 == 1 then
      if L2 and L3 and L4 and L5 then
        L8 = L0.qosOnLimit
        L9 = L2
        L10 = L3 / 100
        L11 = L4 / 100
        L12 = L5
        L13 = L5
        L8 = L8(L9, L10, L11, L12, L13)
        L6 = L8
      else
        L1.code = 1523
      end
  end
  else
    L1.code = 1607
  end
  if not L6 then
    L8 = L1.code
    if L8 == 0 then
      L1.code = 1606
    end
  end
  L8 = L1.code
  if L8 ~= 0 then
    L8 = _UPVALUE1_
    L8 = L8.getErrorMessage
    L9 = L1.code
    L8 = L8(L9)
    L1.msg = L8
  end
  L8 = _UPVALUE0_
  L8 = L8.write_json
  L9 = L1
  L8(L9)
end
qosLimit = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.util.XQQoSUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "mac"
  L2 = L2(L3)
  L3 = L0.qosStatus
  L3 = L3()
  L4 = nil
  if L3 then
    L5 = L3.on
    if L5 == 1 then
      L5 = L0.qosOffLimit
      L6 = L2
      L5 = L5(L6)
      L4 = L5
  end
  else
    L1.code = 1607
  end
  if not L4 then
    L5 = L1.code
    if L5 == 0 then
      L1.code = 1606
    end
  end
  L5 = L1.code
  if L5 ~= 0 then
    L5 = _UPVALUE1_
    L5 = L5.getErrorMessage
    L6 = L1.code
    L5 = L5(L6)
    L1.msg = L5
  end
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L1
  L5(L6)
end
qosOffLimit = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = require
  L1 = "xiaoqiang.util.XQQoSUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "upload"
  L3, L4, L5, L6, L7, L8 = L3(L4)
  L2 = L2(L3, L4, L5, L6, L7, L8)
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "download"
  L4, L5, L6, L7, L8 = L4(L5)
  L3 = L3(L4, L5, L6, L7, L8)
  L4 = nil
  L5 = L0.qosStatus
  L5 = L5()
  if L2 and L3 then
    L6 = L0.setQosBand
    L7 = L2
    L8 = L3
    L6 = L6(L7, L8)
    L4 = L6
    if not L4 then
      L6 = L0.setQosBandinConf
      L7 = L2
      L8 = L3
      L6 = L6(L7, L8)
      L4 = L6
    end
  else
    L1.code = 1523
  end
  if not L4 then
    L6 = L1.code
    if L6 == 0 then
      L1.code = 1606
    end
  end
  L6 = L1.code
  if L6 ~= 0 then
    L6 = _UPVALUE1_
    L6 = L6.getErrorMessage
    L7 = L1.code
    L6 = L6(L7)
    L1.msg = L6
  end
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L1
  L6(L7)
end
setBand = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.XQPreference"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQDDNS"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L3 = L0.get
  L4 = "DDNS_FLAG"
  L3 = L3(L4)
  if L3 then
    L2.flag = 0
  else
    L2.flag = 1
    L4 = L0.set
    L5 = "DDNS_FLAG"
    L6 = "1"
    L4(L5, L6)
  end
  L4 = L1.ddnsInfo
  L4 = L4()
  L5 = L4.on
  L2.on = L5
  L5 = L4.list
  L2.list = L5
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L2
  L5(L6)
end
ddnsStatus = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.module.XQDDNS"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "on"
  L3, L4 = L3(L4)
  L2 = L2(L3, L4)
  if L2 == 1 then
    L2 = true
    if L2 then
      goto lbl_18
    end
  end
  L2 = false
  ::lbl_18::
  L3 = L0.ddnsSwitch
  L4 = L2
  L3(L4)
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
ddnsSwitch = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18
  L0 = require
  L1 = "xiaoqiang.module.XQDDNS"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQSecureUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = {}
  L3.code = 0
  L4 = tonumber
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "id"
  L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18 = L5(L6)
  L4 = L4(L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18)
  L5 = tonumber
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "enable"
  L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18 = L6(L7)
  L5 = L5(L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18)
  if L5 == 1 then
    L5 = 1
    if L5 then
      goto lbl_30
    end
  end
  L5 = 0
  ::lbl_30::
  L6 = L1.hackCharsCheck
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "domain"
  L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18 = L7(L8)
  L6 = L6(L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18)
  L6 = L6 or L6
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "username"
  L7 = L7(L8)
  L7 = L7 or L7
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "password"
  L8 = L8(L9)
  L8 = L8 or L8
  L9 = tonumber
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "checkinterval"
  L10, L11, L12, L13, L14, L15, L16, L17, L18 = L10(L11)
  L9 = L9(L10, L11, L12, L13, L14, L15, L16, L17, L18)
  L10 = tonumber
  L11 = _UPVALUE0_
  L11 = L11.formvalue
  L12 = "forceinterval"
  L11, L12, L13, L14, L15, L16, L17, L18 = L11(L12)
  L10 = L10(L11, L12, L13, L14, L15, L16, L17, L18)
  if not (L4 and L9) or not L10 then
    L3.code = 1612
  else
    if not (L9 <= 0) and not (L10 <= 0) then
      L11 = L2.isStrNil
      L12 = L6
      L11 = L11(L12)
      if not L11 then
        goto lbl_84
      end
    end
    L3.code = 1523
    goto lbl_96
    ::lbl_84::
    L11 = L0.setDdns
    L12 = L4
    L13 = L5
    L14 = L7
    L15 = L8
    L16 = L9
    L17 = L10
    L18 = L6
    L11 = L11(L12, L13, L14, L15, L16, L17, L18)
    if not L11 then
      L3.code = 1606
    end
  end
  ::lbl_96::
  L11 = L3.code
  if L11 ~= 0 then
    L11 = _UPVALUE1_
    L11 = L11.getErrorMessage
    L12 = L3.code
    L11 = L11(L12)
    L3.msg = L11
  end
  L11 = _UPVALUE0_
  L11 = L11.write_json
  L12 = L3
  L11(L12)
end
addServer = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.module.XQDDNS"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "id"
  L3, L4 = L3(L4)
  L2 = L2(L3, L4)
  if not L2 then
    L1.code = 1612
  else
    L3 = L0.deleteDdns
    L4 = L2
    L3 = L3(L4)
    if not L3 then
      L1.code = 1606
    end
  end
  L3 = L1.code
  if L3 ~= 0 then
    L3 = _UPVALUE1_
    L3 = L3.getErrorMessage
    L4 = L1.code
    L3 = L3(L4)
    L1.msg = L3
  end
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
deleteServer = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.module.XQDDNS"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "id"
  L3, L4, L5, L6 = L3(L4)
  L2 = L2(L3, L4, L5, L6)
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "on"
  L4, L5, L6 = L4(L5)
  L3 = L3(L4, L5, L6)
  if L3 == 1 then
    L3 = true
    if L3 then
      goto lbl_24
    end
  end
  L3 = false
  ::lbl_24::
  if not L2 then
    L1.code = 1612
  else
    L4 = L0.ddnsServerSwitch
    L5 = L2
    L6 = L3
    L4 = L4(L5, L6)
    if not L4 then
      L1.code = 1606
    end
  end
  L4 = L1.code
  if L4 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L1.code
    L4 = L4(L5)
    L1.msg = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L1
  L4(L5)
end
serverSwitch = L4
function L4()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.module.XQDDNS"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = L0.reload
  L2 = L2()
  if not L2 then
    L1.code = 1606
  end
  L2 = L1.code
  if L2 ~= 0 then
    L2 = _UPVALUE0_
    L2 = L2.getErrorMessage
    L3 = L1.code
    L2 = L2(L3)
    L1.msg = L2
  end
  L2 = _UPVALUE1_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
ddnsReload = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.module.XQDDNS"
  L0 = L0(L1)
  L1 = {}
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "id"
  L3, L4, L5 = L3(L4)
  L2 = L2(L3, L4, L5)
  L3 = L0.getDdns
  L4 = L2
  L3 = L3(L4)
  if L3 then
    L1 = L3
    L1.code = 0
  else
    L1.code = 1614
  end
  L4 = L1.code
  if L4 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L1.code
    L4 = L4(L5)
    L1.msg = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L1
  L4(L5)
end
getServer = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16
  L0 = require
  L1 = "xiaoqiang.module.XQDDNS"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "id"
  L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16 = L3(L4)
  L2 = L2(L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16)
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "enable"
  L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16 = L4(L5)
  L3 = L3(L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16)
  if L3 == 1 then
    L3 = 1
    if L3 then
      goto lbl_24
    end
  end
  L3 = 0
  ::lbl_24::
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "domain"
  L4 = L4(L5)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "username"
  L5 = L5(L6)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "password"
  L6 = L6(L7)
  L7 = tonumber
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "checkinterval"
  L8, L9, L10, L11, L12, L13, L14, L15, L16 = L8(L9)
  L7 = L7(L8, L9, L10, L11, L12, L13, L14, L15, L16)
  L8 = tonumber
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "forceinterval"
  L9, L10, L11, L12, L13, L14, L15, L16 = L9(L10)
  L8 = L8(L9, L10, L11, L12, L13, L14, L15, L16)
  L9 = L0.editDdns
  L10 = L2
  L11 = L3
  L12 = L5
  L13 = L6
  L14 = L7
  L15 = L8
  L16 = L4
  L9 = L9(L10, L11, L12, L13, L14, L15, L16)
  if not L9 then
    L1.code = 1606
  end
  L10 = L1.code
  if L10 ~= 0 then
    L10 = _UPVALUE1_
    L10 = L10.getErrorMessage
    L11 = L1.code
    L10 = L10(L11)
    L1.msg = L10
  end
  L10 = _UPVALUE0_
  L10 = L10.write_json
  L11 = L1
  L10(L11)
end
ddnsEdit = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = L0.getWanSpeed
  L1 = L1()
  L2 = {}
  L2.code = 0
  L2.speed = L1
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
getWanSpeed = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQPortServiceUtil"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "wan_name"
  L2 = L2(L3)
  L2 = L2 or L2
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "speed"
  L4, L5, L6, L7 = L4(L5)
  L3 = L3(L4, L5, L6, L7)
  L4 = {}
  L4.code = 0
  L5 = L1.PS_WAN_SERVICE_NAME_MAP
  L5 = L5[L2]
  L2 = L5 or L2
  if not L5 then
    L2 = "wan"
  end
  L5 = L0.setWanSpeed
  L6 = L3
  L7 = L2
  L5 = L5(L6, L7)
  if not L5 then
    L4.code = 1523
  end
  L6 = L4.code
  if L6 ~= 0 then
    L6 = _UPVALUE1_
    L6 = L6.getErrorMessage
    L7 = L4.code
    L6 = L6(L7)
    L4.msg = L6
  end
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L4
  L6(L7)
end
setWanSpeed = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.XQPreference"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = tonumber
  L3 = L0.get
  L4 = "SFP_SPEED"
  L5 = 0
  L3, L4, L5 = L3(L4, L5)
  L2 = L2(L3, L4, L5)
  L2 = L2 or L2
  L1.mode = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
GetSFPSpeed = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.XQPreference"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = {}
  L4.code = 0
  L4.wait = 0
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "sfp_mode"
  L7 = nil
  L8 = "numberstr"
  L5 = L5(L6, L7, L8)
  L6 = L0.log
  L7 = 5
  L8 = "SetSFPSpeed"
  L6(L7, L8)
  L7 = L2
  L6 = L2.get
  L8 = "misc"
  L9 = "sw_reg"
  L10 = "sfp_port"
  L6 = L6(L7, L8, L9, L10)
  L7 = L0.log
  L8 = 5
  L9 = "sfp_port: "
  L10 = tostring
  L11 = L6
  L10 = L10(L11)
  L11 = " mode: "
  L12 = tostring
  L13 = L5
  L12 = L12(L13)
  L9 = L9 .. L10 .. L11 .. L12
  L7(L8, L9)
  if L5 and L6 then
    L7 = L1.set
    L8 = "SFP_SPEED"
    L9 = L5
    L7(L8, L9)
    L7 = L3.forkExec
    L8 = "/sbin/phyhelper mode set "
    L9 = tostring
    L10 = L6
    L9 = L9(L10)
    L10 = " "
    L11 = tostring
    L12 = L5
    L11 = L11(L12)
    L12 = " &"
    L8 = L8 .. L9 .. L10 .. L11 .. L12
    L7(L8)
  else
    L4.code = 1537
  end
  L7 = L4.code
  if L7 ~= 0 then
    L7 = _UPVALUE1_
    L7 = L7.getErrorMessage
    L8 = L4.code
    L7 = L7(L8)
    L4.msg = L7
  end
  L7 = _UPVALUE0_
  L7 = L7.write_json
  L8 = L4
  L7(L8)
end
SetSFPSpeed = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = _UPVALUE0_
  L1 = L1.formvalue
  L2 = "mode"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "flg"
  L2 = L2(L3)
  L2 = L2 or L2
  L3 = {}
  L3.code = 0
  L4 = L0.setWanLanSwap
  L5 = L1
  L6 = L2
  L4 = L4(L5, L6)
  if not L4 then
    L3.code = 1523
  end
  L5 = L3.code
  if L5 ~= 0 then
    L5 = _UPVALUE1_
    L5 = L5.getErrorMessage
    L6 = L3.code
    L5 = L5(L6)
    L3.msg = L5
  end
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L3
  L5(L6)
end
setWanLanSwap = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = _UPVALUE0_
  L1 = L1.formvalue
  L2 = "mode"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L3 = L0.getWanPortStatus
  L4 = L1
  L3 = L3(L4)
  if L3 == 0 then
    L2.code = 99
  elseif L3 == 1 then
    L2.code = 0
  elseif L3 == 2 then
    L2.code = 1
  else
    L2.code = 1523
  end
  L4 = L2.code
  if L4 == 1523 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L2.code
    L4 = L4(L5)
    L2.msg = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L2
  L4(L5)
end
getWanPortStatus = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.XQPreference"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQConfigs"
  L2 = L2(L3)
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "mode"
  L3 = L3(L4)
  L4 = require
  L5 = "luci.model.uci"
  L4 = L4(L5)
  L4 = L4.cursor
  L4 = L4()
  L5 = {}
  L6 = 0
  if L3 then
    L7 = L0.getWanLanType
    L8 = L3
    L7 = L7(L8)
    if L7 == false then
      L6 = 1524
    elseif L3 == "2.5G" then
      L5["2GwanType"] = L7
      L9 = L4
      L8 = L4.get
      L10 = "network"
      L11 = "wan"
      L12 = "username"
      L8 = L8(L9, L10, L11, L12)
      L5["2GpppoeName"] = L8
      L9 = L4
      L8 = L4.get
      L10 = "network"
      L11 = "wan"
      L12 = "password"
      L8 = L8(L9, L10, L11, L12)
      L5["2GpppoePassword"] = L8
    else
      L5["1GwanType"] = L7
      L9 = L4
      L8 = L4.get
      L10 = "network"
      L11 = "wan"
      L12 = "username"
      L8 = L8(L9, L10, L11, L12)
      L5["1GpppoeName"] = L8
      L9 = L4
      L8 = L4.get
      L10 = "network"
      L11 = "wan"
      L12 = "password"
      L8 = L8(L9, L10, L11, L12)
      L5["1GpppoePassword"] = L8
    end
  end
  if L6 ~= 0 then
    L7 = _UPVALUE1_
    L7 = L7.getErrorMessage
    L8 = L6
    L7 = L7(L8)
    L5.msg = L7
  end
  L5.code = L6
  L7 = _UPVALUE0_
  L7 = L7.write_json
  L8 = L5
  L7(L8)
end
getWanLanPort = L4
function L4()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = {}
  L2 = L0.getWanLanMode
  L2 = L2()
  L1.mode = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getWanLanMode = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = _UPVALUE0_
  L1 = L1.formvalue
  L2 = "mode"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L3 = L0.setWanLanPort
  L4 = L1
  L3 = L3(L4)
  if not L3 then
    L2.code = 1523
  end
  L4 = L2.code
  if L4 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L2.code
    L4 = L4(L5)
    L2.msg = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L2
  L4(L5)
end
setWanLanPort = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L1.service = ""
  L1.name = ""
  L1.passwd = ""
  L2 = L0.pppoeCatch
  L3 = 50
  L2 = L2(L3)
  L3 = L2.code
  if L3 == 0 then
    L3 = L2.service
    L1.service = L3
    L3 = L2.pppoename
    L1.name = L3
    L3 = L2.pppoepasswd
    L1.passwd = L3
  else
    L1.code = 1621
  end
  L3 = L1.code
  if L3 ~= 0 then
    L3 = _UPVALUE0_
    L3 = L3.getErrorMessage
    L4 = L1.code
    L3 = L3(L4)
    L1.msg = L3
  end
  L3 = _UPVALUE1_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
pppoeCatch = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = {}
  L2.ssid = ""
  L2.band = ""
  L3 = L0.apcli_get_scanlist
  L4 = L2
  L3 = L3(L4)
  L1.list = L3
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
getScanList = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.module.XQAPModule"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = L0.apcli_get_active
  L4 = L4()
  L5 = {}
  L5.code = 0
  L6 = L1.check
  L7 = 0
  L8 = L1.KEY_FUNC_WIFI_RELAY
  L9 = 1
  L6(L7, L8, L9)
  L6 = L2.disableWifiAPMode
  L7 = L4
  L6, L7, L8, L9 = L6(L7)
  L5.ssid = L7
  L5.ssid5G = L8
  L5.ssid5G2 = L9
  L5.lanip = L6
  L10 = _UPVALUE0_
  L10 = L10.write_json
  L11 = L5
  L10(L11)
end
disableap = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.XQPreference"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQWifiUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQLanWanUtil"
  L3 = L3(L4)
  L4 = nil
  L5 = {}
  L5.code = 0
  L5.mode = 0
  L6 = L0.getNetMode
  L6 = L6()
  L7 = L3.getLanGwaddr
  L7 = L7()
  L8 = L1.get
  L9 = "ap_hostname"
  L10 = ""
  L8 = L8(L9, L10)
  if L6 == "lanapmode" then
    L5.mode = 2
    L5.hostip = L7
    L5.hostname = L8
  elseif L6 == "wifiapmode" then
    L5.mode = 1
    L5.hostip = L7
    L5.hostname = L8
    L9 = L2.apcli_get_active
    L9 = L9()
    L4 = L9
    L9 = L2.apcli_get_wifinet
    L10 = L4
    L9 = L9(L10)
    if L9 then
      L11 = L9
      L10 = L9.ssid
      L10 = L10(L11)
      L5.ssid = L10
    else
      L5.mode = 0
    end
  end
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L5
  L9(L10)
end
getMode = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = _UPVALUE0_
  L1 = L1.formvalue
  L2 = "wan_sec"
  L1 = L1(L2)
  L1 = L1 or L1
  L2 = {}
  L2.code = 0
  L2.link = 0
  L3 = L0.getWanLink
  L4 = L1
  L3 = L3(L4)
  if L3 then
    L2.link = 1
  end
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
getWanLinkStatus = L4
function L4(A0, A1, A2)
  local L3, L4, L5, L6, L7, L8, L9, L10
  L3 = require
  L4 = "xiaoqiang.util.XQSecureUtil"
  L3 = L3(L4)
  L4 = 0
  L5 = luci
  L5 = L5.dispatcher
  L5 = L5.getremotemac
  L5 = L5()
  L6 = L3.checkNonce
  L7 = A0
  L8 = L5
  L6 = L6(L7, L8)
  if L6 then
    L7 = L3.checkUser
    L8 = "admin"
    L9 = A0
    L10 = A1
    L7 = L7(L8, L9, L10)
    if L7 then
      L8 = L3.saveCiphertextPwd
      L9 = "admin"
      L10 = A2
      L8 = L8(L9, L10)
      if L8 then
        L4 = 0
      else
        L4 = 1553
      end
    else
      L4 = 1552
    end
  else
    L4 = 1582
  end
  return L4
end
_savePassword = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.module.XQAPModule"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQSysUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQWifiUtil"
  L4 = L4(L5)
  L5 = require
  L6 = "xiaoqiang.util.XQPortServiceUtil"
  L5 = L5(L6)
  L6 = {}
  L6.code = 0
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "ssid"
  L7 = L7(L8)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "password"
  L8 = L8(L9)
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "nssid"
  L9 = L9(L10)
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "nencryption"
  L10 = L10(L11)
  L11 = _UPVALUE0_
  L11 = L11.formvalue
  L12 = "npassword"
  L11 = L11(L12)
  L12 = _UPVALUE0_
  L12 = L12.formvalue
  L13 = "nssid5G"
  L12 = L12(L13)
  L13 = _UPVALUE0_
  L13 = L13.formvalue
  L14 = "nssid5G2"
  L13 = L13(L14)
  L14 = tonumber
  L15 = _UPVALUE0_
  L15 = L15.formvalue
  L16 = "initialize"
  L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34 = L15(L16)
  L14 = L14(L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34)
  if L14 == 1 then
    L14 = 1
    if L14 then
      goto lbl_61
    end
  end
  L14 = 0
  ::lbl_61::
  L15 = _UPVALUE0_
  L15 = L15.formvalue
  L16 = "nonce"
  L15 = L15(L16)
  L16 = _UPVALUE0_
  L16 = L16.formvalue
  L17 = "band"
  L16 = L16(L17)
  L17 = _UPVALUE0_
  L17 = L17.formvalue
  L18 = "newPwd"
  L17 = L17(L18)
  L18 = _UPVALUE0_
  L18 = L18.formvalue
  L19 = "oldPwd"
  L18 = L18(L19)
  L19 = _UPVALUE0_
  L19 = L19.formvalue
  L20 = "channel"
  L19 = L19(L20)
  L20 = _UPVALUE0_
  L20 = L20.formvalue
  L21 = "enctype"
  L20 = L20(L21)
  L21 = _UPVALUE0_
  L21 = L21.formvalue
  L22 = "encryption"
  L21 = L21(L22)
  L22 = nil
  L23 = L0.check
  L24 = 0
  L25 = L0.KEY_FUNC_WIFI_RELAY
  L26 = 1
  L23(L24, L25, L26)
  L23 = L5.psMultiwanEnable
  L23 = L23()
  if 1 == L23 then
    L6.code = 3000
  elseif not L7 then
    L6.code = 1523
  end
  L23 = L6.code
  if 0 == L23 then
    L23 = L2.setWifiAPMode
    L24 = L7
    L25 = L8
    L26 = L20
    L27 = L21
    L28 = L16
    L29 = L19
    L30 = bandwidth
    L31 = L9
    L32 = L10
    L33 = L11
    L34 = L12
    L23 = L23(L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34)
    L22 = L23
    L23 = L22.scan
    if not L23 then
      L6.code = 1617
    else
      L23 = L22.connected
      if L23 then
        L23 = L1.isStrNil
        L24 = L22.ip
        L23 = L23(L24)
        if L23 then
          L6.code = 1615
        else
          L23 = L22.ip
          L6.ip = L23
          L23 = L4.getWifissid
          L23, L24, L25 = L23()
          L6.ssid5G2 = L25
          L6.ssid5G = L24
          L6.ssid = L23
        end
      else
        L6.code = 1616
        L23 = _UPVALUE1_
        L23 = L23.getErrorMessage
        L24 = L6.code
        L23 = L23(L24)
        L24 = "("
        L25 = tostring
        L26 = L22.conerrmsg
        L25 = L25(L26)
        L26 = ")"
        L23 = L23 .. L24 .. L25 .. L26
        L6.msg = L23
      end
    end
  end
  L23 = L6.code
  if L23 ~= 0 then
    L23 = L6.code
    if L23 ~= 1616 then
      L23 = _UPVALUE1_
      L23 = L23.getErrorMessage
      L24 = L6.code
      L23 = L23(L24)
      L6.msg = L23
  end
  else
    L23 = L6.code
    if L23 == 0 then
      if L14 == 1 then
        L23 = L1.isStrNil
        L24 = L22.ssid
        L23 = L23(L24)
        if not L23 then
          L23 = L3.setRouterName
          L24 = L22.ssid
          L23(L24)
          if L15 and L17 and L18 then
            L23 = _savePassword
            L24 = L15
            L25 = L18
            L26 = L17
            L23 = L23(L24, L25, L26)
            L6.code = L23
          end
        end
      end
      L23 = L3.setInited
      L23()
      L23 = L2.actionForEnableWifiAP
      L23()
    end
  end
  L23 = _UPVALUE0_
  L23 = L23.write_json
  L24 = L6
  L23(L24)
end
setWifiApMode = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.module.XQAPModule"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQSysUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQWifiUtil"
  L4 = L4(L5)
  L5 = require
  L6 = "luci.json"
  L5 = L5(L6)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "ssid"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "password"
  L7 = L7(L8)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "nssid"
  L8 = L8(L9)
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "nencryption"
  L9 = L9(L10)
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "npassword"
  L10 = L10(L11)
  L11 = _UPVALUE0_
  L11 = L11.formvalue
  L12 = "nssid5G"
  L11 = L11(L12)
  L12 = tonumber
  L13 = _UPVALUE0_
  L13 = L13.formvalue
  L14 = "initialize"
  L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33 = L13(L14)
  L12 = L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33)
  if L12 == 1 then
    L12 = 1
    if L12 then
      goto lbl_55
    end
  end
  L12 = 0
  ::lbl_55::
  L13 = _UPVALUE0_
  L13 = L13.formvalue
  L14 = "nonce"
  L13 = L13(L14)
  L14 = _UPVALUE0_
  L14 = L14.formvalue
  L15 = "band"
  L14 = L14(L15)
  L15 = _UPVALUE0_
  L15 = L15.formvalue
  L16 = "newPwd"
  L15 = L15(L16)
  L16 = _UPVALUE0_
  L16 = L16.formvalue
  L17 = "oldPwd"
  L16 = L16(L17)
  L17 = _UPVALUE0_
  L17 = L17.formvalue
  L18 = "channel"
  L17 = L17(L18)
  L18 = _UPVALUE0_
  L18 = L18.formvalue
  L19 = "enctype"
  L18 = L18(L19)
  L19 = _UPVALUE0_
  L19 = L19.formvalue
  L20 = "encryption"
  L19 = L19(L20)
  L20 = nil
  L21 = L0.check
  L22 = 0
  L23 = L0.KEY_FUNC_WIFI_RELAY
  L24 = 1
  L21(L22, L23, L24)
  L21 = {}
  L21.code = 0
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "band"
  L22 = L22(L23)
  L21.band = L22
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "nonce"
  L22 = L22(L23)
  L21.nonce = L22
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "newPwd"
  L22 = L22(L23)
  L21.newPwd = L22
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "oldPwd"
  L22 = L22(L23)
  L21.oldPwd = L22
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "nssid"
  L22 = L22(L23)
  L21.nssid = L22
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "nencryption"
  L22 = L22(L23)
  L21.nencryption = L22
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "npassword"
  L22 = L22(L23)
  L21.npassword = L22
  L22 = _UPVALUE0_
  L22 = L22.formvalue
  L23 = "nssid5G"
  L22 = L22(L23)
  L21.nssid5G = L22
  if L6 then
    L22 = L2.appSetWifiAPMode
    L23 = L6
    L24 = L7
    L25 = L18
    L26 = L19
    L27 = L14
    L28 = L17
    L29 = bandwidth
    L30 = L8
    L31 = L9
    L32 = L10
    L33 = L11
    L22 = L22(L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33)
    L20 = L22
    L22 = L20.scan
    if not L22 then
      L21.code = 1617
    else
      L22 = L20.connected
      if L22 then
        L22 = L20.ifname
        L21.ifname = L22
        L22 = L20.ssid
        L21.ssid = L22
        L22 = L20.password
        L21.password = L22
        L22 = L20.enctype
        L21.enctype = L22
        L22 = L20.encryption
        L21.encryption = L22
        L22 = L20.conerrmsg
        L21.conerrmsg = L22
        L22 = L20.oldlan
        L21.oldlan = L22
      else
        L21.code = 1616
        L22 = _UPVALUE1_
        L22 = L22.getErrorMessage
        L23 = L21.code
        L22 = L22(L23)
        L23 = "("
        L24 = tostring
        L25 = L20.ssid
        L24 = L24(L25)
        L25 = ")"
        L22 = L22 .. L23 .. L24 .. L25
        L21.msg = L22
      end
    end
  else
    L21.code = 1523
  end
  L22 = L21.code
  if L22 ~= 0 then
    L22 = L21.code
    if L22 ~= 1616 then
      L22 = _UPVALUE1_
      L22 = L22.getErrorMessage
      L23 = L21.code
      L22 = L22(L23)
      L21.msg = L22
    end
  end
  L22 = io
  L22 = L22.popen
  L23 = "cat /proc/uptime | awk '{print $1}'"
  L22 = L22(L23)
  L23 = string
  L23 = L23.trim
  L25 = L22
  L24 = L22.read
  L26 = "*all"
  L24, L25, L26, L27, L28, L29, L30, L31, L32, L33 = L24(L25, L26)
  L23 = L23(L24, L25, L26, L27, L28, L29, L30, L31, L32, L33)
  L21.uptime = L23
  L23 = assert
  L24 = io
  L24 = L24.open
  L25 = "/tmp/luci_set_wifi_ap_mode_result"
  L26 = "w"
  L24, L25, L26, L27, L28, L29, L30, L31, L32, L33 = L24(L25, L26)
  L23 = L23(L24, L25, L26, L27, L28, L29, L30, L31, L32, L33)
  L24 = L5.encode
  L25 = L21
  L24 = L24(L25)
  L26 = L23
  L25 = L23.write
  L27 = L24
  L25(L26, L27)
  L26 = L23
  L25 = L23.close
  L25(L26)
  L25 = L21.code
  if L25 == 0 then
    L25 = tonumber
    L26 = os
    L26 = L26.execute
    L27 = "sleep 2;dhcp_apclient.sh start "
    L28 = L21.ifname
    L27 = L27 .. L28
    L26, L27, L28, L29, L30, L31, L32, L33 = L26(L27)
    L25 = L25(L26, L27, L28, L29, L30, L31, L32, L33)
    L26 = L0.log
    L27 = 6
    L28 = "dhcpcode:"
    L29 = L25
    L26(L27, L28, L29)
    if L25 ~= 0 then
      L26 = tonumber
      L27 = os
      L27 = L27.execute
      L28 = "sleep 2;dhcp_apclient.sh start br-lan"
      L27, L28, L29, L30, L31, L32, L33 = L27(L28)
      L26 = L26(L27, L28, L29, L30, L31, L32, L33)
      L25 = L26
    end
  end
  L25 = _UPVALUE0_
  L25 = L25.write_json
  L26 = L21
  L25(L26)
end
appSetWifiApMode = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQSysUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.module.XQAPModule"
  L2 = L2(L3)
  L3 = tonumber
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "initialize"
  L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17 = L4(L5)
  L3 = L3(L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17)
  if L3 == 1 then
    L3 = 1
    if L3 then
      goto lbl_22
    end
  end
  L3 = 0
  ::lbl_22::
  L4 = require
  L5 = "luci.json"
  L4 = L4(L5)
  L5 = {}
  L5.code = ""
  L6 = io
  L6 = L6.open
  L7 = "/tmp/luci_set_wifi_ap_mode_result"
  L8 = "r"
  L6 = L6(L7, L8)
  if L6 == nil then
    L5.code = 2
  else
    L8 = L6
    L7 = L6.read
    L9 = "*a"
    L7 = L7(L8, L9)
    L8 = L4.decode
    L9 = L7
    L8 = L8(L9)
    L10 = L6
    L9 = L6.close
    L9(L10)
    L9 = io
    L9 = L9.popen
    L10 = "cat /proc/uptime | awk '{print $1}'"
    L9 = L9(L10)
    L10 = string
    L10 = L10.trim
    L12 = L9
    L11 = L9.read
    L13 = "*all"
    L11, L12, L13, L14, L15, L16, L17 = L11(L12, L13)
    L10 = L10(L11, L12, L13, L14, L15, L16, L17)
    L11 = L8.uptime
    L11 = L10 - L11
    if 300 < L11 then
      L5.code = 3
    end
    L11 = L8.code
    if L11 then
      L11 = L8.code
      if L11 == 0 then
        L5.code = 0
        L11 = L5.nonce
        L12 = L5.newPwd
        L13 = L5.oldPwd
        if L3 == 1 then
          L14 = XQFunction
          L14 = L14.isStrNil
          L15 = L5.ssid
          L14 = L14(L15)
          if not L14 then
            L14 = L1.setRouterName
            L15 = L5.ssid
            L14(L15)
            if L11 and L12 and L13 then
              L14 = _savePassword
              L15 = L11
              L16 = L13
              L17 = L12
              L14 = L14(L15, L16, L17)
              L5.code = L14
            end
          end
        end
        L14 = L2.setWifiAPModeConfig
        L14()
        L14 = L1.setInited
        L14()
        L14 = L2.actionForEnableWifiAP
        L14()
      end
    end
    L11 = L8.msg
    L5.msg = L11
  end
  L7 = _UPVALUE0_
  L7 = L7.write_json
  L8 = L5
  L7(L8)
end
wifiAPserviceRestart = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "luci.json"
  L0 = L0(L1)
  L1 = {}
  L1.code = ""
  L2 = io
  L2 = L2.open
  L3 = "/tmp/luci_set_wifi_ap_mode_result"
  L4 = "r"
  L2 = L2(L3, L4)
  if L2 == nil then
    L1.code = 2
  else
    L4 = L2
    L3 = L2.read
    L5 = "*a"
    L3 = L3(L4, L5)
    L4 = L0.decode
    L5 = L3
    L4 = L4(L5)
    L6 = L2
    L5 = L2.close
    L5(L6)
    L5 = L4.ipaddr
    if L5 then
      L5 = L4.code
      if L5 == 0 then
        L1.code = 0
    end
    else
      L1.code = 1
    end
  end
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
getModeStatus = L4
function L4()
  local L0, L1, L2, L3
  L0 = {}
  L0.code = 0
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = L1.get_active_apcli_index
  L2 = L2()
  L0.index = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L0
  L2(L3)
end
getActiveApcliIndex = L4
function L4(A0)
  local L1, L2, L3, L4
  if A0 == nil then
    return
  else
    L1 = type
    L2 = A0
    L1 = L1(L2)
    if L1 == "table" then
      L1 = require
      L2 = "luci.json"
      L1 = L1(L2)
      L2 = "echo \""
      L3 = L1.decode
      L4 = A0
      L3 = L3(L4)
      L4 = "\" > /tmp/luci_set_auto_wifi_ap_mode_result"
      L2 = L2 .. L3 .. L4
      L3 = os
      L3 = L3.execute
      L4 = L2
      L3(L4)
    else
      L1 = type
      L2 = A0
      L1 = L1(L2)
      if L1 ~= "number" then
        L1 = type
        L2 = A0
        L1 = L1(L2)
        if L1 ~= "boolean" then
          goto lbl_36
        end
      end
      do return end
      goto lbl_37
      ::lbl_36::
      return
    end
  end
  ::lbl_37::
end
write_json_tmpfile = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.module.XQAPModule"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQSysUtil"
  L4 = L4(L5)
  L5 = require
  L6 = "xiaoqiang.util.XQWifiUtil"
  L5 = L5(L6)
  L6 = require
  L7 = "xiaoqiang.module.XQAPModule"
  L6 = L6(L7)
  L7 = require
  L8 = "xiaoqiang.module.XQExtendWifi"
  L7 = L7(L8)
  L8 = require
  L9 = "luci.model.uci"
  L8 = L8(L9)
  L8 = L8.cursor
  L8 = L8()
  L9 = {}
  L9.code = 0
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "ssid"
  L10 = L10(L11)
  L11 = _UPVALUE0_
  L11 = L11.formvalue
  L12 = "password"
  L11 = L11(L12)
  L12 = _UPVALUE0_
  L12 = L12.formvalue
  L13 = "band"
  L12 = L12(L13)
  L13 = _UPVALUE0_
  L13 = L13.formvalue
  L14 = "channel"
  L13 = L13(L14)
  L14 = _UPVALUE0_
  L14 = L14.formvalue
  L15 = "enctype"
  L14 = L14(L15)
  L15 = _UPVALUE0_
  L15 = L15.formvalue
  L16 = "encryption"
  L15 = L15(L16)
  L16, L17, L18 = nil, nil, nil
  L19 = L1.log
  L20 = 1
  L21 = "ssid:"
  L22 = L10
  L23 = " password:"
  L24 = L11
  L25 = "band:"
  L26 = L12
  L27 = "channel:"
  L28 = L13
  L29 = "enctype:"
  L30 = L14
  L31 = "enctyption"
  L32 = L15
  L21 = L21 .. L22 .. L23 .. L24 .. L25 .. L26 .. L27 .. L28 .. L29 .. L30 .. L31 .. L32
  L19(L20, L21)
  L19 = L5.getAllWifiInfo
  L19 = L19()
  L20 = L19[1]
  if L20 then
    L20 = L19[1]
    L20 = L20.status
    if L20 == "1" then
      L20 = L19[1]
      L20 = L20.ssid
      self_ssid = L20
      L20 = L19[1]
      L17 = L20.password
      if L17 == nil then
        L17 = ""
      end
      L18 = "2g"
  end
  else
    L20 = L19[2]
    if L20 then
      L20 = wifinfo
      L20 = L20[2]
      L20 = L20.status
      if L20 == "1" then
        L20 = L19[2]
        L20 = L20.ssid
        self_ssid = L20
        L20 = L19[2]
        L17 = L20.password
        L18 = "5g"
        L20 = L1.log
        L21 = 1
        L22 = "ssid:"
        L23 = self_ssid
        L24 = " password: "
        L25 = L17
        L26 = " admin_password: "
        L27 = admin_password
        L28 = " band"
        L29 = L18
        L22 = L22 .. L23 .. L24 .. L25 .. L26 .. L27 .. L28 .. L29
        L20(L21, L22)
    end
    else
      L9.code = 1646
      L20 = _UPVALUE1_
      L20 = L20.getErrorMessage
      L21 = L9.code
      L20 = L20(L21)
      L9.msg = L20
      L20 = L1.log
      L21 = "get self wifi info error"
      L20(L21)
      L20 = _UPVALUE0_
      L20 = L20.write_json
      L21 = L9
      L20(L21)
      return
    end
  end
  L21 = L8
  L20 = L8.get
  L22 = "account"
  L23 = "common"
  L24 = "admin"
  L20 = L20(L21, L22, L23, L24)
  L21 = L6.extendwifi_set_connect
  L22 = L10
  L23 = L11
  L24 = L14
  L25 = L15
  L26 = L12
  L27 = L13
  L21 = L21(L22, L23, L24, L25, L26, L27)
  L22 = L21.ip
  if L22 ~= "" then
    L9.code = 0
    L9.msg = "connect succces!"
  else
    L22 = L21.connected
    if L22 then
      L22 = L21.dhcpcode
      if L22 == 100 then
        L9.code = 1646
        L22 = _UPVALUE1_
        L22 = L22.getErrorMessage
        L23 = L9.code
        L22 = L22(L23)
        L9.msg = L22
      else
        L22 = L21.dhcpcode
        if L22 == 2 then
          L9.code = 1647
          L22 = _UPVALUE1_
          L22 = L22.getErrorMessage
          L23 = L9.code
          L22 = L22(L23)
          L9.msg = L22
        else
          L22 = L21.dhcpcode
          if L22 == 102 then
            L9.code = 1648
            L22 = _UPVALUE1_
            L22 = L22.getErrorMessage
            L23 = L9.code
            L22 = L22(L23)
            L9.msg = L22
          else
            L22 = L21.dhcpcode
            if L22 ~= 105 then
              L22 = L21.dhcpcode
              if L22 ~= 106 then
                goto lbl_198
              end
            end
            L9.code = 1649
            L22 = _UPVALUE1_
            L22 = L22.getErrorMessage
            L23 = L9.code
            L22 = L22(L23)
            L9.msg = L22
            goto lbl_236
            ::lbl_198::
            L22 = L21.dhcpcode
            if L22 == 107 then
              L9.code = 1650
              L22 = _UPVALUE1_
              L22 = L22.getErrorMessage
              L23 = L9.code
              L22 = L22(L23)
              L9.msg = L22
            else
              L22 = L21.dhcpcode
              if L22 ~= 110 then
                L22 = L21.dhcpcode
                if L22 ~= 111 then
                  goto lbl_221
                end
              end
              L9.code = 1651
              L22 = _UPVALUE1_
              L22 = L22.getErrorMessage
              L23 = L9.code
              L22 = L22(L23)
              L9.msg = L22
              goto lbl_236
              ::lbl_221::
              L22 = L21.dhcpcode
              if L22 ~= 115 then
                L22 = L21.dhcpcode
                if L22 ~= 116 then
                  goto lbl_234
                end
              end
              L9.code = 1652
              L22 = _UPVALUE1_
              L22 = L22.getErrorMessage
              L23 = L9.code
              L22 = L22(L23)
              L9.msg = L22
              goto lbl_236
              ::lbl_234::
              L9.code = 1619
              L9.msg = "dhcp failed!"
            end
          end
        end
      end
      ::lbl_236::
      L22 = _UPVALUE0_
      L22 = L22.write_json
      L23 = L9
      L22(L23)
      L22 = L1.log
      L23 = "dhcp failed"
      L22(L23)
      return
    else
      L9.code = 1616
      L9.msg = "wifi connect faild!"
      L22 = _UPVALUE0_
      L22 = L22.write_json
      L23 = L9
      L22(L23)
      L22 = L1.log
      L23 = "wifi connect failed"
      L22(L23)
      return
    end
  end
  L22 = L1.log
  L23 = 1
  L24 = "connect peer success"
  L22(L23, L24)
  L22 = "admin_password="
  L23 = L20
  L24 = "&ssid="
  L25 = self_ssid
  L26 = "&password="
  L27 = L17
  L28 = "&band="
  L29 = L18
  L22 = L22 .. L23 .. L24 .. L25 .. L26 .. L27 .. L28 .. L29
  L23 = L1.log
  L24 = 1
  L25 = "params:"
  L26 = L22
  L25 = L25 .. L26
  L23(L24, L25)
  L23 = L7.ExtendWifiRequestRemoteAPIForLua
  L24 = "/api/xqnetwork/set_wifi_auto_ap_mode"
  L25 = ""
  L26 = L22
  L23 = L23(L24, L25, L26)
  L24 = L23.code
  if L24 == 0 then
    L24 = require
    L25 = "cjson"
    L24 = L24(L25)
    L25 = L24.decode
    L26 = L23.msg
    L25 = L25(L26)
    L26 = L25.code
    if L26 == 0 then
      L26 = L1.log
      L27 = 1
      L28 = "auto wifi ap mode success"
      L26(L27, L28)
      L26 = {}
      L26.code = 0
      L27 = self_ssid
      L26.ssid_24g = L27
      L27 = self_ssid
      L28 = "_5G"
      L27 = L27 .. L28
      L26.ssid_5g = L27
      L26.password_24g = L17
      L26.password_5g = L17
      L27 = _UPVALUE0_
      L27 = L27.write_json
      L28 = L26
      L27(L28)
    else
      L26 = L1.log
      L27 = 1
      L28 = "auto wifi ap mode error"
      L26(L27, L28)
      L26 = _UPVALUE0_
      L26 = L26.write
      L27 = L23.msg
      L26(L27)
    end
  else
    L24 = L1.log
    L25 = 1
    L26 = "auto wifi ap mode http request error"
    L24(L25, L26)
    L24 = _UPVALUE1_
    L24 = L24.getErrorMessage
    L25 = L9.code
    L24 = L24(L25)
    L23.msg = L24
    L24 = _UPVALUE0_
    L24 = L24.write_json
    L25 = L23
    L24(L25)
  end
  L24 = L6.extednwifi_disconnect
  L25 = L18
  L24(L25)
end
setPeerWifiAutoAPMode = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.module.XQAPModule"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQSysUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQWifiUtil"
  L4 = L4(L5)
  L5 = require
  L6 = "luci.model.uci"
  L5 = L5(L6)
  L5 = L5.cursor
  L5 = L5()
  L6 = {}
  L6.code = 0
  L7 = _UPVALUE0_
  L7 = L7.write_json
  L8 = L6
  L7(L8)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "ssid"
  L7 = L7(L8)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "password"
  L8 = L8(L9)
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "admin_password"
  L9 = L9(L10)
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "band"
  L10 = L10(L11)
  L11 = L0.log
  L12 = 1
  L13 = "recv ssid:"
  L14 = L7
  L15 = " password"
  L16 = L8
  L17 = " band"
  L18 = L10
  L13 = L13 .. L14 .. L15 .. L16 .. L17 .. L18
  L11(L12, L13)
  L11 = "lua /usr/sbin/set_wifi_auto_ap_mode.lua "
  L12 = L7
  L13 = " "
  L14 = L8
  L15 = " "
  L16 = L10
  L17 = " "
  L18 = L9
  L11 = L11 .. L12 .. L13 .. L14 .. L15 .. L16 .. L17 .. L18
  L12 = L0.log
  L13 = 1
  L14 = "run cmd:"
  L15 = L11
  L14 = L14 .. L15
  L12(L13, L14)
  L12 = L1.forkExec
  L13 = L11
  L12(L13)
end
setWifiAutoApMode = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQWifiUtil"
  L1 = L1(L2)
  L2 = {}
  L2.code = 0
  L2.ssid = ""
  L2.signal = 0
  L2.band = ""
  L3 = nil
  L4 = L0.getNetMode
  L4 = L4()
  if L4 == "wifiapmode" then
    L5 = L1.apcli_get_active
    L5 = L5()
    L6 = L1.apcli_get_wifinet
    L7 = L5
    L6 = L6(L7)
    if L6 then
      L7 = L0.isStrNil
      L9 = L6
      L8 = L6.signal
      L8, L9 = L8(L9)
      L7 = L7(L8, L9)
      if not L7 then
        L7 = L1.miwifiutil_rssi_to_signal
        L9 = L6
        L8 = L6.signal
        L8, L9 = L8(L9)
        L7 = L7(L8, L9)
        L2.signal = L7
        L7 = L1.apcli_get_connect
        L8 = L5
        L7, L8 = L7(L8)
        if L7 == false then
          L2.signal = 0
        end
      end
    end
    L8 = L6
    L7 = L6.ssid
    L7 = L7(L8)
    L2.ssid = L7
    L7 = L1.apcli_get_real_signal
    L8 = L5
    L7 = L7(L8)
    L3 = L7
    if nil ~= L3 then
      L7 = L1.miwifiutil_rssi_to_signal
      L8 = L3
      L7 = L7(L8)
      L2.signal = L7
    end
  end
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L2
  L5(L6)
end
apcli_get_signal = L4
function L4()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.module.XQAPModule"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = L0.actionForEnableWifiAP
  L2()
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
serviceRestart = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQAPModule"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQSysUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.util.XQWifiUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQPortServiceUtil"
  L4 = L4(L5)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "ssid"
  L5 = L5(L6)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "password"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "nonce"
  L7 = L7(L8)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "newPwd"
  L8 = L8(L9)
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "oldPwd"
  L9 = L9(L10)
  L10 = tonumber
  L11 = _UPVALUE0_
  L11 = L11.formvalue
  L12 = "initialize"
  L11, L12, L13, L14, L15, L16, L17, L18, L19, L20 = L11(L12)
  L10 = L10(L11, L12, L13, L14, L15, L16, L17, L18, L19, L20)
  if L10 == 1 then
    L10 = 1
    if L10 then
      goto lbl_48
    end
  end
  L10 = 0
  ::lbl_48::
  L11 = L0.getNetMode
  L11 = L11()
  L12 = {}
  L12.code = 0
  L13 = L4.psMultiwanEnable
  L13 = L13()
  if 1 == L13 then
    L12.code = 3000
  elseif L11 == "wifiapmode" then
    L12.code = 1618
  end
  L13 = L12.code
  if 0 == L13 then
    if L10 == 1 and L5 and L6 and L7 and L8 and L9 then
      L13 = _savePassword
      L14 = L7
      L15 = L9
      L16 = L8
      L13 = L13(L14, L15, L16)
      L12.code = L13
      L13 = L12.code
      if L13 == 0 then
        L13 = L3.setWifiBasicInfo
        L14 = 1
        L15 = L5
        L16 = L6
        L17 = "psk2"
        L18, L19 = nil, nil
        L20 = 0
        L13(L14, L15, L16, L17, L18, L19, L20)
        L13 = L3.setWifiBasicInfo
        L14 = 2
        L15 = L5
        L16 = "_5G"
        L15 = L15 .. L16
        L16 = L6
        L17 = "psk2"
        L18, L19 = nil, nil
        L20 = 0
        L13(L14, L15, L16, L17, L18, L19, L20)
        L13 = L2.setInited
        L13()
        L13 = L2.setRouterName
        L14 = L5
        L13(L14)
      end
    end
    L13 = L12.code
    if L13 == 0 then
      L13 = L1.setLanAPMode
      L13 = L13()
      if L13 then
        L12.ip = L13
        L14 = L2.isEasymeshSupport
        L14 = L14()
        if L14 then
          L14 = L0.setUserModifiedModeFlag
          L14()
        end
      else
        L12.code = 1619
      end
    end
  end
  L13 = L12.code
  if L13 ~= 0 then
    L13 = _UPVALUE1_
    L13 = L13.getErrorMessage
    L14 = L12.code
    L13 = L13(L14)
    L12.msg = L13
  else
    L13 = L1.lanApServiceRestart
    L14 = true
    L15 = true
    L16 = false
    L13(L14, L15, L16)
  end
  L13 = _UPVALUE0_
  L13 = L13.write_json
  L14 = L12
  L13(L14)
end
setLanAP = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "xiaoqiang.util.XQSysUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQAPModule"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = {}
  L3.code = 0
  L4 = L1.disableLanAP
  L4 = L4()
  L3.ip = L4
  L4 = L1.lanApServiceRestart
  L5 = false
  L6 = true
  L7 = false
  L4(L5, L6, L7)
  L4 = L0.isEasymeshSupport
  L4 = L4()
  if L4 then
    L4 = L2.setUserModifiedModeFlag
    L4()
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L3
  L4(L5)
end
disableLanAP = L4
function L4()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = L0.wifiChannelQuality
  L2()
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
channelScanStart = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = L0.getAllWifiInfo
  L2 = L2()
  L3 = L2[1]
  if L3 then
    L3 = L2[1]
    L3 = L3.status
    if L3 == "1" then
      L3 = L0.scanWifiChannel
      L4 = 1
      L3 = L3(L4)
      L1["2G"] = L3
    end
  end
  L3 = 0
  L4 = L1["2G"]
  if L4 then
    L4 = L1["2G"]
    L4 = L4.code
    if L4 ~= 0 then
      L3 = 1
    end
  end
  L1.status = L3
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L1
  L4(L5)
end
getScanResult = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = tonumber
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "channel1"
  L2, L3, L4, L5, L6 = L2(L3)
  L1 = L1(L2, L3, L4, L5, L6)
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "channel2"
  L3, L4, L5, L6 = L3(L4)
  L2 = L2(L3, L4, L5, L6)
  L3 = {}
  L3.code = 0
  L4 = L0.iwprivSetChannel
  L5 = L1
  L6 = L2
  L4(L5, L6)
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L3
  L4(L5)
end
setChannel = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQDeviceUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQWifiUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.model.uci"
  L3 = L3(L4)
  L3 = L3.cursor
  L3 = L3()
  L4 = {}
  L4.code = 0
  L5 = io
  L5 = L5.open
  L6 = "/tmp/diag_sta_sig"
  L7 = "w+"
  L5 = L5(L6, L7)
  L6 = L0.trim
  L7 = L0.exec
  L8 = string
  L8 = L8.format
  L8, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26 = L8(L9)
  L7, L8, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26 = L7(L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26)
  L6 = L6(L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26)
  L8 = L5
  L7 = L5.write
  L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26 = L9(L10, L11)
  L7(L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26)
  L7 = L1.getDeviceList
  L8 = true
  L7 = L7(L8, L9)
  L7 = L7 or L7
  L8 = {}
  for L12, L13 in L9, L10, L11 do
    L14 = 0
    L15 = 0
    L16 = 0
    L17 = 0
    L18 = tonumber
    L19 = L13.port
    L18 = L18(L19)
    if L18 ~= 1 then
      L18 = tonumber
      L19 = L13.port
      L18 = L18(L19)
      if L18 ~= 2 then
        L18 = tonumber
        L19 = L13.port
        L18 = L18(L19)
        if L18 ~= 3 then
          goto lbl_106
        end
      end
    end
    L18 = L2.getWifiDeviceSignal
    L19 = string
    L19 = L19.upper
    L20 = L13.mac
    L19, L20, L21, L22, L23, L24, L25, L26 = L19(L20)
    L18 = L18(L19, L20, L21, L22, L23, L24, L25, L26)
    L14 = L18
    L18 = L2.getWifiDeviceSpeed
    L19 = string
    L19 = L19.upper
    L20 = L13.mac
    L19, L20, L21, L22, L23, L24, L25, L26 = L19(L20)
    L18 = L18(L19, L20, L21, L22, L23, L24, L25, L26)
    L18 = L18.upspeed
    L16 = L18 / 1000
    L18 = L2.getWifiDeviceSpeed
    L19 = string
    L19 = L19.upper
    L20 = L13.mac
    L19, L20, L21, L22, L23, L24, L25, L26 = L19(L20)
    L18 = L18(L19, L20, L21, L22, L23, L24, L25, L26)
    L18 = L18.downspeed
    L17 = L18 / 1000
    L18 = tonumber
    L20 = L3
    L19 = L3.get
    L21 = "diag"
    L22 = "config"
    L23 = "signal_thr"
    L19 = L19(L20, L21, L22, L23)
    L19 = L19 or L19
    L18 = L18(L19)
    signal_thr = L18
    L18 = signal_thr
    if L14 < L18 then
      L15 = 1
    end
    ::lbl_106::
    L18 = table
    L18 = L18.insert
    L19 = L8
    L20 = {}
    L21 = L13.name
    L20.name = L21
    L21 = string
    L21 = L21.upper
    L22 = L13.mac
    L21 = L21(L22)
    L20.mac = L21
    L21 = L13.ip
    L20.ip = L21
    L21 = L13.port
    L20.port = L21
    L20.signal = L14
    L20.signal_warning = L15
    L20.upspeed = L16
    L20.downspeed = L17
    L21 = L13.statistics
    L21 = L21.online
    L20.onlinetime = L21
    L18(L19, L20)
    L18 = "PASS"
    if L15 == 1 then
      L18 = "FAIL"
    end
    L19 = L13.port
    if L19 ~= 0 then
      L20 = L5
      L19 = L5.write
      L21 = string
      L21 = L21.format
      L22 = "name:%s, mac: %s, signal:%s, result:%s\n"
      L23 = L13.name
      L24 = string
      L24 = L24.upper
      L25 = L13.mac
      L24 = L24(L25)
      L25 = L14
      L26 = L18
      L21, L22, L23, L24, L25, L26 = L21(L22, L23, L24, L25, L26)
      L19(L20, L21, L22, L23, L24, L25, L26)
    end
  end
  L9(L10)
  L9(L10)
  L4.devicelist = L8
  L9(L10)
end
getDiagDeviceList = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = {}
  L3 = L0.execl
  L7, L8, L9, L10, L11, L12, L13, L14 = L4(L5)
  L3 = L3(L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14)
  for L7, L8 in L4, L5, L6 do
    L9 = L0.trim
    L10 = L0.exec
    L11 = string
    L11 = L11.format
    L12 = "basename %s"
    L13 = L8
    L11, L12, L13, L14 = L11(L12, L13)
    L10, L11, L12, L13, L14 = L10(L11, L12, L13, L14)
    L9 = L9(L10, L11, L12, L13, L14)
    L10 = L0.trim
    L11 = L0.exec
    L12 = string
    L12 = L12.format
    L13 = "getdisk bus %s"
    L14 = L9
    L12, L13, L14 = L12(L13, L14)
    L11, L12, L13, L14 = L11(L12, L13, L14)
    L10 = L10(L11, L12, L13, L14)
    L11 = table
    L11 = L11.insert
    L12 = L2
    L13 = {}
    L13.diskname = L9
    L13.disktype = L10
    L11(L12, L13)
  end
  L1.disklist = L2
  return L1
end
getDiagDiskInfo = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10
  L0 = {}
  L0.code = 0
  L0.status = 0
  L1 = getDiagDiskInfo
  L1 = L1()
  L2 = L1.disklist
  for L6, L7 in L3, L4, L5 do
    L8 = L7.disktype
    L9 = L8
    L8 = L8.match
    L10 = "^USB"
    L8 = L8(L9, L10)
    if L8 then
      L0.status = 1
      break
    end
  end
  L3(L4)
end
getDiagUdiskStatus = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10
  L0 = {}
  L0.code = 0
  L0.status = 0
  L1 = getDiagDiskInfo
  L1 = L1()
  L2 = L1.disklist
  for L6, L7 in L3, L4, L5 do
    L8 = L7.disktype
    L9 = L8
    L8 = L8.match
    L10 = "^SATA"
    L8 = L8(L9, L10)
    if L8 then
      L0.status = 1
      break
    end
  end
  L3(L4)
end
getDiagDiskStatus = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQDeviceUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L3 = 8
  L4 = 2 * L3
  L4 = L4 + 2
  L5 = nil
  L7 = L2
  L6 = L2.get
  L8 = "diag"
  L9 = "config"
  L10 = "iperf_test_thr"
  L6 = L6(L7, L8, L9, L10)
  L6 = L6 or L6
  L7 = 1
  L8 = "/tmp/iperf_test_result"
  L9 = {}
  L9.code = 0
  L10 = io
  L10 = L10.open
  L11 = "/tmp/diag_sta_iperf"
  L12 = "w+"
  L10 = L10(L11, L12)
  L11 = L0.trim
  L12 = L0.exec
  L13 = string
  L13 = L13.format
  L14 = "date"
  L13, L14, L15, L16, L17, L18, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33 = L13(L14)
  L12, L13, L14, L15, L16, L17, L18, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33 = L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33)
  L11 = L11(L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33)
  L13 = L10
  L12 = L10.write
  L14 = string
  L14 = L14.format
  L15 = "station iperf test at %s, result is:\n"
  L16 = L11
  L14, L15, L16, L17, L18, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33 = L14(L15, L16)
  L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33)
  L12 = L1.getDeviceList
  L13 = true
  L14 = true
  L12 = L12(L13, L14)
  L12 = L12 or L12
  L13 = {}
  L14, L15, L16, L17, L18 = nil, nil, nil, nil, nil
  for L22, L23 in L19, L20, L21 do
    L24 = L0.exec
    L25 = string
    L25 = L25.format
    L26 = "timeout -t %d /usr/bin/iperf -c %s -d -t %d > %s.%d"
    L27 = L4
    L28 = L23.ip
    L29 = L3
    L30 = L8
    L31 = L7
    L25, L26, L27, L28, L29, L30, L31, L32, L33 = L25(L26, L27, L28, L29, L30, L31)
    L24(L25, L26, L27, L28, L29, L30, L31, L32, L33)
    L24 = L0.trim
    L25 = L0.exec
    L26 = string
    L26 = L26.format
    L27 = "cat %s.%d | grep \"Mbits/sec\" | wc -l"
    L28 = L8
    L29 = L7
    L26, L27, L28, L29, L30, L31, L32, L33 = L26(L27, L28, L29)
    L25, L26, L27, L28, L29, L30, L31, L32, L33 = L25(L26, L27, L28, L29, L30, L31, L32, L33)
    L24 = L24(L25, L26, L27, L28, L29, L30, L31, L32, L33)
    L5 = L24
    L24 = tonumber
    L25 = L5
    L24 = L24(L25)
    if L24 == 2 then
      L24 = L0.trim
      L25 = L0.exec
      L26 = string
      L26 = L26.format
      L27 = "cat %s.%d | awk -F 'Bytes' '/Bytes/{print $2}' | awk -F ' ' '{print $1}' | awk 'NR==1'"
      L28 = L8
      L29 = L7
      L26, L27, L28, L29, L30, L31, L32, L33 = L26(L27, L28, L29)
      L25, L26, L27, L28, L29, L30, L31, L32, L33 = L25(L26, L27, L28, L29, L30, L31, L32, L33)
      L24 = L24(L25, L26, L27, L28, L29, L30, L31, L32, L33)
      L16 = L24
      L24 = L0.trim
      L25 = L0.exec
      L26 = string
      L26 = L26.format
      L27 = "cat %s.%d | awk -F 'Bytes' '/Bytes/{print $2}' | awk -F ' ' '{print $1}' | awk 'NR==2'"
      L28 = L8
      L29 = L7
      L26, L27, L28, L29, L30, L31, L32, L33 = L26(L27, L28, L29)
      L25, L26, L27, L28, L29, L30, L31, L32, L33 = L25(L26, L27, L28, L29, L30, L31, L32, L33)
      L24 = L24(L25, L26, L27, L28, L29, L30, L31, L32, L33)
      L17 = L24
      L24 = tonumber
      L25 = L16
      L24 = L24(L25)
      L25 = tonumber
      L26 = L6
      L25 = L25(L26)
      if L24 > L25 then
        L24 = tonumber
        L25 = L17
        L24 = L24(L25)
        L25 = tonumber
        L26 = L6
        L25 = L25(L26)
        if L24 > L25 then
          L14 = "PASS"
          L15 = "0"
      end
      else
        L14 = "FAIL"
        L15 = "2"
      end
    else
      L14 = "FAIL"
      L15 = "1"
      L16 = "0"
      L17 = "0"
    end
    L24 = table
    L24 = L24.insert
    L25 = L13
    L26 = {}
    L27 = L23.name
    L26.name = L27
    L27 = string
    L27 = L27.upper
    L28 = L23.mac
    L27 = L27(L28)
    L26.mac = L27
    L27 = L23.ip
    L26.ip = L27
    L26.testresult = L14
    L26.testresultcode = L15
    L26.downlink = L16
    L26.uplink = L17
    L24(L25, L26)
    L24 = tonumber
    L25 = L15
    L24 = L24(L25)
    if L24 == 2 then
      L18 = "throughput not meet standards"
    else
      L24 = tonumber
      L25 = L15
      L24 = L24(L25)
      if L24 == 1 then
        L18 = "iperf server not start"
      else
        L18 = "success"
      end
    end
    L25 = L10
    L24 = L10.write
    L26 = string
    L26 = L26.format
    L27 = "name:%s, mac: %s, downlink:%s, uplink:%s, result:%s, reason:%s\n"
    L28 = L23.name
    L29 = string
    L29 = L29.upper
    L30 = L23.mac
    L29 = L29(L30)
    L30 = L16
    L31 = L17
    L32 = L14
    L33 = L18
    L26, L27, L28, L29, L30, L31, L32, L33 = L26(L27, L28, L29, L30, L31, L32, L33)
    L24(L25, L26, L27, L28, L29, L30, L31, L32, L33)
    L7 = L7 + 1
  end
  L19(L20)
  L19(L20)
  L9.devicetestlist = L13
  L19(L20)
end
diagWifiTest = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.model.uci"
  L1 = L1(L2)
  L1 = L1.cursor
  L1 = L1()
  L2 = {}
  L2.code = 0
  L2.usbname = "none"
  L2.usbtype = "none"
  L2.usbspeed = "0"
  L2.usbtestresult = "FAIL"
  L3 = 0
  L4 = nil
  L5 = "/tmp/usbtestrst.txt"
  L6 = tostring
  L8 = L1
  L7 = L1.get
  L9 = "diag"
  L10 = "config"
  L11 = "usb_write_thr"
  L7 = L7(L8, L9, L10, L11)
  L7 = L7 or L7
  L6 = L6(L7)
  L7 = tostring
  L9 = L1
  L8 = L1.get
  L10 = "diag"
  L11 = "config"
  L12 = "usb_read_thr"
  L8 = L8(L9, L10, L11, L12)
  L8 = L8 or L8
  L7 = L7(L8)
  L8 = 1
  L9 = 0
  L10 = io
  L10 = L10.open
  L11 = "/tmp/diag_usb_test"
  L12 = "w+"
  L10 = L10(L11, L12)
  L11 = L0.trim
  L12 = L0.exec
  L13 = string
  L13 = L13.format
  L13, L17, L18, L19, L20, L21, L22 = L13(L14)
  L12, L13, L17, L18, L19, L20, L21, L22 = L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22)
  L11 = L11(L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22)
  L13 = L10
  L12 = L10.write
  L17, L18, L19, L20, L21, L22 = L14(L15, L16)
  L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22)
  L12 = L0.trim
  L13 = L0.exec
  L17, L18, L19, L20, L21, L22 = L14(L15)
  L13, L17, L18, L19, L20, L21, L22 = L13(L14, L15, L16, L17, L18, L19, L20, L21, L22)
  L12 = L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22)
  L8 = L12
  L12 = L0.trim
  L13 = L0.exec
  L17, L18, L19, L20, L21, L22 = L14(L15)
  L13, L17, L18, L19, L20, L21, L22 = L13(L14, L15, L16, L17, L18, L19, L20, L21, L22)
  L12 = L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22)
  L9 = L12
  L12 = tonumber
  L13 = L9
  L12 = L12(L13)
  if L12 == 1 then
    L2.usbtype = "3.0"
    L12 = L0.trim
    L13 = L0.exec
    L17, L18, L19, L20, L21, L22 = L14(L15)
    L13, L17, L18, L19, L20, L21, L22 = L13(L14, L15, L16, L17, L18, L19, L20, L21, L22)
    L12 = L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22)
    L2.usbspeed = L12
  else
    L12 = tonumber
    L13 = L8
    L12 = L12(L13)
    if L12 == 1 then
      L2.usbtype = "2.0"
      L12 = L0.trim
      L13 = L0.exec
      L17, L18, L19, L20, L21, L22 = L14(L15)
      L13, L17, L18, L19, L20, L21, L22 = L13(L14, L15, L16, L17, L18, L19, L20, L21, L22)
      L12 = L12(L13, L14, L15, L16, L17, L18, L19, L20, L21, L22)
      L2.usbspeed = L12
    end
  end
  L12 = getDiagDiskInfo
  L12 = L12()
  L13 = L12.disklist
  for L17, L18 in L14, L15, L16 do
    L19 = L18.disktype
    L20 = L19
    L19 = L19.match
    L21 = "^USB"
    L19 = L19(L20, L21)
    if L19 then
      L3 = 1
      L4 = L18.diskname
      break
    end
  end
  if L14 == 1 then
    L17 = "ls -1 /dev/%s[0-9]"
    L18 = L4
    L17, L18, L19, L20, L21, L22 = L16(L17, L18)
    L17, L18, L19, L20, L21, L22 = L15(L16, L17, L18, L19, L20, L21, L22)
    L2.usbname = L14
    L17 = "date > %s"
    L18 = L5
    L17, L18, L19, L20, L21, L22 = L16(L17, L18)
    L15(L16, L17, L18, L19, L20, L21, L22)
    L17 = string
    L17 = L17.format
    L18 = "ubenchmark_disk '%s' 64 '%s' '%s' >> '%s' 2>&1 && echo PASS || echo FAIL"
    L19 = L14
    L20 = L6
    L21 = L7
    L22 = L5
    L17, L18, L19, L20, L21, L22 = L17(L18, L19, L20, L21, L22)
    L17, L18, L19, L20, L21, L22 = L16(L17, L18, L19, L20, L21, L22)
    L17 = string
    L17 = L17.format
    L18 = "echo 'wr_thr:%s, rd_thr:%s, result:%s' >> %s"
    L19 = L6
    L20 = L7
    L21 = L15
    L22 = L5
    L17, L18, L19, L20, L21, L22 = L17(L18, L19, L20, L21, L22)
    L16(L17, L18, L19, L20, L21, L22)
    L17 = L15
    L18 = "^PASS"
    if L16 then
      L2.usbtestresult = "PASS"
    end
    L17 = L0.exec
    L18 = string
    L18 = L18.format
    L19 = "cat %s"
    L20 = L5
    L18, L19, L20, L21, L22 = L18(L19, L20)
    L17, L18, L19, L20, L21, L22 = L17(L18, L19, L20, L21, L22)
    L2.usbtestlog = L16
  end
  L17 = [[
%s
usbtype:%s, usbspeed:%s
]]
  L18 = L2.usbtestresult
  L19 = L2.usbtype
  L20 = L2.usbspeed
  L17, L18, L19, L20, L21, L22 = L16(L17, L18, L19, L20)
  L14(L15, L16, L17, L18, L19, L20, L21, L22)
  L14(L15)
  L14(L15)
  L14(L15)
end
diagUsbTest = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L1.diskname = "none"
  L1.hddstatus = "PASS"
  L2 = io
  L2 = L2.open
  L3 = "/tmp/diag_disk_smart"
  L4 = "w+"
  L2 = L2(L3, L4)
  L3 = L0.trim
  L4 = L0.exec
  L5 = string
  L5 = L5.format
  L6 = "date"
  L5, L6, L10, L11, L12, L13, L14 = L5(L6)
  L4, L5, L6, L10, L11, L12, L13, L14 = L4(L5, L6, L7, L8, L9, L10, L11, L12, L13, L14)
  L3 = L3(L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14)
  L5 = L2
  L4 = L2.write
  L6 = string
  L6 = L6.format
  L6, L10, L11, L12, L13, L14 = L6(L7, L8)
  L4(L5, L6, L7, L8, L9, L10, L11, L12, L13, L14)
  L4 = 0
  L5 = getDiagDiskInfo
  L5 = L5()
  L6 = L5.disklist
  for L10, L11 in L7, L8, L9 do
    L12 = L11.disktype
    L13 = L12
    L12 = L12.match
    L14 = "^SATA"
    L12 = L12(L13, L14)
    if L12 then
      L4 = 1
      L12 = L11.diskname
      L1.diskname = L12
      break
    end
  end
  if L7 == 1 then
    L10 = "/usr/sbin/hddstatus && echo PASS || echo FAIL"
    L10, L11, L12, L13, L14 = L9(L10)
    L10, L11, L12, L13, L14 = L8(L9, L10, L11, L12, L13, L14)
    L10 = "^FAIL"
    if L8 then
      L1.hddstatus = "FAIL"
    end
  end
  L10 = "%s\n"
  L11 = L1.hddstatus
  L10, L11, L12, L13, L14 = L9(L10, L11)
  L7(L8, L9, L10, L11, L12, L13, L14)
  L7(L8)
  L7(L8)
  L7(L8)
end
diagHddStatus = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.model.uci"
  L1 = L1(L2)
  L1 = L1.cursor
  L1 = L1()
  L2 = {}
  L2.code = 0
  L2.diskname = "none"
  L2.diskrdtestresult = "PASS"
  L3 = nil
  L4 = 0
  L5 = "/tmp/disktestrst.txt"
  L6 = tostring
  L8 = L1
  L7 = L1.get
  L9 = "diag"
  L10 = "config"
  L11 = "disk_write_thr"
  L7 = L7(L8, L9, L10, L11)
  L7 = L7 or L7
  L6 = L6(L7)
  L7 = tostring
  L9 = L1
  L8 = L1.get
  L10 = "diag"
  L11 = "config"
  L8 = L8(L9, L10, L11, L12)
  L8 = L8 or L8
  L7 = L7(L8)
  L8 = io
  L8 = L8.open
  L9 = "/tmp/diag_disk_rd_test"
  L10 = "w+"
  L8 = L8(L9, L10)
  L9 = L0.trim
  L10 = L0.exec
  L11 = string
  L11 = L11.format
  L11, L15, L16, L17, L18, L19, L20 = L11(L12)
  L10, L11, L15, L16, L17, L18, L19, L20 = L10(L11, L12, L13, L14, L15, L16, L17, L18, L19, L20)
  L9 = L9(L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20)
  L11 = L8
  L10 = L8.write
  L15, L16, L17, L18, L19, L20 = L12(L13, L14)
  L10(L11, L12, L13, L14, L15, L16, L17, L18, L19, L20)
  L10 = getDiagDiskInfo
  L10 = L10()
  L11 = L10.disklist
  for L15, L16 in L12, L13, L14 do
    L17 = L16.disktype
    L18 = L17
    L17 = L17.match
    L19 = "^SATA"
    L17 = L17(L18, L19)
    if L17 then
      L4 = 1
      L3 = L16.diskname
      L2.diskname = L3
      break
    end
  end
  if L12 == 1 then
    L15 = "ls -1 /dev/%s[0-9]"
    L16 = L3
    L15, L16, L17, L18, L19, L20 = L14(L15, L16)
    L15, L16, L17, L18, L19, L20 = L13(L14, L15, L16, L17, L18, L19, L20)
    L15 = "date > %s"
    L16 = L5
    L15, L16, L17, L18, L19, L20 = L14(L15, L16)
    L13(L14, L15, L16, L17, L18, L19, L20)
    L15 = string
    L15 = L15.format
    L16 = "ubenchmark_disk %s 256 %s %s >> %s 2>&1 && echo PASS || echo FAIL"
    L17 = L12
    L18 = L6
    L19 = L7
    L20 = L5
    L15, L16, L17, L18, L19, L20 = L15(L16, L17, L18, L19, L20)
    L15, L16, L17, L18, L19, L20 = L14(L15, L16, L17, L18, L19, L20)
    L15 = string
    L15 = L15.format
    L16 = "echo 'wr_thr:%s, rd_thr:%s, result:%s' >> %s"
    L17 = L6
    L18 = L7
    L19 = L13
    L20 = L5
    L15, L16, L17, L18, L19, L20 = L15(L16, L17, L18, L19, L20)
    L14(L15, L16, L17, L18, L19, L20)
    L15 = L13
    L16 = "^FAIL"
    if L14 then
      L2.diskrdtestresult = "FAIL"
    end
  end
  L15 = "%s\n"
  L16 = L2.diskrdtestresult
  L15, L16, L17, L18, L19, L20 = L14(L15, L16)
  L12(L13, L14, L15, L16, L17, L18, L19, L20)
  L12(L13)
  L12(L13)
  L12(L13)
end
diagDiskTest = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "luci.model.uci"
  L0 = L0(L1)
  L0 = L0.cursor
  L0 = L0()
  L1 = {}
  L1.code = 0
  L3 = L0
  L2 = L0.get
  L4 = "diag"
  L5 = "config"
  L6 = "signal_thr"
  L2 = L2(L3, L4, L5, L6)
  L2 = L2 or L2
  L1.signal_thr = L2
  L3 = L0
  L2 = L0.get
  L4 = "diag"
  L5 = "config"
  L6 = "iperf_test_thr"
  L2 = L2(L3, L4, L5, L6)
  L2 = L2 or L2
  L1.iperf_test_thr = L2
  L3 = L0
  L2 = L0.get
  L4 = "diag"
  L5 = "config"
  L6 = "usb_write_thr"
  L2 = L2(L3, L4, L5, L6)
  L2 = L2 or L2
  L1.usb_write_thr = L2
  L3 = L0
  L2 = L0.get
  L4 = "diag"
  L5 = "config"
  L6 = "usb_read_thr"
  L2 = L2(L3, L4, L5, L6)
  L2 = L2 or L2
  L1.usb_read_thr = L2
  L3 = L0
  L2 = L0.get
  L4 = "diag"
  L5 = "config"
  L6 = "disk_write_thr"
  L2 = L2(L3, L4, L5, L6)
  L2 = L2 or L2
  L1.disk_write_thr = L2
  L3 = L0
  L2 = L0.get
  L4 = "diag"
  L5 = "config"
  L6 = "disk_read_thr"
  L2 = L2(L3, L4, L5, L6)
  L2 = L2 or L2
  L1.disk_read_thr = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getDiagParas = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L0 = require
  L1 = "luci.model.uci"
  L0 = L0(L1)
  L0 = L0.cursor
  L0 = L0()
  L1 = _UPVALUE0_
  L1 = L1.formvalue
  L2 = "signal_thr"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "iperf_test_thr"
  L2 = L2(L3)
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "usb_write_thr"
  L3 = L3(L4)
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "usb_read_thr"
  L4 = L4(L5)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "disk_write_thr"
  L5 = L5(L6)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "disk_read_thr"
  L6 = L6(L7)
  L7 = {}
  L7.code = 0
  L8 = "[`$|;&]"
  L9 = string
  L9 = L9.find
  L10 = L3
  L11 = L8
  L9 = L9(L10, L11)
  if not L9 then
    L9 = string
    L9 = L9.find
    L10 = L4
    L11 = L8
    L9 = L9(L10, L11)
    if not L9 then
      L9 = string
      L9 = L9.find
      L10 = L5
      L11 = L8
      L9 = L9(L10, L11)
      if not L9 then
        L9 = string
        L9 = L9.find
        L10 = L6
        L11 = L8
        L9 = L9(L10, L11)
        if not L9 then
          goto lbl_67
        end
      end
    end
  end
  L7.code = -1
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L7
  L9(L10)
  do return end
  ::lbl_67::
  if L1 ~= nil then
    L10 = L0
    L9 = L0.set
    L11 = "diag"
    L12 = "config"
    L13 = "signal_thr"
    L14 = L1
    L9(L10, L11, L12, L13, L14)
  end
  if L2 ~= nil then
    L10 = L0
    L9 = L0.set
    L11 = "diag"
    L12 = "config"
    L13 = "iperf_test_thr"
    L14 = L2
    L9(L10, L11, L12, L13, L14)
  end
  if L3 ~= nil and L4 ~= nil and (L3 ~= 0 or L4 ~= 0) then
    L10 = L0
    L9 = L0.set
    L11 = "diag"
    L12 = "config"
    L13 = "usb_write_thr"
    L14 = L3
    L9(L10, L11, L12, L13, L14)
    L10 = L0
    L9 = L0.set
    L11 = "diag"
    L12 = "config"
    L13 = "usb_read_thr"
    L14 = L4
    L9(L10, L11, L12, L13, L14)
  end
  if L5 ~= nil and L6 ~= nil and (L5 ~= 0 or L6 ~= 0) then
    L10 = L0
    L9 = L0.set
    L11 = "diag"
    L12 = "config"
    L13 = "disk_write_thr"
    L14 = L5
    L9(L10, L11, L12, L13, L14)
    L10 = L0
    L9 = L0.set
    L11 = "diag"
    L12 = "config"
    L13 = "disk_read_thr"
    L14 = L6
    L9(L10, L11, L12, L13, L14)
  end
  if L1 ~= nil or L2 ~= nil or L3 ~= nil or L4 ~= nil then
    L10 = L0
    L9 = L0.commit
    L11 = "diag"
    L9(L10, L11)
  end
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L7
  L9(L10)
end
setDiagParas = L4
function L4(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9
  L3 = io
  L3 = L3.open
  L4 = A0
  L5 = "r"
  L3 = L3(L4, L5)
  if L3 then
    L5 = L3
    L4 = L3.read
    L6 = "*a"
    L4 = L4(L5, L6)
    L2 = L4
    L5 = L3
    L4 = L3.close
    L4(L5)
    if L2 == nil then
      L4 = false
      return L4
    end
  else
    L4 = false
    return L4
  end
  L4 = io
  L4 = L4.open
  L5 = A1
  L6 = "a"
  L4 = L4(L5, L6)
  if L4 then
    L6 = L4
    L5 = L4.write
    L7 = L2
    L5 = L5(L6, L7)
    if L5 == nil then
      L7 = L4
      L6 = L4.close
      L6(L7)
      L6 = false
      return L6
    end
    L7 = L4
    L6 = L4.write
    L8 = string
    L8 = L8.format
    L9 = "\n"
    L8, L9 = L8(L9)
    L6(L7, L8, L9)
    L7 = L4
    L6 = L4.close
    L6(L7)
    L6 = true
    return L6
  else
    L5 = false
    return L5
  end
end
addtofile = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20
  L0 = require
  L1 = "xiaoqiang.util.XQNetUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.util"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L3 = require
  L4 = "nixio.fs"
  L3 = L3(L4)
  L4 = require
  L5 = "luci.sys"
  L4 = L4(L5)
  L5 = "/tmp/syslogbackup/"
  L7 = L2
  L6 = L2.get
  L8 = "network"
  L9 = "lan"
  L10 = "ipaddr"
  L6 = L6(L7, L8, L9, L10)
  L6 = L6 or L6
  L7 = {}
  L7.code = 0
  L8 = "/tmp/diag_test.log"
  L9 = addtofile
  L10 = "/tmp/diag_net_spd"
  L11 = L8
  L9(L10, L11)
  L9 = addtofile
  L10 = "/tmp/diag_sta_sig"
  L11 = L8
  L9(L10, L11)
  L9 = addtofile
  L10 = "/tmp/diag_sta_iperf"
  L11 = L8
  L9(L10, L11)
  L9 = addtofile
  L10 = "/tmp/diag_usb_test"
  L11 = L8
  L9(L10, L11)
  L9 = addtofile
  L10 = "/tmp/diag_disk_smart"
  L11 = L8
  L9(L10, L11)
  L9 = addtofile
  L10 = "/tmp/diag_disk_rd_test"
  L11 = L8
  L9(L10, L11)
  function L9()
    local L0, L1, L2, L3
    L0 = _UPVALUE0_
    L0 = L0.process
    L0 = L0.info
    L1 = "uid"
    L0 = L0(L1)
    L1 = _UPVALUE1_
    L1 = L1.stat
    L2 = _UPVALUE2_
    L3 = "uid"
    L1 = L1(L2, L3)
    L0 = L0 == L1
    return L0
  end
  sane = L9
  function L9()
    local L0, L1, L2
    L0 = _UPVALUE0_
    L0 = L0.mkdir
    L1 = _UPVALUE1_
    L2 = 700
    L0(L1, L2)
  end
  prepare = L9
  L9 = sane
  L9 = L9()
  if not L9 then
    L9 = prepare
    L9()
  else
    L9 = os
    L9 = L9.execute
    L10 = "rm "
    L11 = L5
    L12 = "*.diag.log"
    L10 = L10 .. L11 .. L12
    L9(L10)
  end
  L9 = L3.access
  L10 = L8
  L9 = L9(L10)
  if L9 then
    L9 = L0.getSN
    L9 = L9()
    L10 = string
    L10 = L10.find
    L11 = L9
    L12 = "/"
    L10, L11 = L10(L11, L12)
    L12 = string
    L12 = L12.sub
    L13 = L9
    L14 = 1
    L15 = L11 - 1
    L12 = L12(L13, L14, L15)
    L13 = string
    L13 = L13.sub
    L14 = L9
    L15 = L11 + 1
    L16 = string
    L16 = L16.len
    L17 = L9
    L16, L17, L18, L19, L20 = L16(L17)
    L13 = L13(L14, L15, L16, L17, L18, L19, L20)
    L14 = L12
    L15 = "-"
    L16 = L13
    L17 = "--"
    L18 = os
    L18 = L18.date
    L19 = "%Y-%m-%d--%X"
    L20 = os
    L20 = L20.time
    L20 = L20()
    L18 = L18(L19, L20)
    L19 = ".diag.log"
    L14 = L14 .. L15 .. L16 .. L17 .. L18 .. L19
    L15 = L1.exec
    L16 = "cp "
    L17 = L8
    L18 = " "
    L19 = L5
    L20 = L14
    L16 = L16 .. L17 .. L18 .. L19 .. L20
    L15(L16)
    L15 = L1.exec
    L16 = "rm "
    L17 = L8
    L16 = L16 .. L17
    L15(L16)
    L15 = L6
    L16 = "/backup/log/"
    L17 = L14
    L15 = L15 .. L16 .. L17
    L7.logUrl = L15
  else
    L7.code = 1
    L7.msg = "There is no diag test log, not test yet?"
  end
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L7
  L9(L10)
end
getDiagLog = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = {}
  L3 = 0
  L4 = tonumber
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "wifiIndex"
  L5, L6, L7, L8, L9, L10, L11, L12 = L5(L6)
  L4 = L4(L5, L6, L7, L8, L9, L10, L11, L12)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "weakenable"
  L5 = L5(L6)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "weakthreshold"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "kickthreshold"
  L7 = L7(L8)
  L8 = L0.setWifiWeakInfo
  L9 = L4
  L10 = L5
  L11 = L6
  L12 = L7
  L8 = L8(L9, L10, L11, L12)
  if L8 == false then
    L3 = 1502
  end
  if L3 ~= 0 then
    L9 = _UPVALUE1_
    L9 = L9.getErrorMessage
    L10 = L3
    L9 = L9(L10)
    L2.msg = L9
  end
  L2.code = L3
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L2
  L9(L10)
  if L3 == 0 then
    L9 = _UPVALUE0_
    L9 = L9.close
    L9()
    L9 = L1.forkRestartWifi
    L9()
  end
end
setWifiWeakInfo = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L2 = 0
  L3 = L0.getWifiWeakInfo
  L3 = L3()
  L1.info = L3
  L1.code = L2
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
getWifiWeakInfo = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "on"
  L3, L4, L5 = L3(L4)
  L2 = L2(L3, L4, L5)
  if L2 == 1 then
    L2 = true
    if L2 then
      goto lbl_18
    end
  end
  L2 = false
  ::lbl_18::
  L3 = L0.miscanSwitch
  L4 = L2
  L3 = L3(L4)
  if not L3 then
    L1.code = 1606
  end
  L4 = L1.code
  if L4 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L1.code
    L4 = L4(L5)
    L1.msg = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L1
  L4(L5)
end
miscanSwitch = L4
function L4()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = tonumber
  L3 = L0.getMiscanSwitch
  L3 = L3()
  L2 = L2(L3)
  L1.enabled = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getMiscanSwitch = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.util"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.model.uci"
  L3 = L3(L4)
  L3 = L3.cursor
  L3 = L3()
  L5 = L3
  L4 = L3.get
  L6 = "wireless"
  L7 = "miot_2G"
  L8 = "bindstatus"
  L4 = L4(L5, L6, L7, L8)
  L4 = L4 or L4
  L6 = L3
  L5 = L3.get
  L7 = "wireless"
  L8 = "miot_2G"
  L9 = "userswitch"
  L5 = L5(L6, L7, L8, L9)
  L5 = L5 or L5
  L7 = L3
  L6 = L3.get
  L8 = "misc"
  L9 = "wireless"
  L10 = "if_2G"
  L6 = L6(L7, L8, L9, L10)
  L6 = L6 or L6
  L7 = {}
  L7.code = 0
  L8 = tonumber
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "on"
  L9, L10, L11, L12, L13, L14 = L9(L10)
  L8 = L8(L9, L10, L11, L12, L13, L14)
  if L8 == 1 then
    L8 = "1"
    if L8 then
      goto lbl_53
    end
  end
  L8 = "0"
  ::lbl_53::
  if L4 == "1" then
    if L5 == "0" and L8 == "1" then
      if "wifi0" == L6 then
        L9 = L2.exec
        L10 = "hostapd_cli -i wl13 -p /var/run/hostapd-wifi0 enable"
        L9(L10)
      elseif "wifi1" == L6 then
        L9 = L2.exec
        L10 = "hostapd_cli -i wl13 -p /var/run/hostapd-wifi1 enable"
        L9(L10)
      else
        L9 = L2.exec
        L10 = "ifconfig wl13 up"
        L9(L10)
      end
      L9 = L2.exec
      L10 = "/usr/sbin/sysapi miot"
      L9(L10)
    elseif L5 == "1" and L8 == "0" then
      if "wifi0" == L6 then
        L9 = L2.exec
        L10 = "hostapd_cli -i wl13 -p /var/run/hostapd-wifi0 disable"
        L9(L10)
      elseif "wifi1" == L6 then
        L9 = L2.exec
        L10 = "hostapd_cli -i wl13 -p /var/run/hostapd-wifi1 disable"
        L9(L10)
      else
        L9 = L2.exec
        L10 = "ifconfig wl13 down"
        L9(L10)
      end
    end
  end
  L10 = L3
  L9 = L3.set
  L11 = "wireless"
  L12 = "miot_2G"
  L13 = "userswitch"
  L14 = L8
  L9(L10, L11, L12, L13, L14)
  L10 = L3
  L9 = L3.commit
  L11 = "wireless"
  L9(L10, L11)
  L9 = L1.forkExec
  L10 = [[
        [ -f "/etc/init.d/miot" ] && /etc/init.d/miot restart;
        /sbin/whc_to_re_common_api.sh whc_sync;
    ]]
  L9(L10)
  L9 = L1.isMeshController
  L9 = L9()
  if L9 then
    L9 = L2.exec
    L10 = "ubus -t 3 call mapd event '{\"type\":6,\"op1\":0,\"op2\":\""
    L11 = L8
    L12 = "\"}'"
    L10 = L10 .. L11 .. L12
    L9(L10)
  end
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L7
  L9(L10)
end
miotrelaySwitch = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.util"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L4 = L2
  L3 = L2.get
  L5 = "wireless"
  L6 = "miot_2G"
  L7 = "userswitch"
  L3 = L3(L4, L5, L6, L7)
  L3 = L3 or L3
  L4 = {}
  L4.code = 0
  L5 = tonumber
  L6 = L3
  L5 = L5(L6)
  L4.enabled = L5
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L4
  L5(L6)
end
getMiotrelaySwitch = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.XQLog"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.model.uci"
  L3 = L3(L4)
  L3 = L3.cursor
  L3 = L3()
  L5 = L3
  L4 = L3.get
  L6 = "xiaoqiang"
  L7 = "common"
  L8 = "MESH_SWITCH"
  L4 = L4(L5, L6, L7, L8)
  L4 = L4 or L4
  L5 = {}
  L5.code = 0
  L6 = tonumber
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "on"
  L7, L8, L9, L10, L11, L12 = L7(L8)
  L6 = L6(L7, L8, L9, L10, L11, L12)
  if L6 == 1 then
    L6 = "1"
    if L6 then
      goto lbl_37
    end
  end
  L6 = "0"
  ::lbl_37::
  L7 = L2.log
  L8 = 6
  L9 = "old switch is "
  L10 = L4
  L11 = " new switch is "
  L12 = L6
  L9 = L9 .. L10 .. L11 .. L12
  L7(L8, L9)
  L7 = L1.isMeshMode
  L7 = L7()
  if L7 then
    L7 = L2.log
    L8 = 6
    L9 = "already in mesh mode,no need to set switch"
    L7(L8, L9)
  elseif L4 ~= L6 and L4 ~= "3" then
    L7 = L2.log
    L8 = 6
    L9 = "need to set switch"
    L7(L8, L9)
    L8 = L3
    L7 = L3.set
    L9 = "xiaoqiang"
    L10 = "common"
    L11 = "MESH_SWITCH"
    L12 = L6
    L7(L8, L9, L10, L11, L12)
    L8 = L3
    L7 = L3.commit
    L9 = "xiaoqiang"
    L7(L8, L9)
    if L6 == "0" then
      L7 = L0.exec
      L8 = "[ -f /etc/init.d/mapd ] && ubus call mapd mesh_switch '{\"mesh_switch\":0}'"
      L7(L8)
    else
      L7 = L0.exec
      L8 = "[ -f /etc/init.d/mapd ] && ubus call mapd mesh_switch '{\"mesh_switch\":1}'"
      L7(L8)
    end
  else
    L7 = L2.log
    L8 = 6
    L9 = "no need to set switch"
    L7(L8, L9)
  end
  L7 = _UPVALUE0_
  L7 = L7.write_json
  L8 = L5
  L7(L8)
end
setMeshSwitch = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.util"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L3 = "2"
  L4 = L0.isMeshMode
  L4 = L4()
  if L4 then
    L3 = "2"
  else
    L5 = L2
    L4 = L2.get
    L6 = "xiaoqiang"
    L7 = "common"
    L8 = "MESH_SWITCH"
    L4 = L4(L5, L6, L7, L8)
    L3 = L4 or L3
    if not L4 then
      L3 = "1"
    end
  end
  L4 = {}
  L4.code = 0
  L5 = tonumber
  L6 = L3
  L5 = L5(L6)
  L4.enabled = L5
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L4
  L5(L6)
end
getMeshSwitch = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.util"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L4 = L2
  L3 = L2.get
  L5 = "roam"
  L6 = "ap_steering"
  L7 = "HighRssi24GThreshold"
  L3 = L3(L4, L5, L6, L7)
  L3 = L3 or L3
  L5 = L2
  L4 = L2.get
  L6 = "roam"
  L7 = "ap_steering"
  L8 = "HighRssi5GThreshold"
  L4 = L4(L5, L6, L7, L8)
  L4 = L4 or L4
  L5 = {}
  L5.code = 0
  L6 = tostring
  L7 = tonumber
  L8 = L3
  L7 = L7(L8)
  L7 = L7 - 95
  L6 = L6(L7)
  L5.RoamRssiThreshold2G = L6
  L6 = tostring
  L7 = tonumber
  L8 = L4
  L7 = L7(L8)
  L7 = L7 - 95
  L6 = L6(L7)
  L5.RoamRssiThreshold5G = L6
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L5
  L6(L7)
end
getRoamRssiThreshold = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "luci.util"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.XQLog"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.model.uci"
  L3 = L3(L4)
  L3 = L3.cursor
  L3 = L3()
  L4 = {}
  L4.code = 0
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "roamrssithreshold1"
  L5 = L5(L6)
  L5 = L5 or L5
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "roamrssithreshold2"
  L6 = L6(L7)
  L6 = L6 or L6
  L7 = L2.log
  L8 = 6
  L9 = "RoamRssiThreshold2G="
  L10 = L5
  L11 = " RoamRssiThreshold5G="
  L12 = L6
  L9 = L9 .. L10 .. L11 .. L12
  L7(L8, L9)
  L7 = tostring
  L8 = tonumber
  L9 = L5
  L8 = L8(L9)
  L8 = L8 + 95
  L7 = L7(L8)
  L5 = L7
  L7 = tostring
  L8 = tonumber
  L9 = L6
  L8 = L8(L9)
  L8 = L8 + 95
  L7 = L7(L8)
  L6 = L7
  L7 = L2.log
  L8 = 6
  L9 = "RoamRssiThreshold2G="
  L10 = L5
  L11 = " RoamRssiThreshold5G="
  L12 = L6
  L9 = L9 .. L10 .. L11 .. L12
  L7(L8, L9)
  L8 = L3
  L7 = L3.set
  L9 = "roam"
  L10 = "ap_steering"
  L11 = "HighRssi24GThreshold"
  L12 = L5
  L7(L8, L9, L10, L11, L12)
  L8 = L3
  L7 = L3.set
  L9 = "roam"
  L10 = "ap_steering"
  L11 = "HighRssi5GThreshold"
  L12 = L6
  L7(L8, L9, L10, L11, L12)
  L8 = L3
  L7 = L3.set
  L9 = "roam"
  L10 = "band_steering"
  L11 = "BandSteering24GRssiThrehold"
  L12 = L5
  L7(L8, L9, L10, L11, L12)
  L8 = L3
  L7 = L3.set
  L9 = "roam"
  L10 = "band_steering"
  L11 = "BandSteering5GRssiThrehold"
  L12 = L6
  L7(L8, L9, L10, L11, L12)
  L8 = L3
  L7 = L3.commit
  L9 = "roam"
  L7(L8, L9)
  L7 = L0.exec
  L8 = "[ -f /etc/init.d/mapd ] && /etc/init.d/mapd restart"
  L7(L8)
  L7 = _UPVALUE0_
  L7 = L7.write_json
  L8 = L4
  L7(L8)
end
setRoamRssiThreshold = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.model.uci"
  L1 = L1(L2)
  L1 = L1.cursor
  L1 = L1()
  L2 = tonumber
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "mode"
  L3, L4, L5, L6, L7, L8 = L3(L4)
  L2 = L2(L3, L4, L5, L6, L7, L8)
  L3 = {}
  L5 = L1
  L4 = L1.get
  L6 = "repacd"
  L7 = "WiFiLink"
  L8 = "2GIndependentChannelSelectionEnable"
  L4 = L4(L5, L6, L7, L8)
  if L4 then
    L5 = L0.log
    L6 = 6
    L7 = "get 2.4G backhaul_mode\239\188\154"
    L8 = L4
    L7 = L7 .. L8
    L5(L6, L7)
    L3.mode = L4
    L3.code = 0
  else
    L5 = L0.log
    L6 = 6
    L7 = "can not get 2.4G backhaul_mode, check hardware."
    L5(L6, L7)
    L3.code = 1
  end
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L3
  L5(L6)
end
getSonBackhaulMode = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQSysUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.model.uci"
  L2 = L2(L3)
  L2 = L2.cursor
  L2 = L2()
  L3 = require
  L4 = "xiaoqiang.XQLog"
  L3 = L3(L4)
  L4 = tonumber
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "mode"
  L5, L6, L7, L8, L9, L10, L11, L12 = L5(L6)
  L4 = L4(L5, L6, L7, L8, L9, L10, L11, L12)
  L5 = {}
  L5.code = 0
  L6 = L3.log
  L7 = 6
  L8 = "setSonBackhaulMode mode:"
  L9 = L4
  L8 = L8 .. L9
  L6(L7, L8)
  L6 = L0.isMeshCap
  L6 = L6()
  if L6 then
    L6 = {}
    L6.cmd = "set_backhaul_mode"
    L7 = tostring
    L8 = L4
    L7 = L7(L8)
    L6.backhaul_mode = L7
    L7 = require
    L8 = "luci.json"
    L7 = L7(L8)
    L8 = L7.encode
    L9 = L6
    L8 = L8(L9)
    L9 = L3.log
    L10 = 6
    L11 = "CAP call RE do action msg:"
    L12 = L8
    L11 = L11 .. L12
    L9(L10, L11)
    L9 = L0.forkExec
    L10 = "/sbin/whc_to_re_common_api.sh action '"
    L11 = L8
    L12 = "'"
    L10 = L10 .. L11 .. L12
    L9(L10)
  end
  L7 = L2
  L6 = L2.set
  L8 = "repacd"
  L9 = "WiFiLink"
  L10 = "2GIndependentChannelSelectionEnable"
  L11 = L4
  L6(L7, L8, L9, L10, L11)
  L7 = L2
  L6 = L2.commit
  L8 = "repacd"
  L6(L7, L8)
  L7 = L2
  L6 = L2.set
  L8 = "xiaoqiang"
  L9 = "common"
  L10 = "son_no_24backhaul"
  L11 = L4
  L6(L7, L8, L9, L10, L11)
  L7 = L2
  L6 = L2.commit
  L8 = "xiaoqiang"
  L6(L7, L8)
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L5
  L6(L7)
end
setSonBackhaulMode = L4
function L4()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = L0.mesh_get_scanlist
  L2 = L2()
  L1.list = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
scanMeshNode = L4
function L4(A0)
  local L1, L2, L3, L4, L5, L6, L7
  if A0 == nil then
    L1 = false
    return L1
  end
  L1 = io
  L1 = L1.open
  L1 = L1(L2, L3)
  if L1 then
    for L5 in L2, L3, L4 do
      if L5 == A0 then
        L7 = L1
        L6 = L1.close
        L6(L7)
        L6 = true
        return L6
      end
    end
    L2(L3)
  end
  return L2
end
isMeshVer4_Node = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQSysUtil"
  L2 = L2(L3)
  L3 = {}
  L3.code = 0
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "mac"
  L4 = L4(L5)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "locate"
  L5 = L5(L6)
  L6 = L1.isStrNil
  L7 = L4
  L6 = L6(L7)
  if L6 then
    L3.code = 1502
  else
    L7 = L4
    L6 = L4.match
    L8 = "^(%x%x:%x%x:%x%x:%x%x:%x%x:%x%x)$"
    L6 = L6(L7, L8)
    if L6 then
      L6 = "/tmp/"
      L7 = string
      L7 = L7.upper
      L8 = string
      L8 = L8.gsub
      L9 = L4
      L10 = ":"
      L11 = ""
      L8, L9, L10, L11 = L8(L9, L10, L11)
      L7 = L7(L8, L9, L10, L11)
      L8 = "-status"
      L6 = L6 .. L7 .. L8
      L7 = os
      L7 = L7.remove
      L8 = L6
      L7(L8)
      L7 = isMeshVer4_Node
      L8 = L4
      L7 = L7(L8)
      if L7 then
        L7 = L0.mesh_ver4_add_node
        L8 = L4
        L9 = L5
        L7(L8, L9)
      else
        L7 = L0.mesh_add_node
        L8 = L4
        L9 = L5
        L7(L8, L9)
      end
    else
      L3.code = 1502
    end
  end
  L6 = _UPVALUE0_
  L6 = L6.write_json
  L7 = L3
  L6(L7)
end
addMeshNode = L4
function L4()
  local L0, L1, L2, L3, L4
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "mac"
  L2 = L2(L3)
  L3 = L0.mesh_get_status
  L4 = L2
  L3 = L3(L4)
  L1.status = L3
  L3 = _UPVALUE0_
  L3 = L3.write_json
  L4 = L1
  L3(L4)
end
getMeshNodeStatus = L4
function L4()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = L0.getnetmode
  L2 = L2()
  L1.netmode = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getNetMode = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21
  L0 = require
  L1 = "xiaoqiang.util.DedicatedWirelessBackhaulUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 1502
  if L0 ~= nil then
    L2 = L0.is_supported
    L2 = L2()
    if L2 ~= false then
      goto lbl_20
    end
  end
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
  L2 = _UPVALUE0_
  L2 = L2.close
  L2()
  do return end
  ::lbl_20::
  L2 = false
  L3 = require
  L4 = "xiaoqiang.util.XQWifiUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.common.XQFunction"
  L4 = L4(L5)
  L5 = L0.mesh_get_dwb_band
  L5 = L5()
  L6 = tonumber
  L7 = L0.mesh_get_dwb_status
  L7 = L7()
  L7 = L7 or L7
  L6 = L6(L7)
  L7 = L3.getAllWifiInfo
  L7 = L7()
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "status"
  L8 = L8(L9)
  if L7 and L5 then
    L9 = #L7
    if L5 <= L9 and L8 then
      L9 = tonumber
      L10 = L8
      L9 = L9(L10)
      L8 = L9
      L9 = 2
      if L5 == 3 then
        L9 = 2
      elseif L5 == 2 then
        L9 = 3
      end
      L10 = tonumber
      L11 = L0.mesh_get_dwb_bsd_channge
      L11 = L11()
      L11 = L11 or L11
      L10 = L10(L11)
      if L8 == 1 and L6 ~= 1 then
        if L10 == 1 then
          L11 = nil
          L12 = L7[L9]
          L12 = L12.ssid
          L12 = #L12
          if 28 < L12 then
            L12 = L7[L9]
            L11 = L12.ssid
          else
            L12 = string
            L12 = L12.sub
            L13 = L7[L9]
            L13 = L13.ssid
            L14 = "_5G2"
            L13 = L13 .. L14
            L14 = 1
            L15 = 31
            L12 = L12(L13, L14, L15)
            L11 = L12
          end
          L12 = L3.setWifiBasicInfo
          L13 = L5
          L14 = L11
          L15 = L7[L9]
          L15 = L15.password
          L16 = L7[L9]
          L16 = L16.encryption
          L17, L18, L19 = nil, nil, nil
          L20 = L8
          L21 = nil
          L12 = L12(L13, L14, L15, L16, L17, L18, L19, L20, L21)
          L2 = L12
        else
          L11 = L3.setWifiBasicInfo
          L12 = L5
          L13 = nil
          L14 = L7[L9]
          L14 = L14.password
          L15 = L7[L9]
          L15 = L15.encryption
          L16, L17, L18 = nil, nil, nil
          L19 = L8
          L20 = nil
          L11 = L11(L12, L13, L14, L15, L16, L17, L18, L19, L20)
          L2 = L11
        end
        if L2 == true then
          L11 = L0.mesh_set_dwb_status
          L12 = "1"
          L11(L12)
          L1.code = 0
        end
      elseif L8 == 0 and L6 == 1 then
        L11 = L3.setWifiBasicInfo
        L12 = L5
        L13, L14, L15 = nil, nil, nil
        L16 = "0"
        L17 = "max"
        L18 = nil
        L19 = L8
        L20 = "0"
        L11 = L11(L12, L13, L14, L15, L16, L17, L18, L19, L20)
        L2 = L11
        if L2 == true then
          L11 = L7[L5]
          L11 = L11.status
          if L11 == 0 then
            L11 = L0.mesh_set_dwb_status
            L12 = "2"
            L11(L12)
          else
            L11 = L0.mesh_set_dwb_status
            L12 = "0"
            L11(L12)
          end
          L1.code = 0
        end
      else
        L1.code = 0
      end
    end
  end
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L1
  L9(L10)
  L9 = _UPVALUE0_
  L9 = L9.close
  L9()
  if L2 then
    L9 = L4.forkRestartWifiNotify
    L9()
  end
end
setDWBWifi = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQMultiWanPolicy"
  L1 = L1(L2)
  L2 = L1.getBandwidth
  L2, L3 = L2()
  L4 = L1.getWeight
  L4, L5 = L4()
  L6 = {}
  L6.code = 0
  L7 = {}
  L6.info = L7
  L7 = L6.info
  L8 = L1.getStatus
  L8 = L8()
  L7.enable = L8
  L7 = L6.info
  L8 = L1.getPolicy
  L8 = L8()
  L7.policy = L8
  L7 = L6.info
  L8 = L1.getCurrentWan
  L9 = "ipv4"
  L8 = L8(L9)
  L8 = L8 or L8
  L7.currwan = L8
  L7 = L6.info
  L7.weight1 = L4
  L7 = L6.info
  L7.weight2 = L5
  L7 = L6.info
  L7.bandwidth_wan1 = L2
  L7 = L6.info
  L7.bandwidth_wan2 = L3
  L7 = _UPVALUE0_
  L7 = L7.write_json
  L8 = L6
  L7(L8)
end
getMultiwanBasicInfo = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQMultiWanPolicy"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "enable"
  L2 = L2(L3)
  L3 = L1.getStatus
  L3 = L3()
  L4 = {}
  L4.code = 0
  L5 = L0.isStrNil
  L6 = L2
  L5 = L5(L6)
  if L5 then
    L4.code = 1502
    L5 = _UPVALUE1_
    L5 = L5.getErrorMessage
    L6 = L4.code
    L5 = L5(L6)
    L4.msg = L5
  else
    L5 = tostring
    L6 = L2
    L5 = L5(L6)
    L6 = tostring
    L7 = L3
    L6 = L6(L7)
    if L5 ~= L6 then
      L5 = L1.setStatus
      L6 = L2
      L5(L6)
    end
  end
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L4
  L5(L6)
end
setMultiwanEnable = L4
function L4()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQMultiWanPolicy"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "policy"
  L2 = L2(L3)
  L3 = {}
  L3.code = 0
  L4 = L1.isValidPolicyCode
  L5 = L2
  L4 = L4(L5)
  if not L4 then
    L3.code = 1502
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L3.code
    L4 = L4(L5)
    L3.msg = L4
  else
    L4 = L1.setPolicy
    L5 = L2
    L4(L5)
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L3
  L4(L5)
end
setMultiwanPolicy = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQMultiWanPolicy"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "bandwidth_wan1"
  L2 = L2(L3)
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "bandwidth_wan2"
  L3 = L3(L4)
  L4 = {}
  L4.code = 0
  L5 = L0.isStrNil
  L6 = L2
  L5 = L5(L6)
  if not L5 then
    L5 = L0.isStrNil
    L6 = L3
    L5 = L5(L6)
    if not L5 then
      goto lbl_34
    end
  end
  L4.code = 1502
  L5 = _UPVALUE1_
  L5 = L5.getErrorMessage
  L6 = L4.code
  L5 = L5(L6)
  L4.msg = L5
  goto lbl_38
  ::lbl_34::
  L5 = L1.setWeight
  L6 = L2
  L7 = L3
  L5(L6, L7)
  ::lbl_38::
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L4
  L5(L6)
end
setMultiwanWeight = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQMultiWanPolicy"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.util"
  L2 = L2(L3)
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "mac"
  L3 = L3(L4)
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "wan"
  L4 = L4(L5)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "oname"
  L5 = L5(L6)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "manual"
  L6 = L6(L7)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "opt"
  L7 = L7(L8)
  L8 = nil
  L9 = {}
  L9.code = 0
  L10 = L0.isStrNil
  L11 = L3
  L10 = L10(L11)
  if not L10 then
    L10 = L0.isStrNil
    L11 = L7
    L10 = L10(L11)
    if not L10 then
      L10 = L0.isStrNil
      L11 = L6
      L10 = L10(L11)
      if not L10 then
        L10 = L1.isValidWanName
        L11 = L4
        L10 = L10(L11)
        if L10 then
          goto lbl_60
        end
      end
    end
  end
  L9.code = 1502
  L10 = _UPVALUE1_
  L10 = L10.getErrorMessage
  L11 = L9.code
  L10 = L10(L11)
  L9.msg = L10
  goto lbl_204
  ::lbl_60::
  L10 = require
  L11 = "json"
  L10 = L10(L11)
  L11 = L2.exec
  L12 = "ubus call trafficd hw"
  L11 = L11(L12)
  L12 = L10.decode
  L12 = L12(L13)
  L11 = L12
  L12 = L3.upper
  L12 = L12(L13)
  L3 = L12
  if L6 == "0" then
    L12 = L2.split
    L12 = L12(L13, L14)
    for L16 = L13, L14, L15 do
      L17 = L12[L16]
      if nil ~= L17 then
        if L7 == "0" or L7 == 0 then
          L8 = nil
          L17 = L12[L16]
          L17 = L11[L17]
          if L17 then
            L17 = L12[L16]
            L17 = L11[L17]
            L17 = L17.ip_list
            if L17 then
              L17 = L12[L16]
              L17 = L11[L17]
              L17 = L17.ip_list
              L17 = L17[1]
              if L17 then
                L17 = L12[L16]
                L17 = L11[L17]
                L17 = L17.ip_list
                L17 = L17[1]
                L17 = L17.ip
                if L17 then
                  L17 = L12[L16]
                  L17 = L11[L17]
                  L17 = L17.ip_list
                  L17 = L17[1]
                  L8 = L17.ip
                end
              end
            end
          end
          L17 = L12[L16]
          L17 = L11[L17]
          if L17 then
            L17 = L12[L16]
            L17 = L11[L17]
            L17 = L17.hw
            if L17 then
              L17 = L12[L16]
              L17 = L11[L17]
              L17 = L17.hostname
              if L17 then
                L17 = L12[L16]
                L17 = L11[L17]
                L5 = L17.hostname
              end
            end
          end
          if L5 == "" then
            L5 = "unknown"
          end
          L17 = L1.setDevPolicy
          L18 = L12[L16]
          L19 = L8
          L20 = "ipv4"
          L21 = L5
          L22 = L4
          L23 = L6
          L17(L18, L19, L20, L21, L22, L23)
        else
          L17 = L1.deleteDevPolicy
          L18 = L12[L16]
          L17(L18)
        end
      end
    end
  elseif L6 == "1" then
    if L7 == "0" or L7 == 0 then
      L12 = L0.isStrNil
      L12 = L12(L13)
      if L12 then
        L9.code = 1502
        L12 = _UPVALUE1_
        L12 = L12.getErrorMessage
        L12 = L12(L13)
        L9.msg = L12
      else
        L12 = L11[L3]
        if L12 then
          L12 = L11[L3]
          L12 = L12.ip_list
          if L12 then
            L12 = L11[L3]
            L12 = L12.ip_list
            L12 = L12[1]
            if L12 then
              L12 = L11[L3]
              L12 = L12.ip_list
              L12 = L12[1]
              L12 = L12.ip
              if L12 then
                L12 = L11[L3]
                L12 = L12.ip_list
                L12 = L12[1]
                L8 = L12.ip
              end
            end
          end
        end
        L12 = L1.setDevPolicy
        L16 = L5
        L17 = L4
        L18 = L6
        L12(L13, L14, L15, L16, L17, L18)
      end
    else
      L12 = L1.deleteDevPolicy
      L12(L13)
    end
  end
  ::lbl_204::
  L10 = _UPVALUE0_
  L10 = L10.write_json
  L11 = L9
  L10(L11)
end
setMultiwanDevPolicy = L4
function L4()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.module.XQMultiWanPolicy"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = {}
  L1.info = L2
  L2 = L1.info
  L3 = L0.getAllDevPolicies
  L3 = L3()
  L2.dev_policies = L3
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getMultiwanDevPolicies = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13
  L0 = require
  L1 = "xiaoqiang.util.XQDeviceUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.module.XQMultiWanPolicy"
  L1 = L1(L2)
  L2 = L0.getDeviceListV2
  L3 = true
  L4 = true
  L2 = L2(L3, L4)
  L3 = {}
  L4 = {}
  L4.code = 0
  L4.info = L5
  for L8, L9 in L5, L6, L7 do
    L10 = L1.isDevPolicyExist
    L11 = L9.mac
    L10 = L10(L11)
    if not L10 then
      L10 = {}
      L11 = L9.mac
      L10.mac = L11
      L11 = L9.oname
      L10.oname = L11
      L11 = L10.oname
      if L11 == "" then
        L10.oname = "unknown"
      end
      L11 = L9.ip
      if L11 then
        L11 = L9.ip
        L11 = L11[1]
        if L11 then
          L11 = L9.ip
          L11 = L11[1]
          L11 = L11.ip
          L10.ip = L11
        end
      end
      L11 = table
      L11 = L11.insert
      L12 = L3
      L13 = L10
      L11(L12, L13)
    end
  end
  L4.info = L3
  L5(L6)
end
getMultiwanDevList = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQCwmpUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.util.XQSecureUtil"
  L2 = L2(L3)
  L3 = {}
  L3.code = 0
  L4 = {}
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "cwmp_enable"
  L5 = L5(L6)
  L4.cwmp_enable = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "cwmp_inform_enable"
  L5 = L5(L6)
  L4.cwmp_inform_enable = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "inform_interval"
  L5 = L5(L6)
  L4.inform_interval = L5
  L5 = L2.xssCheck
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "acs_url"
  L6, L7 = L6(L7)
  L5 = L5(L6, L7)
  L4.acs_url = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "acs_username"
  L5 = L5(L6)
  L4.acs_username = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "acs_password"
  L5 = L5(L6)
  L4.acs_password = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "wan_label"
  L5 = L5(L6)
  L4.wan_label = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "conn_request_auth"
  L5 = L5(L6)
  L4.conn_request_auth = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "conn_username"
  L5 = L5(L6)
  L4.conn_username = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "conn_password"
  L5 = L5(L6)
  L4.conn_password = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "conn_port"
  L5 = L5(L6)
  L5 = L5 or L5
  L4.conn_port = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "country"
  L5 = L5(L6)
  L5 = L5 or L5
  L4.country = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "isp"
  L5 = L5(L6)
  L5 = L5 or L5
  L4.isp = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "chk_network"
  L5 = L5(L6)
  L5 = L5 or L5
  L4.chk_network = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "retry_inform"
  L5 = L5(L6)
  L5 = L5 or L5
  L4.retry_inform = L5
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "conn_failed_opt"
  L5 = L5(L6)
  L5 = L5 or L5
  L4.conn_failed_opt = L5
  L5 = L0.isStrNil
  L6 = L4.country
  L5 = L5(L6)
  if L5 then
    L4.country = "common"
  end
  L5 = L4.cwmp_enable
  if L5 == "1" then
    L5 = L1.checkValue
    L6 = L4
    L5 = L5(L6)
    L3.code = L5
  end
  L5 = L3.code
  if L5 == 0 then
    L5 = L1.setCwmp
    L6 = L4
    L5 = L5(L6)
    L3.code = L5
  end
  L5 = L3.code
  if L5 ~= 0 then
    L5 = _UPVALUE1_
    L5 = L5.getErrorMessage
    L6 = L3.code
    L5 = L5(L6)
    L3.msg = L5
  end
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L3
  L5(L6)
end
setCwmp = L4
function L4()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = require
  L1 = "xiaoqiang.common.XQFunction"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.util.XQCwmpUtil"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "wan_label"
  L2 = L2(L3)
  L2 = L2 or L2
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "country"
  L3 = L3(L4)
  L3 = L3 or L3
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "isp"
  L4 = L4(L5)
  L4 = L4 or L4
  L5 = L1.getCwmpSec
  L6 = L2
  L7 = L3
  L8 = L4
  L5 = L5(L6, L7, L8)
  L6 = {}
  L6.code = 0
  L7 = L0.isStrNil
  L8 = L2
  L7 = L7(L8)
  if not L7 then
    L7 = L0.isStrNil
    L8 = L5
    L7 = L7(L8)
    if L7 then
      L6.code = 1502
      L7 = _UPVALUE1_
      L7 = L7.getErrorMessage
      L8 = L6.code
      L7 = L7(L8)
      L6.msg = L7
  end
  else
    L6.code = 0
    L7 = L1.getCwmpInfo
    L8 = L5
    L7 = L7(L8)
    L6.current = L7
  end
  L7 = _UPVALUE0_
  L7 = L7.write_json
  L8 = L6
  L7(L8)
end
getCwmpInfo = L4
L4 = 4
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22
  L0 = {}
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.module.XQBaiduPanUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "luci.util"
  L4 = L4(L5)
  L5 = require
  L6 = "json"
  L5 = L5(L6)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "userName"
  L8 = nil
  L9 = "commonstr"
  L6 = L6(L7, L8, L9)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "token"
  L9 = nil
  L10 = "commonstr"
  L7 = L7(L8, L9, L10)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "localDire"
  L10 = nil
  L11 = "json"
  L8 = L8(L9, L10, L11)
  L9 = _UPVALUE0_
  L9 = L9.formvalue
  L10 = "remoteDire"
  L11 = nil
  L12 = "commonstr"
  L9 = L9(L10, L11, L12)
  L10 = _UPVALUE0_
  L10 = L10.formvalue
  L11 = "level"
  L12 = nil
  L13 = "commonstr"
  L10 = L10(L11, L12, L13)
  L11 = L2.getFeature
  L12 = "1"
  L13 = "system"
  L14 = "sp_lib"
  L11 = L11(L12, L13, L14)
  if L11 == "1" then
    L11 = require
    L12 = "xiaoqiang.XQStatPoints"
    L11 = L11(L12)
    L12 = L11.Log
    L13 = "storage.baidupan"
    L14 = "upload:1"
    L12(L13, L14)
  end
  L11 = L2.isStrNil
  L12 = L7
  L11 = L11(L12)
  if not L11 then
    L11 = L2.isStrNil
    L12 = L8
    L11 = L11(L12)
    if not L11 then
      L11 = L2.isStrNil
      L12 = L9
      L11 = L11(L12)
      if not L11 then
        L11 = L2.isStrNil
        L12 = L10
        L11 = L11(L12)
        if not L11 then
          L11 = L2.isStrNil
          L12 = L6
          L11 = L11(L12)
          if not L11 then
            goto lbl_92
          end
        end
      end
    end
  end
  L0.code = 1502
  L11 = _UPVALUE0_
  L11 = L11.write_json
  L12 = L0
  L11(L12)
  do return end
  ::lbl_92::
  L11 = L1.log
  L12 = _UPVALUE1_
  L13 = "BAIDUPAN setRouterToBaidu token "
  L14 = L7
  L15 = " local: "
  L16 = L8
  L17 = " remote: "
  L18 = L9
  L19 = " mode: "
  L20 = L10
  L21 = " username: "
  L22 = L6
  L13 = L13 .. L14 .. L15 .. L16 .. L17 .. L18 .. L19 .. L20 .. L21 .. L22
  L11(L12, L13)
  L11 = L3.setUserName
  L12 = L6
  L11(L12)
  L11 = L3.checkLocalFileName
  L12 = L8
  L11 = L11(L12)
  L8 = L11
  L11 = L3.checkFileFormat
  L12 = L8
  L11 = L11(L12)
  if not L11 then
    L12 = L3.BDPAN_ERROR_CODE
    L12 = L12.ERROR_DIR_OR_FILE_NAME_EXCEPT
    L0.code = L12
    L12 = _UPVALUE0_
    L12 = L12.write_json
    L13 = L0
    L12(L13)
    return
  end
  L12 = L3.getLocalPanDire
  L12 = L12()
  L13 = type
  L14 = L12
  L13 = L13(L14)
  if L13 == "number" then
    L0.code = L12
    L13 = _UPVALUE0_
    L13 = L13.write_json
    L14 = L0
    L13(L14)
    return
  end
  L13 = L5.decode
  L14 = L8
  L13 = L13(L14)
  L14 = L3.parsesLocalDire
  L15 = L13
  L16 = L10
  L14 = L14(L15, L16)
  L15 = type
  L16 = L14
  L15 = L15(L16)
  if L15 == "number" then
    L0.code = L14
    L15 = _UPVALUE0_
    L15 = L15.write_json
    L16 = L0
    L15(L16)
    return
  end
  L15 = {}
  L15.token = L7
  L15.remote_directory = L9
  L15.level = L10
  L15.directorys = L8
  L16 = L3.callUbus
  L17 = "upload"
  L18 = L15
  L16 = L16(L17, L18)
  L17 = L2.isStrNil
  L18 = L16
  L17 = L17(L18)
  if L17 then
    L17 = L3.BDPAN_ERROR_CODE
    L17 = L17.ERROR_UBUS_CALL_FAILED
    L0.code = L17
    L17 = _UPVALUE0_
    L17 = L17.write_json
    L18 = L0
    L17(L18)
    return
  end
  L17 = L16.code
  L0.code = L17
  L17 = _UPVALUE0_
  L17 = L17.write_json
  L18 = L0
  L17(L18)
end
setRouterToBaidu = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16
  L0 = {}
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.module.XQBaiduPanUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = require
  L5 = "luci.util"
  L4 = L4(L5)
  L5 = require
  L6 = "json"
  L5 = L5(L6)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "token"
  L8 = nil
  L9 = "commonstr"
  L6 = L6(L7, L8, L9)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "userName"
  L9 = nil
  L10 = "commonstr"
  L7 = L7(L8, L9, L10)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "info"
  L10 = nil
  L11 = "json"
  L8 = L8(L9, L10, L11)
  L9 = L3.getFeature
  L10 = "1"
  L11 = "system"
  L12 = "sp_lib"
  L9 = L9(L10, L11, L12)
  if L9 == "1" then
    L9 = require
    L10 = "xiaoqiang.XQStatPoints"
    L9 = L9(L10)
    L10 = L9.Log
    L11 = "storage.baidupan"
    L12 = "download:1"
    L10(L11, L12)
  end
  if not (L6 and L8) or not L7 then
    L0.code = 1502
    L9 = _UPVALUE0_
    L9 = L9.write_json
    L10 = L0
    L9(L10)
    return
  end
  L9 = L1.log
  L10 = _UPVALUE1_
  L11 = "BAIDUPAN setBaiduToRouter token "
  L12 = L6
  L13 = " username: "
  L14 = L7
  L15 = " info: "
  L16 = L8
  L11 = L11 .. L12 .. L13 .. L14 .. L15 .. L16
  L9(L10, L11)
  L9 = L2.setUserName
  L10 = L7
  L9(L10)
  L9 = L2.checkRemoteFileName
  L10 = L8
  L9 = L9(L10)
  L8 = L9
  L9 = L1.log
  L10 = _UPVALUE1_
  L11 = "BAIDUPAN setBaiduToRouter info: "
  L12 = L8
  L11 = L11 .. L12
  L9(L10, L11)
  L9 = L2.getLocalPanDire
  L9 = L9()
  L10 = type
  L11 = L9
  L10 = L10(L11)
  if L10 == "number" then
    L10 = dir_result
    L0.code = L10
    L10 = _UPVALUE0_
    L10 = L10.write_json
    L11 = L0
    L10(L11)
    return
  end
  L10 = L5.decode
  L11 = L8
  L10 = L10(L11)
  L11 = L2.parseDlink
  L12 = L10
  L11 = L11(L12)
  L12 = type
  L13 = L11
  L12 = L12(L13)
  if L12 == "number" then
    L12 = L2.BDPAN_ERROR_CODE
    L12 = L12.ERROR_UBUS_CALL_FAILED
    L0.code = L12
    L12 = _UPVALUE0_
    L12 = L12.write_json
    L13 = L0
    L12(L13)
    return
  end
  L12 = {}
  L12.token = L6
  L12.local_directory = L9
  L12.info = L8
  L13 = L2.callUbus
  L14 = "download"
  L15 = L12
  L13 = L13(L14, L15)
  L14 = L3.isStrNil
  L15 = L13
  L14 = L14(L15)
  if L14 then
    L14 = L2.BDPAN_ERROR_CODE
    L14 = L14.ERROR_UBUS_CALL_FAILED
    L0.code = L14
    L14 = _UPVALUE0_
    L14 = L14.write_json
    L15 = L0
    L14(L15)
    return
  end
  L14 = L13.code
  L0.code = L14
  L14 = _UPVALUE0_
  L14 = L14.write_json
  L15 = L0
  L14(L15)
end
setBaiduToRouter = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18
  L0 = {}
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "json"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.module.XQBaiduPanUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.common.XQFunction"
  L4 = L4(L5)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "userName"
  L7 = nil
  L8 = "commonstr"
  L5 = L5(L6, L7, L8)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "actiontype"
  L8 = nil
  L9 = "commonstr"
  L6 = L6(L7, L8, L9)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "listtype"
  L9 = nil
  L10 = "commonstr"
  L7 = L7(L8, L9, L10)
  L8 = _UPVALUE0_
  L8 = L8.formvalue
  L9 = "actionids"
  L10 = nil
  L11 = "json"
  L8 = L8(L9, L10, L11)
  L9 = require
  L10 = "luci.util"
  L9 = L9(L10)
  L10 = require
  L11 = "luci.model.uci"
  L10 = L10(L11)
  L10 = L10.cursor
  L10 = L10()
  L11 = L4.isStrNil
  L12 = L5
  L11 = L11(L12)
  if not L11 then
    L11 = L4.isStrNil
    L12 = L7
    L11 = L11(L12)
    if not L11 then
      L11 = L4.isStrNil
      L12 = L8
      L11 = L11(L12)
      if not L11 then
        L11 = L4.isStrNil
        L12 = L6
        L11 = L11(L12)
        if not L11 then
          goto lbl_72
        end
      end
    end
  end
  L0.code = 1502
  L11 = _UPVALUE0_
  L11 = L11.write_json
  L12 = L0
  L11(L12)
  do return end
  ::lbl_72::
  L11 = L1.log
  L12 = _UPVALUE1_
  L13 = "BAIDUPAN deleteTransportList: "
  L14 = L5
  L15 = " listtype: "
  L16 = L7
  L17 = " actiontids: "
  L18 = L8
  L13 = L13 .. L14 .. L15 .. L16 .. L17 .. L18
  L11(L12, L13)
  L11 = L3.deleteTransportList
  L12 = L6
  L13 = L7
  L14 = L8
  L11(L12, L13, L14)
  L11 = {}
  L11.actiontype = L6
  L11.listtype = L7
  L11.actionid = L8
  L12 = L3.callUbus
  L13 = "deltranslistfile"
  L14 = L11
  L12(L13, L14)
  L0.code = 0
  L12 = _UPVALUE0_
  L12 = L12.write_json
  L13 = L0
  L12(L13)
end
deleteTransportList = L5
function L5(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L2 = require
  L3 = "luci.util"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = L3.isStrNil
  L5 = A0
  L4 = L4(L5)
  if not L4 then
    L4 = L3.isStrNil
    L5 = A1
    L4 = L4(L5)
    if not L4 then
      goto lbl_19
    end
  end
  L4 = true
  do return L4 end
  ::lbl_19::
  L4 = L2.split
  L5 = A0
  L6 = ":"
  L4 = L4(L5, L6)
  L5 = tonumber
  L6 = L4[2]
  L5 = L5(L6)
  L6 = tonumber
  L7 = L4[5]
  L6 = L6(L7)
  L7 = L3.isStrNil
  L8 = L6
  L7 = L7(L8)
  if L7 then
    L6 = 2147483647
  end
  L7 = L2.split
  L8 = A1
  L9 = ":"
  L7 = L7(L8, L9)
  L8 = tonumber
  L9 = L7[2]
  L8 = L8(L9)
  L9 = tonumber
  L10 = L7[5]
  L9 = L9(L10)
  L10 = L3.isStrNil
  L11 = L9
  L10 = L10(L11)
  if L10 then
    L9 = 2147483647
  end
  L10 = L6 > L9
  return L10
end
time_cmp = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24
  L5 = {}
  L6 = 10
  L7 = require
  L8 = "xiaoqiang.XQLog"
  L7 = L7(L8)
  L8 = require
  L9 = "json"
  L8 = L8(L9)
  L9 = require
  L10 = "xiaoqiang.module.XQBaiduPanUtil"
  L9 = L9(L10)
  L10 = require
  L11 = "xiaoqiang.common.XQFunction"
  L10 = L10(L11)
  L11 = require
  L12 = "luci.util"
  L11 = L11(L12)
  L12 = _UPVALUE0_
  L12 = L12.formvalue
  L13 = "userName"
  L14 = nil
  L15 = "commonstr"
  L12 = L12(L13, L14, L15)
  L13 = _UPVALUE0_
  L13 = L13.formvalue
  L14 = "listtype"
  L15 = nil
  L16 = "commonstr"
  L13 = L13(L14, L15, L16)
  L14 = _UPVALUE0_
  L14 = L14.formvalue
  L15 = "listoffset"
  L16 = nil
  L17 = "commonstr"
  L14 = L14(L15, L16, L17)
  L15 = require
  L16 = "luci.model.uci"
  L15 = L15(L16)
  L15 = L15.cursor
  L15 = L15()
  L16 = {}
  L16.code = 0
  L16.downloadlist = ""
  L16.uploadlist = ""
  if not (L12 and L13) or not L14 then
    L16.code = 1502
    L17 = _UPVALUE0_
    L17 = L17.write_json
    L18 = L16
    L17(L18)
    return
  end
  L17 = L7.log
  L18 = _UPVALUE1_
  L19 = "BAIDUPAN getTransportList: "
  L20 = L12
  L21 = " mode: "
  L22 = L13
  L23 = " offset: "
  L24 = L14
  L19 = L19 .. L20 .. L21 .. L22 .. L23 .. L24
  L17(L18, L19)
  L18 = L15
  L17 = L15.get
  L19 = "baidupan"
  L20 = "user"
  L21 = "name"
  L17 = L17(L18, L19, L20, L21)
  L3 = L17
  L18 = L15
  L17 = L15.get
  L19 = "baidupan"
  L20 = "user"
  L21 = "localdir"
  L17 = L17(L18, L19, L20, L21)
  L4 = L17
  L17 = {}
  L17.listtype = L13
  L18 = L9.callUbus
  L19 = "gettranslist"
  L20 = L17
  L18 = L18(L19, L20)
  L19 = L10.isStrNil
  L20 = L18
  L19 = L19(L20)
  if L19 then
    L19 = L9.BDPAN_ERROR_CODE
    L19 = L19.ERROR_UBUS_CALL_FAILED
    L16.code = L19
    L19 = _UPVALUE0_
    L19 = L19.write_json
    L20 = L16
    L19(L20)
    return
  end
  if L13 and L13 == "uploadlist" then
    L19 = L8.decode
    L20 = L18.list
    L19 = L19(L20)
    L20 = table
    L20 = L20.sort
    L21 = L19
    L22 = time_cmp
    L20(L21, L22)
    L20 = L9.splitList
    L21 = L19
    L20 = L20(L21)
    L16.uploadlist = L20
  elseif L13 and L13 == "downloadlist" then
    L19 = L8.decode
    L20 = L18.list
    L19 = L19(L20)
    L20 = table
    L20 = L20.sort
    L21 = L19
    L22 = time_cmp
    L20(L21, L22)
    L20 = L9.splitList
    L21 = L19
    L20 = L20(L21)
    L16.downloadlist = L20
  else
    L19 = L7.log
    L20 = _UPVALUE1_
    L21 = "paramter error!"
    L19(L20, L21)
  end
  L16.username = L3
  L16.localdir = L4
  L19 = _UPVALUE0_
  L19 = L19.write_json
  L20 = L16
  L19(L20)
end
getTransportList = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17
  L0 = require
  L1 = "json"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.module.XQBaiduPanUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "userName"
  L6 = nil
  L7 = "commonstr"
  L4 = L4(L5, L6, L7)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "actiontype"
  L7 = nil
  L8 = "commonstr"
  L5 = L5(L6, L7, L8)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "listtype"
  L8 = nil
  L9 = "commonstr"
  L6 = L6(L7, L8, L9)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "actionid"
  L9 = nil
  L10 = "commonstr"
  L7 = L7(L8, L9, L10)
  L8 = require
  L9 = "luci.model.uci"
  L8 = L8(L9)
  L8 = L8.cursor
  L8 = L8()
  L9 = {}
  L9.code = 0
  L10 = L3.isStrNil
  L11 = L4
  L10 = L10(L11)
  if not L10 then
    L10 = L3.isStrNil
    L11 = L5
    L10 = L10(L11)
    if not L10 then
      L10 = L3.isStrNil
      L11 = L7
      L10 = L10(L11)
      if not L10 then
        goto lbl_65
      end
    end
  end
  L9.code = 1502
  L10 = _UPVALUE0_
  L10 = L10.write_json
  L11 = L9
  L10(L11)
  do return end
  ::lbl_65::
  L10 = L1.log
  L11 = _UPVALUE1_
  L12 = "BAIDUPAN setBaidupanAction: "
  L13 = L4
  L14 = " actiontype: "
  L15 = L5
  L16 = " actionid: "
  L17 = L7
  L12 = L12 .. L13 .. L14 .. L15 .. L16 .. L17
  L10(L11, L12)
  L10 = {}
  L10.actiontype = L5
  L10.listtype = L6
  L10.actionid = L7
  L11 = L2.callUbus
  L12 = "translistaction"
  L13 = L10
  L11(L12, L13)
  L11 = _UPVALUE0_
  L11 = L11.write_json
  L12 = L9
  L11(L12)
end
setTransListAction = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13
  L0 = require
  L1 = "json"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "luci.util"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.module.XQBaiduPanUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.common.XQFunction"
  L4 = L4(L5)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "userName"
  L7 = nil
  L8 = "commonstr"
  L5 = L5(L6, L7, L8)
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "listtype"
  L8 = nil
  L9 = "commonstr"
  L6 = L6(L7, L8, L9)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "actionid"
  L9 = nil
  L10 = "commonstr"
  L7 = L7(L8, L9, L10)
  L8 = require
  L9 = "luci.model.uci"
  L8 = L8(L9)
  L8 = L8.cursor
  L8 = L8()
  L9 = {}
  L9.code = 0
  L10 = L4.isStrNil
  L11 = L5
  L10 = L10(L11)
  if not L10 then
    L10 = L4.isStrNil
    L11 = L6
    L10 = L10(L11)
    if not L10 then
      L10 = L4.isStrNil
      L11 = L7
      L10 = L10(L11)
      if not L10 then
        goto lbl_62
      end
    end
  end
  L9.code = 1502
  L10 = _UPVALUE0_
  L10 = L10.write_json
  L11 = L9
  L10(L11)
  do return end
  ::lbl_62::
  L10 = {}
  L10.listtype = L6
  L10.actionid = L7
  L11 = L3.callUbus
  L12 = "transfilestat"
  L13 = L10
  L11 = L11(L12, L13)
  L12 = L4.isStrNil
  L13 = L11
  L12 = L12(L13)
  if L12 then
    L9.code = 1502
    L12 = _UPVALUE0_
    L12 = L12.write_json
    L13 = L9
    L12(L13)
    return
  end
  L12 = L11.percent
  L9.percentage = L12
  L12 = L11.speed
  L9.speed = L12
  L12 = _UPVALUE0_
  L12 = L12.write_json
  L13 = L9
  L12(L13)
end
getTransListFileStat = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9
  L0 = {}
  L0.code = 0
  L1 = require
  L2 = "xiaoqiang.module.XQBaiduPanUtil"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.util"
  L3 = L3(L4)
  L4 = require
  L5 = "json"
  L4 = L4(L5)
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "userName"
  L7 = nil
  L8 = "commonstr"
  L5 = L5(L6, L7, L8)
  L6 = L2.isStrNil
  L7 = L5
  L6 = L6(L7)
  if L6 then
    L0.code = 1502
    L6 = _UPVALUE0_
    L6 = L6.write_json
    L7 = L0
    L6(L7)
    return
  end
  L6 = {}
  L7 = L1.callUbus
  L8 = "gettranslistcount"
  L9 = L6
  L7 = L7(L8, L9)
  L8 = L2.isStrNil
  L9 = L7
  L8 = L8(L9)
  if L8 then
    L0.code = 1502
    L8 = _UPVALUE0_
    L8 = L8.write_json
    L9 = L0
    L8(L9)
    return
  end
  L8 = L7.count
  L0.count = L8
  L8 = _UPVALUE0_
  L8 = L8.write_json
  L9 = L0
  L8(L9)
end
getTransListCount = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.module.XQBaiduPanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "userName"
  L4 = nil
  L5 = "commonstr"
  L2 = L2(L3, L4, L5)
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "path"
  L5 = nil
  L6 = "commonstr"
  L3 = L3(L4, L5, L6)
  L4 = {}
  L4.code = 0
  L5 = L1.isStrNil
  L6 = L2
  L5 = L5(L6)
  if not L5 then
    L5 = L1.isStrNil
    L6 = L3
    L5 = L5(L6)
    if not L5 then
      goto lbl_37
    end
  end
  L4.code = 1502
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L4
  L5(L6)
  do return end
  ::lbl_37::
  L5 = L0.setBaidupanPath
  L6 = L3
  L5 = L5(L6)
  code = L5
  L5 = code
  L4.code = L5
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L4
  L5(L6)
end
setBaiduPath = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.module.XQBaiduPanUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "userName"
  L4 = nil
  L5 = "commonstr"
  L2 = L2(L3, L4, L5)
  L3 = {}
  L4 = {}
  L4.code = 0
  L4.path = ""
  L4.bindStatus = ""
  L5 = L1.isStrNil
  L6 = L2
  L5 = L5(L6)
  if L5 then
    L4.code = 1502
    L5 = _UPVALUE0_
    L5 = L5.write_json
    L6 = L4
    L5(L6)
    return
  end
  L5 = L0.getBaidupanPath
  L5 = L5()
  L3 = L5
  L5 = L3.path
  L4.path = L5
  L5 = L3.bindStatus
  L4.bindStatus = L5
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L4
  L5(L6)
end
getBaiduPath = L5
L5 = 6
function L6()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16
  L0 = {}
  L0.code = 0
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.module.XQMiDockerUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "luci.model.uci"
  L4 = L4(L5)
  L4 = L4.cursor
  L4 = L4()
  L5 = _UPVALUE0_
  L5 = L5.formvalue
  L6 = "mode"
  L5 = L5(L6)
  L7 = L4
  L6 = L4.get
  L8 = "mi_docker"
  L9 = "settings"
  L10 = "docker_enable"
  L6 = L6(L7, L8, L9, L10)
  L8 = L4
  L7 = L4.get
  L9 = "mi_docker"
  L10 = "settings"
  L11 = "docker_install"
  L7 = L7(L8, L9, L10, L11)
  L8 = L3.DOCKER_ERROR_CODE
  L9 = L2.isStrNil
  L10 = L5
  L9 = L9(L10)
  if L9 then
    L0.code = 1502
    L9 = _UPVALUE0_
    L9 = L9.write_json
    L10 = L0
    L9(L10)
    return
  end
  L9 = L1.log
  L10 = _UPVALUE1_
  L11 = "setMiDocker mode : "
  L12 = L5
  L13 = " enable: "
  L14 = L6
  L15 = " install: "
  L16 = L7
  L11 = L11 .. L12 .. L13 .. L14 .. L15 .. L16
  L9(L10, L11)
  if L7 and L7 == "0" then
    L9 = L3.getErrorInfo
    L10 = L8.ERROR_NOT_INSTALL_DOCKER
    L9 = L9(L10)
    L0 = L9
    L9 = _UPVALUE0_
    L9 = L9.write_json
    L10 = L0
    L9(L10)
    return
  end
  L9 = L1.log
  L10 = _UPVALUE1_
  L11 = "setMiDocker mode : "
  L12 = L5
  L11 = L11 .. L12
  L9(L10, L11)
  if L5 == "1" then
    if L6 and L6 == "0" then
      L9 = L3.start
      L9()
    end
  elseif L6 and L6 == "1" then
    L9 = L3.stop
    L9()
  end
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L0
  L9(L10)
end
setMiDocker = L6
function L6()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22
  L0 = {}
  L0.code = 0
  L1 = require
  L2 = "xiaoqiang.module.XQStorage"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.XQLog"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.common.XQFunction"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.module.XQMiDockerUtil"
  L4 = L4(L5)
  L5 = require
  L6 = "luci.model.uci"
  L5 = L5(L6)
  L5 = L5.cursor
  L5 = L5()
  L6 = _UPVALUE0_
  L6 = L6.formvalue
  L7 = "mode"
  L8 = nil
  L9 = "numberstr"
  L6 = L6(L7, L8, L9)
  L7 = _UPVALUE0_
  L7 = L7.formvalue
  L8 = "uuid"
  L9 = nil
  L10 = "?commonstr"
  L7 = L7(L8, L9, L10)
  L9 = L5
  L8 = L5.get
  L10 = "mi_docker"
  L11 = "settings"
  L12 = "docker_install"
  L8 = L8(L9, L10, L11, L12)
  L8 = L8 or L8
  L9 = L4.DOCKER_ERROR_CODE
  L10, L11 = nil, nil
  L12 = L3.isStrNil
  L13 = L6
  L12 = L12(L13)
  if not L12 then
    if L6 ~= "1" then
      goto lbl_60
    end
    L12 = L3.isStrNil
    L13 = L7
    L12 = L12(L13)
    if not L12 then
      goto lbl_60
    end
  end
  L0.code = 1502
  L12 = _UPVALUE0_
  L12 = L12.write_json
  L13 = L0
  L12(L13)
  do return end
  ::lbl_60::
  L13 = L5
  L12 = L5.get
  L14 = "mi_docker"
  L15 = "settings"
  L16 = "device_uuid"
  L12 = L12(L13, L14, L15, L16)
  L12 = L12 or L12
  if L6 == "1" and L12 ~= L7 then
    L13 = L1.getStorageInfoByUuid
    L14 = L7
    L13 = L13(L14)
    L11 = L13
    if L11 then
      L13 = L11.type
      if L13 then
        L13 = L11.size
        if L13 then
          L14 = L5
          L13 = L5.set
          L15 = "mi_docker"
          L16 = "settings"
          L17 = "device_type"
          L18 = L11.type
          L19 = L18
          L18 = L18.upper
          L18, L19, L20, L21, L22 = L18(L19)
          L13(L14, L15, L16, L17, L18, L19, L20, L21, L22)
          L14 = L5
          L13 = L5.set
          L15 = "mi_docker"
          L16 = "settings"
          L17 = "device_size"
          L18 = tonumber
          L19 = L11.size
          L20 = L19
          L19 = L19.sub
          L21 = 1
          L22 = -7
          L19, L20, L21, L22 = L19(L20, L21, L22)
          L18 = L18(L19, L20, L21, L22)
          L18 = L18 / 2
          L13(L14, L15, L16, L17, L18)
        end
      end
    end
    L14 = L5
    L13 = L5.set
    L15 = "mi_docker"
    L16 = "settings"
    L17 = "device_uuid"
    L18 = L7
    L13(L14, L15, L16, L17, L18)
    L14 = L5
    L13 = L5.commit
    L15 = "mi_docker"
    L13(L14, L15)
  end
  if L6 == "1" then
    L13 = L4.checkEnv
    L13 = L13()
    L10 = L13
    if L10 == 1 then
      L13 = L4.getErrorInfo
      L14 = L9.ERROR_NOT_INSTALL_USB
      L13 = L13(L14)
      L0 = L13
      L13 = _UPVALUE0_
      L13 = L13.write_json
      L14 = L0
      L13(L14)
      return
    elseif L10 == 2 then
      L13 = L4.getErrorInfo
      L14 = L9.ERROR_NOT_EXT4
      L13 = L13(L14)
      L0 = L13
      L13 = _UPVALUE0_
      L13 = L13.write_json
      L14 = L0
      L13(L14)
      return
    elseif L10 == 3 then
      L13 = L4.getErrorInfo
      L14 = L9.ERROR_NOT_GREATER_32G
      L13 = L13(L14)
      L0 = L13
      L13 = _UPVALUE0_
      L13 = L13.write_json
      L14 = L0
      L13(L14)
      return
    end
  end
  if L6 == "0" then
    L13 = L4.checkRunning
    L13 = L13()
    if L13 then
      L13 = L4.getErrorInfo
      L14 = L9.ERROR_NOW_RUNNING
      L13 = L13(L14)
      L0 = L13
      L13 = _UPVALUE0_
      L13 = L13.write_json
      L14 = L0
      L13(L14)
      return
    end
  end
  if L6 == "1" then
    if L8 == "0" then
      L13 = L4.install
      L13()
    else
      L13 = L4.getErrorInfo
      L14 = L9.ERROR_DOCKER_ALREADY_INSTALL
      L13 = L13(L14)
      L0 = L13
    end
  else
    L13 = L4.uninstall
    L13()
    L14 = L5
    L13 = L5.set
    L15 = "mi_docker"
    L16 = "settings"
    L17 = "docker_enable"
    L18 = "0"
    L13(L14, L15, L16, L17, L18)
    L14 = L5
    L13 = L5.delete
    L15 = "mi_docker"
    L16 = "settings"
    L17 = "device_uuid"
    L13(L14, L15, L16, L17)
    L14 = L5
    L13 = L5.delete
    L15 = "mi_docker"
    L16 = "settings"
    L17 = "device_type"
    L13(L14, L15, L16, L17)
    L14 = L5
    L13 = L5.delete
    L15 = "mi_docker"
    L16 = "settings"
    L17 = "device_size"
    L13(L14, L15, L16, L17)
    L14 = L5
    L13 = L5.commit
    L15 = "mi_docker"
    L13(L14, L15)
  end
  L13 = _UPVALUE0_
  L13 = L13.write_json
  L14 = L0
  L13(L14)
end
setMiDockerEnv = L6
function L6()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10
  L0 = {}
  L0.code = 0
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.module.XQMiDockerUtil"
  L2 = L2(L3)
  L3 = require
  L4 = "luci.model.uci"
  L3 = L3(L4)
  L3 = L3.cursor
  L3 = L3()
  L4 = _UPVALUE0_
  L4 = L4.formvalue
  L5 = "mode"
  L4 = L4(L5)
  L6 = L3
  L5 = L3.get
  L7 = "mi_docker"
  L8 = "settings"
  L9 = "docker_enable"
  L5 = L5(L6, L7, L8, L9)
  L7 = L3
  L6 = L3.get
  L8 = "mi_docker"
  L9 = "settings"
  L10 = "portainer_install"
  L6 = L6(L7, L8, L9, L10)
  L7 = L2.DOCKER_ERROR_CODE
  L8 = L1.isStrNil
  L9 = L4
  L8 = L8(L9)
  if L8 then
    L0.code = 1502
    L8 = _UPVALUE0_
    L8 = L8.write_json
    L9 = L0
    L8(L9)
    return
  end
  if L5 and L5 == "0" then
    L8 = L2.getErrorInfo
    L9 = L7.ERROR_NOT_START_DOCKER
    L8 = L8(L9)
    L0 = L8
    L8 = _UPVALUE0_
    L8 = L8.write_json
    L9 = L0
    L8(L9)
    return
  end
  if L4 == "1" and L6 == "1" then
    L8 = L2.getErrorInfo
    L9 = L7.ERROR_ALREADY_INSTALL
    L8 = L8(L9)
    L0 = L8
    L8 = _UPVALUE0_
    L8 = L8.write_json
    L9 = L0
    L8(L9)
    return
  end
  if L4 == "1" and L6 and L6 == "0" then
    L8 = L2.installPortainer
    L8()
  end
  L8 = _UPVALUE0_
  L8 = L8.write_json
  L9 = L0
  L8(L9)
end
setPortainerEnv = L6
function L6()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L0 = {}
  L0.code = 0
  L1 = require
  L2 = "xiaoqiang.XQLog"
  L1 = L1(L2)
  L2 = require
  L3 = "xiaoqiang.common.XQFunction"
  L2 = L2(L3)
  L3 = require
  L4 = "xiaoqiang.module.XQMiDockerUtil"
  L3 = L3(L4)
  L4 = require
  L5 = "xiaoqiang.util.XQLanWanUtil"
  L4 = L4(L5)
  L5 = require
  L6 = "luci.model.uci"
  L5 = L5(L6)
  L5 = L5.cursor
  L5 = L5()
  L6 = L3.DOCKER_ERROR_CODE
  L8 = L5
  L7 = L5.get
  L9 = "mi_docker"
  L10 = "settings"
  L11 = "docker_enable"
  L7 = L7(L8, L9, L10, L11)
  if L7 and L7 == "0" then
    L8 = L3.getErrorInfo
    L9 = L6.ERROR_NOT_START_DOCKER
    L8 = L8(L9)
    L0 = L8
    L8 = _UPVALUE0_
    L8 = L8.write_json
    L9 = L0
    L8(L9)
    return
  end
  L8 = L4.getLanIp
  L8 = L8()
  L9 = L2.isStrNil
  L10 = L8
  L9 = L9(L10)
  if L9 then
    L9 = L3.getErrorInfo
    L10 = L6.ERROR_LAN_NOT_EXIST_IP
    L9 = L9(L10)
    L0 = L9
    L0.http = "error"
  else
    L9 = "http://"
    L10 = L8
    L11 = ":9001"
    L9 = L9 .. L10 .. L11
    L0.http = L9
  end
  L9 = _UPVALUE0_
  L9 = L9.write_json
  L10 = L0
  L9(L10)
end
setPortainerManage = L6
function L6()
  local L0, L1, L2
  L0 = require
  L1 = "xiaoqiang.module.XQMiDockerUtil"
  L0 = L0(L1)
  L1 = _UPVALUE0_
  L1 = L1.write_json
  L2 = L0.getInfo
  L2 = L2()
  L1(L2)
end
getDockerInfo = L6
function L6()
  local L0, L1, L2
  L0 = require
  L1 = "xiaoqiang.module.XQMiDockerUtil"
  L0 = L0(L1)
  L1 = L0.cancelInstall
  L1()
  L1 = _UPVALUE0_
  L1 = L1.write_json
  L2 = {}
  L2.code = 0
  L1(L2)
end
setMiDockerCancel = L6
function L6()
  local L0, L1, L2
  L0 = require
  L1 = "xiaoqiang.module.XQMiDockerUtil"
  L0 = L0(L1)
  L1 = L0.cancelInstallPortainer
  L1()
  L1 = _UPVALUE0_
  L1 = L1.write_json
  L2 = {}
  L2.code = 0
  L1(L2)
end
setPortainerCancel = L6
function L6()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = L0.get_twt_hostap
  L2 = L2()
  L1.status = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getTwt = L6
function L6()
  local L0, L1, L2, L3, L4, L5, L6
  L0 = require
  L1 = "xiaoqiang.util.XQWifiUtil"
  L0 = L0(L1)
  L1 = require
  L2 = "xiaoqiang.common.XQFunction"
  L1 = L1(L2)
  L2 = _UPVALUE0_
  L2 = L2.formvalue
  L3 = "on"
  L2 = L2(L3)
  L3 = {}
  L3.code = 0
  L4 = L0.set_twt_hostap
  L5 = L2
  L4 = L4(L5)
  if not L4 then
    L3.code = 1537
  end
  L5 = _UPVALUE0_
  L5 = L5.write_json
  L6 = L3
  L5(L6)
  L5 = _UPVALUE0_
  L5 = L5.close
  L5()
  L5 = L1.forkRestartWifiNotify
  L5()
end
setTwt = L6
function L6()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.util.XQLanWanUtil"
  L0 = L0(L1)
  L1 = {}
  L1.code = 0
  L2 = {}
  L1.ipv4 = L2
  L2 = {}
  L1.ipv6 = L2
  L2 = L0.getLanStatus
  L2 = L2()
  L1.ipv4 = L2
  L2 = L0.getLanV6Status
  L2 = L2()
  L1.ipv6 = L2
  L2 = _UPVALUE0_
  L2 = L2.write_json
  L3 = L1
  L2(L3)
end
getBridgeLanStatus = L6
function L6()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.model.uci"
  L1 = L1(L2)
  L1 = L1.cursor
  L1 = L1()
  L2 = {}
  L2.code = 0
  L3 = _UPVALUE0_
  L3 = L3.formvalue
  L4 = "on"
  L3 = L3(L4)
  L3 = L3 or L3
  if L3 ~= "1" and L3 ~= "0" then
    L4 = L0.log
    L5 = 6
    L6 = "Gateway Security switch is:"
    L7 = L3
    L6 = L6 .. L7
    L4(L5, L6)
    L2.code = 1537
  else
    L5 = L1
    L4 = L1.set
    L6 = "local_gw_security"
    L7 = "settings"
    L8 = "enabled"
    L9 = L3
    L4(L5, L6, L7, L8, L9)
    L5 = L1
    L4 = L1.commit
    L6 = "local_gw_security"
    L4(L5, L6)
    L4 = os
    L4 = L4.execute
    L5 = "/etc/init.d/local_gw_security restart"
    L4(L5)
  end
  L4 = L2.code
  if L4 ~= 0 then
    L4 = _UPVALUE1_
    L4 = L4.getErrorMessage
    L5 = L2.code
    L4 = L4(L5)
    L2.msg = L4
  end
  L4 = _UPVALUE0_
  L4 = L4.write_json
  L5 = L2
  L4(L5)
end
setGwSecurity = L6
function L6()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = require
  L1 = "xiaoqiang.XQLog"
  L0 = L0(L1)
  L1 = require
  L2 = "luci.model.uci"
  L1 = L1(L2)
  L1 = L1.cursor
  L1 = L1()
  L2 = {}
  L2.code = 0
  L2.msg = "success"
  L4 = L1
  L3 = L1.get
  L5 = "local_gw_security"
  L6 = "settings"
  L7 = "enabled"
  L3 = L3(L4, L5, L6, L7)
  L3 = L3 or L3
  L2.enable = L3
  L3 = L2.code
  if L3 ~= 0 then
    L3 = _UPVALUE0_
    L3 = L3.getErrorMessage
    L4 = L2.code
    L3 = L3(L4)
    L2.msg = L3
  end
  L3 = _UPVALUE1_
  L3 = L3.write_json
  L4 = L2
  L3(L4)
end
getGwSecurity = L6
