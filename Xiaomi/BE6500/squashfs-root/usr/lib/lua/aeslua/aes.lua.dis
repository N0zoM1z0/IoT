local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21
L0 = module
L1 = "aeslua.aes"
L2 = package
L2 = L2.seeall
L0(L1, L2)
L0 = require
L1 = "bit"
L0 = L0(L1)
L1 = require
L2 = "aeslua.gf"
L1 = L1(L2)
L2 = require
L3 = "aeslua.util"
L2 = L2(L3)
L3 = {}
L4 = {}
L5 = aeslua
L5.aes = L3
L3.ROUNDS = "rounds"
L3.KEY_TYPE = "type"
L3.ENCRYPTION_KEY = 1
L3.DECRYPTION_KEY = 2
L5 = {}
L4.SBox = L5
L5 = {}
L4.iSBox = L5
L5 = {}
L4.table0 = L5
L5 = {}
L4.table1 = L5
L5 = {}
L4.table2 = L5
L5 = {}
L4.table3 = L5
L5 = {}
L4.tableInv0 = L5
L5 = {}
L4.tableInv1 = L5
L5 = {}
L4.tableInv2 = L5
L5 = {}
L4.tableInv3 = L5
L5 = {}
L6 = 16777216
L7 = 33554432
L8 = 67108864
L9 = 134217728
L10 = 268435456
L11 = 536870912
L12 = 1073741824
L13 = -2147483648
L14 = 452984832
L15 = 905969664
L16 = 1811939328
L17 = -671088640
L18 = -1426063360
L19 = 1291845632
L20 = -1711276032
L21 = 788529152
L5[1] = L6
L5[2] = L7
L5[3] = L8
L5[4] = L9
L5[5] = L10
L5[6] = L11
L5[7] = L12
L5[8] = L13
L5[9] = L14
L5[10] = L15
L5[11] = L16
L5[12] = L17
L5[13] = L18
L5[14] = L19
L5[15] = L20
L5[16] = L21
L4.rCon = L5
function L5(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8
  mask = L1
  result = L1
  for L4 = L1, L2, L3 do
    L5 = _UPVALUE0_
    L5 = L5.lshift
    L6 = result
    L7 = 1
    L5 = L5(L6, L7)
    result = L5
    L5 = _UPVALUE1_
    L5 = L5.byteParity
    L6 = _UPVALUE0_
    L6 = L6.band
    L7 = A0
    L8 = mask
    L6, L7, L8 = L6(L7, L8)
    L5 = L5(L6, L7, L8)
    parity = L5
    L5 = result
    L6 = parity
    L5 = L5 + L6
    result = L5
    L5 = _UPVALUE0_
    L5 = L5.band
    L6 = mask
    L7 = 1
    L5 = L5(L6, L7)
    lastbit = L5
    L5 = _UPVALUE0_
    L5 = L5.band
    L6 = _UPVALUE0_
    L6 = L6.rshift
    L7 = mask
    L8 = 1
    L6 = L6(L7, L8)
    L7 = 255
    L5 = L5(L6, L7)
    mask = L5
    L5 = lastbit
    if L5 ~= 0 then
      L5 = _UPVALUE0_
      L5 = L5.bor
      L6 = mask
      L7 = 128
      L5 = L5(L6, L7)
      mask = L5
    else
      L5 = _UPVALUE0_
      L5 = L5.band
      L6 = mask
      L7 = 127
      L5 = L5(L6, L7)
      mask = L5
    end
  end
  return L1(L2, L3)
end
L4.affinMap = L5
function L5()
  local L0, L1, L2, L3, L4, L5
  for L3 = L0, L1, L2 do
    if L3 ~= 0 then
      L4 = _UPVALUE0_
      L4 = L4.invert
      L5 = L3
      L4 = L4(L5)
      inverse = L4
    else
      inverse = L3
    end
    L4 = _UPVALUE1_
    L4 = L4.affinMap
    L5 = inverse
    L4 = L4(L5)
    mapped = L4
    L4 = _UPVALUE1_
    L4 = L4.SBox
    L5 = mapped
    L4[L3] = L5
    L4 = _UPVALUE1_
    L4 = L4.iSBox
    L5 = mapped
    L4[L5] = L3
  end
end
L4.calcSBox = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9
  for L3 = L0, L1, L2 do
    L4 = _UPVALUE0_
    L4 = L4.SBox
    L4 = L4[L3]
    byte = L4
    L4 = _UPVALUE0_
    L4 = L4.table0
    L5 = _UPVALUE1_
    L5 = L5.putByte
    L6 = _UPVALUE2_
    L6 = L6.mul
    L7 = 3
    L8 = byte
    L6 = L6(L7, L8)
    L7 = 0
    L5 = L5(L6, L7)
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = byte
    L8 = 1
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = byte
    L8 = 2
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 2
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 3
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L4[L3] = L5
    L4 = _UPVALUE0_
    L4 = L4.table1
    L5 = _UPVALUE1_
    L5 = L5.putByte
    L6 = byte
    L7 = 0
    L5 = L5(L6, L7)
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = byte
    L8 = 1
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 2
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 2
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 3
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 3
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L4[L3] = L5
    L4 = _UPVALUE0_
    L4 = L4.table2
    L5 = _UPVALUE1_
    L5 = L5.putByte
    L6 = byte
    L7 = 0
    L5 = L5(L6, L7)
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 2
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 1
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 3
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 2
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = byte
    L8 = 3
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L4[L3] = L5
    L4 = _UPVALUE0_
    L4 = L4.table3
    L5 = _UPVALUE1_
    L5 = L5.putByte
    L6 = _UPVALUE2_
    L6 = L6.mul
    L7 = 2
    L8 = byte
    L6 = L6(L7, L8)
    L7 = 0
    L5 = L5(L6, L7)
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 3
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 1
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = byte
    L8 = 2
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = byte
    L8 = 3
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L4[L3] = L5
  end
end
L4.calcRoundTables = L5
function L5()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9
  for L3 = L0, L1, L2 do
    L4 = _UPVALUE0_
    L4 = L4.iSBox
    L4 = L4[L3]
    byte = L4
    L4 = _UPVALUE0_
    L4 = L4.tableInv0
    L5 = _UPVALUE1_
    L5 = L5.putByte
    L6 = _UPVALUE2_
    L6 = L6.mul
    L7 = 11
    L8 = byte
    L6 = L6(L7, L8)
    L7 = 0
    L5 = L5(L6, L7)
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 13
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 1
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 9
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 2
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 14
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 3
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L4[L3] = L5
    L4 = _UPVALUE0_
    L4 = L4.tableInv1
    L5 = _UPVALUE1_
    L5 = L5.putByte
    L6 = _UPVALUE2_
    L6 = L6.mul
    L7 = 13
    L8 = byte
    L6 = L6(L7, L8)
    L7 = 0
    L5 = L5(L6, L7)
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 9
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 1
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 14
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 2
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 11
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 3
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L4[L3] = L5
    L4 = _UPVALUE0_
    L4 = L4.tableInv2
    L5 = _UPVALUE1_
    L5 = L5.putByte
    L6 = _UPVALUE2_
    L6 = L6.mul
    L7 = 9
    L8 = byte
    L6 = L6(L7, L8)
    L7 = 0
    L5 = L5(L6, L7)
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 14
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 1
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 11
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 2
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 13
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 3
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L4[L3] = L5
    L4 = _UPVALUE0_
    L4 = L4.tableInv3
    L5 = _UPVALUE1_
    L5 = L5.putByte
    L6 = _UPVALUE2_
    L6 = L6.mul
    L7 = 14
    L8 = byte
    L6 = L6(L7, L8)
    L7 = 0
    L5 = L5(L6, L7)
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 11
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 1
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 13
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 2
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L6 = _UPVALUE1_
    L6 = L6.putByte
    L7 = _UPVALUE2_
    L7 = L7.mul
    L8 = 9
    L9 = byte
    L7 = L7(L8, L9)
    L8 = 3
    L6 = L6(L7, L8)
    L5 = L5 + L6
    L4[L3] = L5
  end
end
L4.calcInvRoundTables = L5
function L5(A0)
  local L1, L2, L3, L4, L5
  L1 = _UPVALUE0_
  L1 = L1.band
  L2 = A0
  L3 = -16777216
  L1 = L1(L2, L3)
  L2 = _UPVALUE0_
  L2 = L2.lshift
  L3 = A0
  L4 = 8
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.rshift
  L4 = L1
  L5 = 24
  L3 = L3(L4, L5)
  L2 = L2 + L3
  return L2
end
L4.rotWord = L5
function L5(A0)
  local L1, L2, L3, L4, L5, L6
  L1 = _UPVALUE0_
  L1 = L1.putByte
  L2 = _UPVALUE1_
  L2 = L2.SBox
  L3 = _UPVALUE0_
  L3 = L3.getByte
  L4 = A0
  L5 = 0
  L3 = L3(L4, L5)
  L2 = L2[L3]
  L3 = 0
  L1 = L1(L2, L3)
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.SBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0
  L6 = 1
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 1
  L2 = L2(L3, L4)
  L1 = L1 + L2
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.SBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0
  L6 = 2
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 2
  L2 = L2(L3, L4)
  L1 = L1 + L2
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.SBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0
  L6 = 3
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 3
  L2 = L2(L3, L4)
  L1 = L1 + L2
  return L1
end
L4.subWord = L5
function L5(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L1 = {}
  L2 = math
  L2 = L2.floor
  L2 = L2(L3)
  if L2 == 4 or L2 == 6 or L2 == 8 then
    if L3 == L4 then
      goto lbl_23
    end
  end
  L3(L4, L5)
  do return L3 end
  ::lbl_23::
  L1[L3] = L4
  L1[L3] = L4
  for L6 = L3, L4, L5 do
    L7 = _UPVALUE1_
    L7 = L7.putByte
    L8 = L6 * 4
    L8 = L8 + 1
    L8 = A0[L8]
    L9 = 3
    L7 = L7(L8, L9)
    L8 = _UPVALUE1_
    L8 = L8.putByte
    L9 = L6 * 4
    L9 = L9 + 2
    L9 = A0[L9]
    L10 = 2
    L8 = L8(L9, L10)
    L7 = L7 + L8
    L8 = _UPVALUE1_
    L8 = L8.putByte
    L9 = L6 * 4
    L9 = L9 + 3
    L9 = A0[L9]
    L10 = 1
    L8 = L8(L9, L10)
    L7 = L7 + L8
    L8 = _UPVALUE1_
    L8 = L8.putByte
    L9 = L6 * 4
    L9 = L9 + 4
    L9 = A0[L9]
    L10 = 0
    L8 = L8(L9, L10)
    L7 = L7 + L8
    L1[L6] = L7
  end
  for L6 = L3, L4, L5 do
    L7 = L6 - 1
    L7 = L1[L7]
    L8 = L6 % L2
    if L8 == 0 then
      L8 = _UPVALUE2_
      L8 = L8.rotWord
      L9 = L7
      L8 = L8(L9)
      L7 = L8
      L8 = _UPVALUE2_
      L8 = L8.subWord
      L9 = L7
      L8 = L8(L9)
      L7 = L8
      L8 = math
      L8 = L8.floor
      L9 = L6 / L2
      L8 = L8(L9)
      L9 = _UPVALUE3_
      L9 = L9.bxor
      L10 = L7
      L11 = _UPVALUE2_
      L11 = L11.rCon
      L11 = L11[L8]
      L9 = L9(L10, L11)
      L7 = L9
    elseif 6 < L2 then
      L8 = L6 % L2
      if L8 == 4 then
        L8 = _UPVALUE2_
        L8 = L8.subWord
        L9 = L7
        L8 = L8(L9)
        L7 = L8
      end
    end
    L8 = _UPVALUE3_
    L8 = L8.bxor
    L9 = L6 - L2
    L9 = L1[L9]
    L10 = L7
    L8 = L8(L9, L10)
    L1[L6] = L8
  end
  return L1
end
L3.expandEncryptionKey = L5
function L5(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13
  L1 = _UPVALUE0_
  L1 = L1.getByte
  L2 = A0
  L3 = 3
  L1 = L1(L2, L3)
  L2 = _UPVALUE0_
  L2 = L2.getByte
  L3 = A0
  L4 = 2
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.getByte
  L4 = A0
  L5 = 1
  L3 = L3(L4, L5)
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0
  L6 = 0
  L4 = L4(L5, L6)
  L5 = _UPVALUE0_
  L5 = L5.putByte
  L6 = _UPVALUE1_
  L6 = L6.add
  L7 = _UPVALUE1_
  L7 = L7.add
  L8 = _UPVALUE1_
  L8 = L8.add
  L9 = _UPVALUE1_
  L9 = L9.mul
  L10 = 11
  L11 = L2
  L9 = L9(L10, L11)
  L10 = _UPVALUE1_
  L10 = L10.mul
  L11 = 13
  L12 = L3
  L10, L11, L12, L13 = L10(L11, L12)
  L8 = L8(L9, L10, L11, L12, L13)
  L9 = _UPVALUE1_
  L9 = L9.mul
  L10 = 9
  L11 = L4
  L9, L10, L11, L12, L13 = L9(L10, L11)
  L7 = L7(L8, L9, L10, L11, L12, L13)
  L8 = _UPVALUE1_
  L8 = L8.mul
  L9 = 14
  L10 = L1
  L8, L9, L10, L11, L12, L13 = L8(L9, L10)
  L6 = L6(L7, L8, L9, L10, L11, L12, L13)
  L7 = 3
  L5 = L5(L6, L7)
  L6 = _UPVALUE0_
  L6 = L6.putByte
  L7 = _UPVALUE1_
  L7 = L7.add
  L8 = _UPVALUE1_
  L8 = L8.add
  L9 = _UPVALUE1_
  L9 = L9.add
  L10 = _UPVALUE1_
  L10 = L10.mul
  L11 = 11
  L12 = L3
  L10 = L10(L11, L12)
  L11 = _UPVALUE1_
  L11 = L11.mul
  L12 = 13
  L13 = L4
  L11, L12, L13 = L11(L12, L13)
  L9 = L9(L10, L11, L12, L13)
  L10 = _UPVALUE1_
  L10 = L10.mul
  L11 = 9
  L12 = L1
  L10, L11, L12, L13 = L10(L11, L12)
  L8 = L8(L9, L10, L11, L12, L13)
  L9 = _UPVALUE1_
  L9 = L9.mul
  L10 = 14
  L11 = L2
  L9, L10, L11, L12, L13 = L9(L10, L11)
  L7 = L7(L8, L9, L10, L11, L12, L13)
  L8 = 2
  L6 = L6(L7, L8)
  L5 = L5 + L6
  L6 = _UPVALUE0_
  L6 = L6.putByte
  L7 = _UPVALUE1_
  L7 = L7.add
  L8 = _UPVALUE1_
  L8 = L8.add
  L9 = _UPVALUE1_
  L9 = L9.add
  L10 = _UPVALUE1_
  L10 = L10.mul
  L11 = 11
  L12 = L4
  L10 = L10(L11, L12)
  L11 = _UPVALUE1_
  L11 = L11.mul
  L12 = 13
  L13 = L1
  L11, L12, L13 = L11(L12, L13)
  L9 = L9(L10, L11, L12, L13)
  L10 = _UPVALUE1_
  L10 = L10.mul
  L11 = 9
  L12 = L2
  L10, L11, L12, L13 = L10(L11, L12)
  L8 = L8(L9, L10, L11, L12, L13)
  L9 = _UPVALUE1_
  L9 = L9.mul
  L10 = 14
  L11 = L3
  L9, L10, L11, L12, L13 = L9(L10, L11)
  L7 = L7(L8, L9, L10, L11, L12, L13)
  L8 = 1
  L6 = L6(L7, L8)
  L5 = L5 + L6
  L6 = _UPVALUE0_
  L6 = L6.putByte
  L7 = _UPVALUE1_
  L7 = L7.add
  L8 = _UPVALUE1_
  L8 = L8.add
  L9 = _UPVALUE1_
  L9 = L9.add
  L10 = _UPVALUE1_
  L10 = L10.mul
  L11 = 11
  L12 = L1
  L10 = L10(L11, L12)
  L11 = _UPVALUE1_
  L11 = L11.mul
  L12 = 13
  L13 = L2
  L11, L12, L13 = L11(L12, L13)
  L9 = L9(L10, L11, L12, L13)
  L10 = _UPVALUE1_
  L10 = L10.mul
  L11 = 9
  L12 = L3
  L10, L11, L12, L13 = L10(L11, L12)
  L8 = L8(L9, L10, L11, L12, L13)
  L9 = _UPVALUE1_
  L9 = L9.mul
  L10 = 14
  L11 = L4
  L9, L10, L11, L12, L13 = L9(L10, L11)
  L7 = L7(L8, L9, L10, L11, L12, L13)
  L8 = 0
  L6 = L6(L7, L8)
  L5 = L5 + L6
  return L5
end
L4.invMixColumnOld = L5
function L5(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16
  L1 = _UPVALUE0_
  L1 = L1.getByte
  L2 = A0
  L3 = 3
  L1 = L1(L2, L3)
  L2 = _UPVALUE0_
  L2 = L2.getByte
  L3 = A0
  L4 = 2
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.getByte
  L4 = A0
  L5 = 1
  L3 = L3(L4, L5)
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0
  L6 = 0
  L4 = L4(L5, L6)
  L5 = _UPVALUE1_
  L5 = L5.bxor
  L6 = L4
  L7 = L3
  L5 = L5(L6, L7)
  L6 = _UPVALUE1_
  L6 = L6.bxor
  L7 = L2
  L8 = L1
  L6 = L6(L7, L8)
  L7 = _UPVALUE1_
  L7 = L7.bxor
  L8 = L5
  L9 = L6
  L7 = L7(L8, L9)
  L8 = _UPVALUE1_
  L8 = L8.bxor
  L9 = L7
  L10 = _UPVALUE2_
  L10 = L10.mul
  L11 = 8
  L12 = L7
  L10, L11, L12, L13, L14, L15, L16 = L10(L11, L12)
  L8 = L8(L9, L10, L11, L12, L13, L14, L15, L16)
  L7 = L8
  L8 = _UPVALUE1_
  L8 = L8.bxor
  L9 = L7
  L10 = _UPVALUE2_
  L10 = L10.mul
  L11 = 4
  L12 = _UPVALUE1_
  L12 = L12.bxor
  L13 = L3
  L14 = L1
  L12, L13, L14, L15, L16 = L12(L13, L14)
  L10, L11, L12, L13, L14, L15, L16 = L10(L11, L12, L13, L14, L15, L16)
  L8 = L8(L9, L10, L11, L12, L13, L14, L15, L16)
  w = L8
  L8 = _UPVALUE1_
  L8 = L8.bxor
  L9 = L7
  L10 = _UPVALUE2_
  L10 = L10.mul
  L11 = 4
  L12 = _UPVALUE1_
  L12 = L12.bxor
  L13 = L4
  L14 = L2
  L12, L13, L14, L15, L16 = L12(L13, L14)
  L10, L11, L12, L13, L14, L15, L16 = L10(L11, L12, L13, L14, L15, L16)
  L8 = L8(L9, L10, L11, L12, L13, L14, L15, L16)
  L7 = L8
  L8 = _UPVALUE0_
  L8 = L8.putByte
  L9 = _UPVALUE1_
  L9 = L9.bxor
  L10 = _UPVALUE1_
  L10 = L10.bxor
  L11 = L4
  L12 = L7
  L10 = L10(L11, L12)
  L11 = _UPVALUE2_
  L11 = L11.mul
  L12 = 2
  L13 = _UPVALUE1_
  L13 = L13.bxor
  L14 = L1
  L15 = L4
  L13, L14, L15, L16 = L13(L14, L15)
  L11, L12, L13, L14, L15, L16 = L11(L12, L13, L14, L15, L16)
  L9 = L9(L10, L11, L12, L13, L14, L15, L16)
  L10 = 0
  L8 = L8(L9, L10)
  L9 = _UPVALUE0_
  L9 = L9.putByte
  L10 = _UPVALUE1_
  L10 = L10.bxor
  L11 = _UPVALUE1_
  L11 = L11.bxor
  L12 = L3
  L13 = w
  L11 = L11(L12, L13)
  L12 = _UPVALUE2_
  L12 = L12.mul
  L13 = 2
  L14 = L5
  L12, L13, L14, L15, L16 = L12(L13, L14)
  L10 = L10(L11, L12, L13, L14, L15, L16)
  L11 = 1
  L9 = L9(L10, L11)
  L8 = L8 + L9
  L9 = _UPVALUE0_
  L9 = L9.putByte
  L10 = _UPVALUE1_
  L10 = L10.bxor
  L11 = _UPVALUE1_
  L11 = L11.bxor
  L12 = L2
  L13 = L7
  L11 = L11(L12, L13)
  L12 = _UPVALUE2_
  L12 = L12.mul
  L13 = 2
  L14 = _UPVALUE1_
  L14 = L14.bxor
  L15 = L1
  L16 = L4
  L14, L15, L16 = L14(L15, L16)
  L12, L13, L14, L15, L16 = L12(L13, L14, L15, L16)
  L10 = L10(L11, L12, L13, L14, L15, L16)
  L11 = 2
  L9 = L9(L10, L11)
  L8 = L8 + L9
  L9 = _UPVALUE0_
  L9 = L9.putByte
  L10 = _UPVALUE1_
  L10 = L10.bxor
  L11 = _UPVALUE1_
  L11 = L11.bxor
  L12 = L1
  L13 = w
  L11 = L11(L12, L13)
  L12 = _UPVALUE2_
  L12 = L12.mul
  L13 = 2
  L14 = L6
  L12, L13, L14, L15, L16 = L12(L13, L14)
  L10 = L10(L11, L12, L13, L14, L15, L16)
  L11 = 3
  L9 = L9(L10, L11)
  L8 = L8 + L9
  return L8
end
L4.invMixColumn = L5
function L5(A0)
  local L1, L2, L3, L4, L5, L6, L7
  L1 = _UPVALUE0_
  L1 = L1.expandEncryptionKey
  L1 = L1(L2)
  if L1 == nil then
    return L2
  end
  L1[L2] = L3
  for L5 = L2, L3, L4 do
    L6 = _UPVALUE1_
    L6 = L6.invMixColumnOld
    L7 = L1[L5]
    L6 = L6(L7)
    L1[L5] = L6
  end
  return L1
end
L3.expandDecryptionKey = L5
function L5(A0, A1, A2)
  local L3, L4, L5, L6, L7, L8, L9
  for L6 = L3, L4, L5 do
    L7 = _UPVALUE0_
    L7 = L7.bxor
    L8 = A0[L6]
    L9 = A2 * 4
    L9 = L9 + L6
    L9 = A1[L9]
    L7 = L7(L8, L9)
    A0[L6] = L7
  end
end
L4.addRoundKey = L5
function L5(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9
  L2 = _UPVALUE0_
  L2 = L2.bxor
  L3 = _UPVALUE0_
  L3 = L3.bxor
  L4 = _UPVALUE0_
  L4 = L4.bxor
  L5 = _UPVALUE1_
  L5 = L5.table0
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[0]
  L8 = 3
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L6 = _UPVALUE1_
  L6 = L6.table1
  L7 = _UPVALUE2_
  L7 = L7.getByte
  L8 = A0[1]
  L9 = 2
  L7 = L7(L8, L9)
  L6 = L6[L7]
  L4 = L4(L5, L6)
  L5 = _UPVALUE1_
  L5 = L5.table2
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[2]
  L8 = 1
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L3 = L3(L4, L5)
  L4 = _UPVALUE1_
  L4 = L4.table3
  L5 = _UPVALUE2_
  L5 = L5.getByte
  L6 = A0[3]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L2 = L2(L3, L4)
  A1[0] = L2
  L2 = _UPVALUE0_
  L2 = L2.bxor
  L3 = _UPVALUE0_
  L3 = L3.bxor
  L4 = _UPVALUE0_
  L4 = L4.bxor
  L5 = _UPVALUE1_
  L5 = L5.table0
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[1]
  L8 = 3
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L6 = _UPVALUE1_
  L6 = L6.table1
  L7 = _UPVALUE2_
  L7 = L7.getByte
  L8 = A0[2]
  L9 = 2
  L7 = L7(L8, L9)
  L6 = L6[L7]
  L4 = L4(L5, L6)
  L5 = _UPVALUE1_
  L5 = L5.table2
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[3]
  L8 = 1
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L3 = L3(L4, L5)
  L4 = _UPVALUE1_
  L4 = L4.table3
  L5 = _UPVALUE2_
  L5 = L5.getByte
  L6 = A0[0]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L2 = L2(L3, L4)
  A1[1] = L2
  L2 = _UPVALUE0_
  L2 = L2.bxor
  L3 = _UPVALUE0_
  L3 = L3.bxor
  L4 = _UPVALUE0_
  L4 = L4.bxor
  L5 = _UPVALUE1_
  L5 = L5.table0
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[2]
  L8 = 3
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L6 = _UPVALUE1_
  L6 = L6.table1
  L7 = _UPVALUE2_
  L7 = L7.getByte
  L8 = A0[3]
  L9 = 2
  L7 = L7(L8, L9)
  L6 = L6[L7]
  L4 = L4(L5, L6)
  L5 = _UPVALUE1_
  L5 = L5.table2
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[0]
  L8 = 1
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L3 = L3(L4, L5)
  L4 = _UPVALUE1_
  L4 = L4.table3
  L5 = _UPVALUE2_
  L5 = L5.getByte
  L6 = A0[1]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L2 = L2(L3, L4)
  A1[2] = L2
  L2 = _UPVALUE0_
  L2 = L2.bxor
  L3 = _UPVALUE0_
  L3 = L3.bxor
  L4 = _UPVALUE0_
  L4 = L4.bxor
  L5 = _UPVALUE1_
  L5 = L5.table0
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[3]
  L8 = 3
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L6 = _UPVALUE1_
  L6 = L6.table1
  L7 = _UPVALUE2_
  L7 = L7.getByte
  L8 = A0[0]
  L9 = 2
  L7 = L7(L8, L9)
  L6 = L6[L7]
  L4 = L4(L5, L6)
  L5 = _UPVALUE1_
  L5 = L5.table2
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[1]
  L8 = 1
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L3 = L3(L4, L5)
  L4 = _UPVALUE1_
  L4 = L4.table3
  L5 = _UPVALUE2_
  L5 = L5.getByte
  L6 = A0[2]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L2 = L2(L3, L4)
  A1[3] = L2
end
L4.doRound = L5
function L5(A0, A1)
  local L2, L3, L4, L5, L6, L7
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.SBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0[0]
  L6 = 3
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 3
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[1]
  L7 = 2
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 2
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[2]
  L7 = 1
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 1
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[3]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 0
  L3 = L3(L4, L5)
  L2 = L2 + L3
  A1[0] = L2
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.SBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0[1]
  L6 = 3
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 3
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[2]
  L7 = 2
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 2
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[3]
  L7 = 1
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 1
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[0]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 0
  L3 = L3(L4, L5)
  L2 = L2 + L3
  A1[1] = L2
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.SBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0[2]
  L6 = 3
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 3
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[3]
  L7 = 2
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 2
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[0]
  L7 = 1
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 1
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[1]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 0
  L3 = L3(L4, L5)
  L2 = L2 + L3
  A1[2] = L2
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.SBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0[3]
  L6 = 3
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 3
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[0]
  L7 = 2
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 2
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[1]
  L7 = 1
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 1
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.SBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[2]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 0
  L3 = L3(L4, L5)
  L2 = L2 + L3
  A1[3] = L2
end
L4.doLastRound = L5
function L5(A0, A1)
  local L2, L3, L4, L5, L6, L7, L8, L9
  L2 = _UPVALUE0_
  L2 = L2.bxor
  L3 = _UPVALUE0_
  L3 = L3.bxor
  L4 = _UPVALUE0_
  L4 = L4.bxor
  L5 = _UPVALUE1_
  L5 = L5.tableInv0
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[0]
  L8 = 3
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L6 = _UPVALUE1_
  L6 = L6.tableInv1
  L7 = _UPVALUE2_
  L7 = L7.getByte
  L8 = A0[3]
  L9 = 2
  L7 = L7(L8, L9)
  L6 = L6[L7]
  L4 = L4(L5, L6)
  L5 = _UPVALUE1_
  L5 = L5.tableInv2
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[2]
  L8 = 1
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L3 = L3(L4, L5)
  L4 = _UPVALUE1_
  L4 = L4.tableInv3
  L5 = _UPVALUE2_
  L5 = L5.getByte
  L6 = A0[1]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L2 = L2(L3, L4)
  A1[0] = L2
  L2 = _UPVALUE0_
  L2 = L2.bxor
  L3 = _UPVALUE0_
  L3 = L3.bxor
  L4 = _UPVALUE0_
  L4 = L4.bxor
  L5 = _UPVALUE1_
  L5 = L5.tableInv0
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[1]
  L8 = 3
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L6 = _UPVALUE1_
  L6 = L6.tableInv1
  L7 = _UPVALUE2_
  L7 = L7.getByte
  L8 = A0[0]
  L9 = 2
  L7 = L7(L8, L9)
  L6 = L6[L7]
  L4 = L4(L5, L6)
  L5 = _UPVALUE1_
  L5 = L5.tableInv2
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[3]
  L8 = 1
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L3 = L3(L4, L5)
  L4 = _UPVALUE1_
  L4 = L4.tableInv3
  L5 = _UPVALUE2_
  L5 = L5.getByte
  L6 = A0[2]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L2 = L2(L3, L4)
  A1[1] = L2
  L2 = _UPVALUE0_
  L2 = L2.bxor
  L3 = _UPVALUE0_
  L3 = L3.bxor
  L4 = _UPVALUE0_
  L4 = L4.bxor
  L5 = _UPVALUE1_
  L5 = L5.tableInv0
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[2]
  L8 = 3
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L6 = _UPVALUE1_
  L6 = L6.tableInv1
  L7 = _UPVALUE2_
  L7 = L7.getByte
  L8 = A0[1]
  L9 = 2
  L7 = L7(L8, L9)
  L6 = L6[L7]
  L4 = L4(L5, L6)
  L5 = _UPVALUE1_
  L5 = L5.tableInv2
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[0]
  L8 = 1
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L3 = L3(L4, L5)
  L4 = _UPVALUE1_
  L4 = L4.tableInv3
  L5 = _UPVALUE2_
  L5 = L5.getByte
  L6 = A0[3]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L2 = L2(L3, L4)
  A1[2] = L2
  L2 = _UPVALUE0_
  L2 = L2.bxor
  L3 = _UPVALUE0_
  L3 = L3.bxor
  L4 = _UPVALUE0_
  L4 = L4.bxor
  L5 = _UPVALUE1_
  L5 = L5.tableInv0
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[3]
  L8 = 3
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L6 = _UPVALUE1_
  L6 = L6.tableInv1
  L7 = _UPVALUE2_
  L7 = L7.getByte
  L8 = A0[2]
  L9 = 2
  L7 = L7(L8, L9)
  L6 = L6[L7]
  L4 = L4(L5, L6)
  L5 = _UPVALUE1_
  L5 = L5.tableInv2
  L6 = _UPVALUE2_
  L6 = L6.getByte
  L7 = A0[1]
  L8 = 1
  L6 = L6(L7, L8)
  L5 = L5[L6]
  L3 = L3(L4, L5)
  L4 = _UPVALUE1_
  L4 = L4.tableInv3
  L5 = _UPVALUE2_
  L5 = L5.getByte
  L6 = A0[0]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L2 = L2(L3, L4)
  A1[3] = L2
end
L4.doInvRound = L5
function L5(A0, A1)
  local L2, L3, L4, L5, L6, L7
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.iSBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0[0]
  L6 = 3
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 3
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[3]
  L7 = 2
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 2
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[2]
  L7 = 1
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 1
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[1]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 0
  L3 = L3(L4, L5)
  L2 = L2 + L3
  A1[0] = L2
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.iSBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0[1]
  L6 = 3
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 3
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[0]
  L7 = 2
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 2
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[3]
  L7 = 1
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 1
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[2]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 0
  L3 = L3(L4, L5)
  L2 = L2 + L3
  A1[1] = L2
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.iSBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0[2]
  L6 = 3
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 3
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[1]
  L7 = 2
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 2
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[0]
  L7 = 1
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 1
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[3]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 0
  L3 = L3(L4, L5)
  L2 = L2 + L3
  A1[2] = L2
  L2 = _UPVALUE0_
  L2 = L2.putByte
  L3 = _UPVALUE1_
  L3 = L3.iSBox
  L4 = _UPVALUE0_
  L4 = L4.getByte
  L5 = A0[3]
  L6 = 3
  L4 = L4(L5, L6)
  L3 = L3[L4]
  L4 = 3
  L2 = L2(L3, L4)
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[2]
  L7 = 2
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 2
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[1]
  L7 = 1
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 1
  L3 = L3(L4, L5)
  L2 = L2 + L3
  L3 = _UPVALUE0_
  L3 = L3.putByte
  L4 = _UPVALUE1_
  L4 = L4.iSBox
  L5 = _UPVALUE0_
  L5 = L5.getByte
  L6 = A0[0]
  L7 = 0
  L5 = L5(L6, L7)
  L4 = L4[L5]
  L5 = 0
  L3 = L3(L4, L5)
  L2 = L2 + L3
  A1[3] = L2
end
L4.doInvLastRound = L5
function L5(A0, A1, A2, A3, A4)
  local L5, L6, L7, L8, L9, L10, L11
  A2 = A2 or A2
  if not A3 then
    L5 = {}
    A3 = L5
  end
  A4 = A4 or A4
  L5 = {}
  L6 = {}
  L7 = _UPVALUE0_
  L7 = L7.KEY_TYPE
  L7 = A0[L7]
  L8 = _UPVALUE0_
  L8 = L8.ENCRYPTION_KEY
  if L7 ~= L8 then
    L7 = print
    L8 = "No encryption key: "
    L9 = _UPVALUE0_
    L9 = L9.KEY_TYPE
    L9 = A0[L9]
    L7(L8, L9)
    return
  end
  L7 = _UPVALUE1_
  L7 = L7.bytesToInts
  L8 = A1
  L9 = A2
  L10 = 4
  L7 = L7(L8, L9, L10)
  L5 = L7
  L7 = _UPVALUE2_
  L7 = L7.addRoundKey
  L8 = L5
  L9 = A0
  L10 = 0
  L7(L8, L9, L10)
  L7 = 1
  while true do
    L8 = _UPVALUE0_
    L8 = L8.ROUNDS
    L8 = A0[L8]
    L8 = L8 - 1
    if not (L7 < L8) then
      break
    end
    L8 = _UPVALUE2_
    L8 = L8.doRound
    L9 = L5
    L10 = L6
    L8(L9, L10)
    L8 = _UPVALUE2_
    L8 = L8.addRoundKey
    L9 = L6
    L10 = A0
    L11 = L7
    L8(L9, L10, L11)
    L7 = L7 + 1
    L8 = _UPVALUE2_
    L8 = L8.doRound
    L9 = L6
    L10 = L5
    L8(L9, L10)
    L8 = _UPVALUE2_
    L8 = L8.addRoundKey
    L9 = L5
    L10 = A0
    L11 = L7
    L8(L9, L10, L11)
    L7 = L7 + 1
  end
  L8 = _UPVALUE2_
  L8 = L8.doRound
  L9 = L5
  L10 = L6
  L8(L9, L10)
  L8 = _UPVALUE2_
  L8 = L8.addRoundKey
  L9 = L6
  L10 = A0
  L11 = L7
  L8(L9, L10, L11)
  L7 = L7 + 1
  L8 = _UPVALUE2_
  L8 = L8.doLastRound
  L9 = L6
  L10 = L5
  L8(L9, L10)
  L8 = _UPVALUE2_
  L8 = L8.addRoundKey
  L9 = L5
  L10 = A0
  L11 = L7
  L8(L9, L10, L11)
  L8 = _UPVALUE1_
  L8 = L8.intsToBytes
  L9 = L5
  L10 = A3
  L11 = A4
  return L8(L9, L10, L11)
end
L3.encrypt = L5
function L5(A0, A1, A2, A3, A4)
  local L5, L6, L7, L8, L9, L10, L11
  A2 = A2 or A2
  if not A3 then
    L5 = {}
    A3 = L5
  end
  A4 = A4 or A4
  L5 = {}
  L6 = {}
  L7 = _UPVALUE0_
  L7 = L7.KEY_TYPE
  L7 = A0[L7]
  L8 = _UPVALUE0_
  L8 = L8.DECRYPTION_KEY
  if L7 ~= L8 then
    L7 = print
    L8 = "No decryption key: "
    L9 = _UPVALUE0_
    L9 = L9.KEY_TYPE
    L9 = A0[L9]
    L7(L8, L9)
    return
  end
  L7 = _UPVALUE1_
  L7 = L7.bytesToInts
  L8 = A1
  L9 = A2
  L10 = 4
  L7 = L7(L8, L9, L10)
  L5 = L7
  L7 = _UPVALUE2_
  L7 = L7.addRoundKey
  L8 = L5
  L9 = A0
  L10 = _UPVALUE0_
  L10 = L10.ROUNDS
  L10 = A0[L10]
  L7(L8, L9, L10)
  L7 = _UPVALUE0_
  L7 = L7.ROUNDS
  L7 = A0[L7]
  L7 = L7 - 1
  while 2 < L7 do
    L8 = _UPVALUE2_
    L8 = L8.doInvRound
    L9 = L5
    L10 = L6
    L8(L9, L10)
    L8 = _UPVALUE2_
    L8 = L8.addRoundKey
    L9 = L6
    L10 = A0
    L11 = L7
    L8(L9, L10, L11)
    L7 = L7 - 1
    L8 = _UPVALUE2_
    L8 = L8.doInvRound
    L9 = L6
    L10 = L5
    L8(L9, L10)
    L8 = _UPVALUE2_
    L8 = L8.addRoundKey
    L9 = L5
    L10 = A0
    L11 = L7
    L8(L9, L10, L11)
    L7 = L7 - 1
  end
  L8 = _UPVALUE2_
  L8 = L8.doInvRound
  L9 = L5
  L10 = L6
  L8(L9, L10)
  L8 = _UPVALUE2_
  L8 = L8.addRoundKey
  L9 = L6
  L10 = A0
  L11 = L7
  L8(L9, L10, L11)
  L7 = L7 - 1
  L8 = _UPVALUE2_
  L8 = L8.doInvLastRound
  L9 = L6
  L10 = L5
  L8(L9, L10)
  L8 = _UPVALUE2_
  L8 = L8.addRoundKey
  L9 = L5
  L10 = A0
  L11 = L7
  L8(L9, L10, L11)
  L8 = _UPVALUE1_
  L8 = L8.intsToBytes
  L9 = L5
  L10 = A3
  L11 = A4
  return L8(L9, L10, L11)
end
L3.decrypt = L5
L5 = L4.calcSBox
L5()
L5 = L4.calcRoundTables
L5()
L5 = L4.calcInvRoundTables
L5()
return L3
