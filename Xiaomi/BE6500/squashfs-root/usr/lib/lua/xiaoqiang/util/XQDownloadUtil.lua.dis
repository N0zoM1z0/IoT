local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35
L0 = module
L1 = "xiaoqiang.util.XQDownloadUtil"
L2 = package
L2 = L2.seeall
L0(L1, L2)
L0 = require
L1 = "xiaoqiang.common.XQFunction"
L0 = L0(L1)
L1 = require
L2 = "xiaoqiang.common.XQConfigs"
L1 = L1(L2)
L2 = require
L3 = "xiaoqiang.XQPreference"
L2 = L2(L3)
L3 = require
L4 = "nixio.fs"
L3 = L3(L4)
L4 = require
L5 = "luci.fs"
L4 = L4(L5)
L5 = require
L6 = "luci.util"
L5 = L5(L6)
L6 = require
L7 = "xiaoqiang.XQLog"
L6 = L6(L7)
L7 = require
L8 = "xiaoqiang.util.XQCryptoUtil"
L7 = L7(L8)
L8 = tostring
L9 = L5.trim
L10 = L5.exec
L11 = "uci -q get misc.ota_pred.download_time"
L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35 = L10(L11)
L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35 = L9(L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35)
L8 = L8(L9, L10, L11, L12, L13, L14, L15, L16, L17, L18, L19, L20, L21, L22, L23, L24, L25, L26, L27, L28, L29, L30, L31, L32, L33, L34, L35)
L9 = "/tmp/rom.bin"
L10 = "DOWNLOAD_FILE_PATH"
L11 = "curl"
L12 = require
L13 = "xiaoqiang.util.XQSysUtil"
L12 = L12(L13)
L13 = L12.getModemLengthPathForCPE
L13 = L13()
L14 = L12.getUploadRomCPEHeaderFilePath
L14 = L14()
L15 = L12.getUploadRomCPEModemFilePath
L15 = L15()
L16 = L12.getUploadRomCPESignFilePath
L16 = L16()
L17 = L12.getUploadRomCPEHeaderLength
L17 = L17()
L18 = L12.getUploadRomCPESignLength
L18 = L18()
L19 = "/tmp/modemSlice%d.bin"
L20 = {}
L21 = {}
L21.size = L17
L21.path = L14
L22 = {}
L22.size = 0
L22.path = L15
L23 = {}
L23.size = L18
L23.path = L16
L24 = {}
L24.size = 0
L24.path = L9
L20[1] = L21
L20[2] = L22
L20[3] = L23
L20[4] = L24
CPE_FIRMWARE_INFO = L20
L20 = L0.isStrNil
L21 = L8
L20 = L20(L21)
if L20 then
  L8 = "30"
end
L20 = L11
L21 = " --retry 3 -m "
L22 = L8
L23 = " -s -f -o %s %s"
L20 = L20 .. L21 .. L22 .. L23
L21 = L11
L22 = " --retry 3 -m 10 -s -f -I -o /dev/null %s"
L21 = L21 .. L22
L22 = L11
L23 = " --range %d-%d --retry 3 -m "
L24 = L8
L25 = " -s -f -o %s %s"
L22 = L22 .. L23 .. L24 .. L25
function L23(A0)
  local L1, L2, L3, L4
  L1 = _UPVALUE0_
  L1 = L1.isStrNil
  L2 = A0
  L1 = L1(L2)
  if L1 then
    L1 = false
    return L1
  end
  L1 = os
  L1 = L1.execute
  L2 = string
  L2 = L2.format
  L3 = _UPVALUE1_
  L4 = A0
  L2, L3, L4 = L2(L3, L4)
  L1 = L1(L2, L3, L4)
  L1 = 0 == L1
  return L1
end
function L24(A0)
  local L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11
  L1 = _UPVALUE0_
  L1 = L1.isStrNil
  L2 = A0
  L1 = L1(L2)
  if L1 then
    L1 = false
    return L1
  end
  L1 = _UPVALUE1_
  L2 = _UPVALUE2_
  L2 = L2.access
  L3 = L1
  L2 = L2(L3)
  if L2 then
    L2 = _UPVALUE2_
    L2 = L2.unlink
    L3 = L1
    L2(L3)
  end
  L2 = _UPVALUE3_
  L2 = L2.exec
  L3 = string
  L3 = L3.format
  L4 = _UPVALUE4_
  L5 = 4
  L6 = 7
  L7 = L1
  L8 = A0
  L3, L4, L5, L6, L7, L8, L9, L10, L11 = L3(L4, L5, L6, L7, L8)
  L2(L3, L4, L5, L6, L7, L8, L9, L10, L11)
  L2 = io
  L2 = L2.open
  L3 = L1
  L4 = "r"
  L2 = L2(L3, L4)
  if L2 then
    L4 = L2
    L3 = L2.read
    L5 = 4
    L3 = L3(L4, L5)
    L4 = string
    L4 = L4.format
    L5 = "%02x%02x%02x%02x"
    L7 = L3
    L6 = L3.byte
    L8 = 4
    L6 = L6(L7, L8)
    L8 = L3
    L7 = L3.byte
    L9 = 3
    L7 = L7(L8, L9)
    L9 = L3
    L8 = L3.byte
    L10 = 2
    L8 = L8(L9, L10)
    L10 = L3
    L9 = L3.byte
    L11 = 1
    L9, L10, L11 = L9(L10, L11)
    L4 = L4(L5, L6, L7, L8, L9, L10, L11)
    L5 = _UPVALUE5_
    L5 = L5.log
    L6 = 6
    L7 = "get cpe modem length success: "
    L8 = L4
    L7 = L7 .. L8
    L5(L6, L7)
    L5 = tonumber
    L6 = L4
    L7 = 16
    return L5(L6, L7)
  else
    L3 = _UPVALUE5_
    L3 = L3.log
    L4 = 6
    L5 = "get cpe modem length false"
    L3(L4, L5)
    L3 = false
    return L3
  end
end
function L25()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10
  L0 = _UPVALUE0_
  L1 = _UPVALUE1_
  L1 = L1.access
  L2 = L0
  L1 = L1(L2)
  if not L1 then
    L1 = false
    return L1
  end
  L1 = io
  L1 = L1.open
  L2 = L0
  L3 = "r"
  L1 = L1(L2, L3)
  if L1 then
    L3 = L1
    L2 = L1.read
    L4 = 4
    L2 = L2(L3, L4)
    L3 = string
    L3 = L3.format
    L4 = "%02x%02x%02x%02x"
    L6 = L2
    L5 = L2.byte
    L7 = 4
    L5 = L5(L6, L7)
    L7 = L2
    L6 = L2.byte
    L8 = 3
    L6 = L6(L7, L8)
    L8 = L2
    L7 = L2.byte
    L9 = 2
    L7 = L7(L8, L9)
    L9 = L2
    L8 = L2.byte
    L10 = 1
    L8, L9, L10 = L8(L9, L10)
    L3 = L3(L4, L5, L6, L7, L8, L9, L10)
    L4 = _UPVALUE2_
    L4 = L4.log
    L5 = 6
    L6 = "get cpe modem length success"
    L7 = L3
    L6 = L6 .. L7
    L4(L5, L6)
    L4 = tonumber
    L5 = L3
    L6 = 16
    return L4(L5, L6)
  else
    L2 = _UPVALUE2_
    L2 = L2.log
    L3 = 6
    L4 = "get cpe modem length false"
    L2(L3, L4)
    L2 = false
    return L2
  end
end
function L26(A0)
  local L1, L2, L3, L4, L5, L6
  L1 = require
  L2 = "nixio.fs"
  L1 = L1(L2)
  L2 = 0
  L3 = L1.access
  L4 = A0
  L3 = L3(L4)
  if L3 then
    L3 = io
    L3 = L3.open
    L4 = A0
    L5 = "rb"
    L3 = L3(L4, L5)
    L5 = L3
    L4 = L3.seek
    L6 = "end"
    L4 = L4(L5, L6)
    L2 = L4
    L5 = L3
    L4 = L3.close
    L4(L5)
  end
  return L2
end
function L27(A0, A1, A2, A3)
  local L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15
  L4 = _UPVALUE0_
  L4 = L4.getUploadRomCPESliceSize
  L4 = L4()
  L5 = 0
  L6 = _UPVALUE1_
  L6 = L6.isStrNil
  L7 = A0
  L6 = L6(L7)
  if L6 then
    L6 = false
    return L6
  end
  L6 = string
  L6 = L6.find
  L7 = A3
  L8 = "mtd"
  L6 = L6(L7, L8)
  if not L6 then
    L6 = _UPVALUE2_
    L6 = L6.access
    L7 = A3
    L6 = L6(L7)
    if L6 then
      L6 = _UPVALUE2_
      L6 = L6.unlink
      L7 = A3
      L6(L7)
    end
    L6 = _UPVALUE3_
    L6 = L6.exec
    L7 = string
    L7 = L7.format
    L8 = _UPVALUE4_
    L9 = A1
    L10 = A2
    L11 = A3
    L12 = A0
    L7, L8, L9, L10, L11, L12, L13, L14, L15 = L7(L8, L9, L10, L11, L12)
    L6(L7, L8, L9, L10, L11, L12, L13, L14, L15)
    L6 = true
    return L6
  else
    L6 = _UPVALUE3_
    L6 = L6.exec
    L7 = "mtd erase "
    L8 = _UPVALUE5_
    L9 = " > /dev/null"
    L7 = L7 .. L8 .. L9
    L6(L7)
    L6 = A2 - A1
    L6 = L6 + 1
    L7 = 0
    L8 = nil
    while 0 < L6 do
      L9 = string
      L9 = L9.format
      L10 = _UPVALUE6_
      L11 = L7
      L9 = L9(L10, L11)
      L8 = L9
      L9 = _UPVALUE2_
      L9 = L9.access
      L10 = L8
      L9 = L9(L10)
      if L9 then
        L9 = _UPVALUE2_
        L9 = L9.unlink
        L10 = L8
        L9(L10)
      end
      if L4 < L6 then
        downSize = L4
      else
        downSize = L6
      end
      L9 = _UPVALUE3_
      L9 = L9.exec
      L10 = string
      L10 = L10.format
      L11 = _UPVALUE4_
      L12 = A1
      L13 = downSize
      L13 = A1 + L13
      L13 = L13 - 1
      L14 = L8
      L15 = A0
      L10, L11, L12, L13, L14, L15 = L10(L11, L12, L13, L14, L15)
      L9(L10, L11, L12, L13, L14, L15)
      L9 = downSize
      A1 = A1 + L9
      L9 = downSize
      L6 = L6 - L9
      L9 = _UPVALUE7_
      L10 = L8
      L9 = L9(L10)
      L5 = L9
      L9 = downSize
      if L5 < L9 then
        L9 = _UPVALUE8_
        L9 = L9.log
        L10 = 6
        L11 = "download failed!!! download slice size is "
        L12 = L5
        L13 = " less than need to download slice size "
        L14 = downSize
        L11 = L11 .. L12 .. L13 .. L14
        L9(L10, L11)
        L9 = false
        return L9
      end
      L9 = _UPVALUE3_
      L9 = L9.exec
      L10 = string
      L10 = L10.format
      L11 = "nandwrite -p --skip-bad-blocks-to-start -s %d %s %s"
      L12 = L7
      L13 = A3
      L14 = L8
      L10, L11, L12, L13, L14, L15 = L10(L11, L12, L13, L14)
      L9(L10, L11, L12, L13, L14, L15)
      L9 = downSize
      L7 = L7 + L9
      L9 = _UPVALUE2_
      L9 = L9.unlink
      L10 = L8
      L9(L10)
    end
    L9 = true
    return L9
  end
end
function L28(A0)
  local L1, L2, L3
  L1 = _UPVALUE0_
  L1 = L1.isStrNil
  L2 = A0
  L1 = L1(L2)
  if L1 then
    L1 = false
    return L1
  end
  L1 = string
  L1 = L1.find
  L2 = A0
  L3 = "[^%w:/?&%%.=#_-]"
  L1 = L1(L2, L3)
  if L1 then
    L1 = false
    return L1
  end
  L1 = true
  return L1
end
function L29(A0)
  local L1, L2, L3, L4, L5, L6
  L1 = _UPVALUE0_
  L2 = A0
  L1 = L1(L2)
  if not L1 then
    L1 = _UPVALUE1_
    L1 = L1.log
    L2 = 6
    L3 = "resource not exist: "
    L4 = A0
    L3 = L3 .. L4
    L1(L2, L3)
    L1 = false
    return L1
  end
  L1 = _UPVALUE2_
  L2 = _UPVALUE3_
  L2 = L2.set
  L3 = _UPVALUE4_
  L4 = L1
  L2(L3, L4)
  L2 = _UPVALUE5_
  L2 = L2.access
  L3 = L1
  L2 = L2(L3)
  if L2 then
    L2 = _UPVALUE5_
    L2 = L2.unlink
    L3 = L1
    L2(L3)
  end
  L2 = _UPVALUE6_
  L2 = L2.exec
  L3 = string
  L3 = L3.format
  L4 = _UPVALUE7_
  L5 = L1
  L6 = A0
  L3, L4, L5, L6 = L3(L4, L5, L6)
  L2(L3, L4, L5, L6)
  L2 = _UPVALUE8_
  L2 = L2.md5File
  L3 = L1
  L2 = L2(L3)
  L3 = L1
  return L2, L3
end
function L30()
  local L0, L1, L2, L3
  L0 = require
  L1 = "xiaoqiang.util.XQSysUtil"
  L0 = L0(L1)
  L1 = _UPVALUE0_
  L1 = L1.get
  L2 = _UPVALUE1_
  L2 = L2.PREF_ROM_FULLSIZE
  L3 = nil
  L1 = L1(L2, L3)
  if L1 then
    L2 = tonumber
    L3 = L1
    L2 = L2(L3)
    L1 = L2
    L2 = L0.checkTmpSpace
    L3 = L1
    L2 = L2(L3)
    if L2 then
      L2 = true
      return L2
    end
  end
  L2 = false
  return L2
end
function L31(A0, A1, A2)
  local L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L16, L17, L18
  L3 = _UPVALUE0_
  L3 = L3.getCpeOtaCancelTmp
  L3 = L3()
  L4 = require
  L5 = "luci.util"
  L4 = L4(L5)
  L5 = _UPVALUE1_
  L6 = A0
  L5 = L5(L6)
  if not L5 then
    L5 = _UPVALUE2_
    L5 = L5.log
    L6 = 6
    L7 = "download url invalid"
    L5(L6, L7)
    L5 = false
    return L5
  end
  L5 = _UPVALUE3_
  L5 = L5.access
  L6 = L3
  L5 = L5(L6)
  if L5 then
    L5 = _UPVALUE3_
    L5 = L5.unlink
    L6 = L3
    L5(L6)
  end
  L5 = _UPVALUE3_
  L5 = L5.access
  L6 = _UPVALUE4_
  L5 = L5(L6)
  if L5 then
    L5 = _UPVALUE3_
    L5 = L5.unlink
    L6 = _UPVALUE4_
    L5(L6)
  end
  L5 = _UPVALUE3_
  L5 = L5.access
  L6 = _UPVALUE5_
  L5 = L5(L6)
  if L5 then
    L5 = _UPVALUE3_
    L5 = L5.unlink
    L6 = _UPVALUE5_
    L5(L6)
  end
  if A1 then
    L5 = "curl --user "
    L6 = "\""
    L7 = A1
    L8 = ":"
    L5 = L5 .. L6 .. L7 .. L8 .. L9 .. L10
    _UPVALUE6_ = L5
  end
  L5 = _UPVALUE7_
  L5 = L5.set
  L6 = _UPVALUE8_
  L7 = _UPVALUE9_
  L5(L6, L7)
  L5 = _UPVALUE7_
  L5 = L5.get
  L6 = _UPVALUE10_
  L6 = L6.PREF_ROM_FULLSIZE
  L7 = nil
  L5 = L5(L6, L7)
  L6 = nil
  L7 = _UPVALUE11_
  L8 = A0
  L7 = L7(L8)
  L8 = _UPVALUE12_
  L7 = L7 - L8
  if L7 < 0 then
    L8 = _UPVALUE2_
    L8 = L8.log
    L8(L9, L10)
    L8 = false
    return L8
  end
  L8 = 0
  L9.size = L7
  L9.size = L10
  if 0 < L9 then
    L9(L10, L11)
    for L12, L13 in L9, L10, L11 do
      if L13 then
        L14 = L13.size
        if L14 then
          L14 = L13.path
          if L14 then
            L14 = _UPVALUE3_
            L14 = L14.access
            L15 = L3
            L14 = L14(L15)
            if L14 then
              L14 = _UPVALUE2_
              L14 = L14.log
              L15 = 6
              L16 = "cpe download canceled "
              L14(L15, L16)
              L14 = false
              return L14
            end
            L14 = L4.exec
            L15 = "echo 3 > /proc/sys/vm/drop_caches"
            L14(L15)
            L14 = _UPVALUE14_
            L15 = A0
            L16 = L8
            L17 = L13.size
            L17 = L8 + L17
            L17 = L17 - 1
            L18 = L13.path
            L14 = L14(L15, L16, L17, L18)
            L6 = L14
            if not L6 then
              L14 = _UPVALUE2_
              L14 = L14.log
              L15 = 6
              L16 = "download full cpe firmware failed "
              L14(L15, L16)
              L14 = false
              return L14
            end
            L14 = L13.size
            L8 = L8 + L14
          end
        end
      end
    end
  else
    L9(L10, L11)
    return L9
  end
  L9(L10, L11)
  return L9, L10
end
syncDownloadForCpe = L31
function L31(A0)
  local L1, L2, L3, L4, L5
  L3 = _UPVALUE0_
  L4 = A0
  L3 = L3(L4)
  if not L3 then
    L3 = _UPVALUE1_
    L3 = L3.log
    L4 = 6
    L5 = "download url invalid"
    L3(L4, L5)
    L3 = false
    return L3
  end
  L3 = _UPVALUE2_
  L3 = L3()
  if not L3 then
    L3 = _UPVALUE1_
    L3 = L3.log
    L4 = 6
    L5 = "download space not enough"
    L3(L4, L5)
    L3 = false
    return L3
  end
  L3 = _UPVALUE3_
  L4 = A0
  L3, L4 = L3(L4)
  L2 = L4
  L1 = L3
  if L1 then
    L3 = _UPVALUE1_
    L3 = L3.log
    L4 = 6
    L5 = "download finished"
    L3(L4, L5)
    L3 = L1
    L4 = L2
    return L3, L4
  end
  L3 = _UPVALUE1_
  L3 = L3.log
  L4 = 6
  L5 = "download failed"
  L3(L4, L5)
  L3 = false
  return L3
end
syncDownload = L31
L31 = "set -o pipefail; "
L32 = L11
L33 = " --retry 3 -m 10 -s -f -I -X GET \"$url\" | awk 'BEGIN{IGNORECASE = 1}/^content-length:/{print $2}'"
L31 = L31 .. L32 .. L33
L32 = L11
L33 = " --retry 3 -m "
L34 = L8
L35 = " -s -f -o \"$dest\" \"$url\""
L32 = L32 .. L33 .. L34 .. L35
function L33()
  local L0, L1, L2, L3, L4, L5
  L0 = require
  L1 = "xiaoqiang.util.XQSysUtil"
  L0 = L0(L1)
  L1 = _UPVALUE0_
  L1 = L1.waitExec
  L2 = "/bin/sh"
  L3 = "-c"
  L4 = _UPVALUE1_
  L1, L2, L3 = L1(L2, L3, L4)
  L4 = tonumber
  L5 = L3
  L4 = L4(L5)
  L3 = L4
  L4 = L3 or L4
  if L3 then
    L4 = L0.checkTmpSpace
    L5 = L3
    L4 = L2 == 0 and L4
  end
  return L4
end
function L34(A0)
  local L1, L2, L3, L4
  L1 = _UPVALUE0_
  L2 = _UPVALUE1_
  L2 = L2.access
  L3 = L1
  L2 = L2(L3)
  if L2 then
    L2 = _UPVALUE1_
    L2 = L2.unlink
    L3 = L1
    L2(L3)
  end
  L2 = nixio
  L2 = L2.setenv
  L3 = "dest"
  L4 = L1
  L2(L3, L4)
  L2 = _UPVALUE2_
  L2 = L2.exec
  L3 = _UPVALUE3_
  L2(L3)
  L2 = _UPVALUE4_
  L2 = L2.md5File
  L3 = L1
  L2 = L2(L3)
  L3 = L1
  return L2, L3
end
function L35(A0)
  local L1, L2, L3, L4, L5, L6
  L1 = _UPVALUE0_
  L2 = A0
  L1 = L1(L2)
  if not L1 then
    L1 = _UPVALUE1_
    L1 = L1.log
    L2 = 6
    L3 = "download url invalid"
    L1(L2, L3)
    L1 = false
    return L1
  end
  L1 = require
  L2 = "nixio"
  L1 = L1(L2)
  L2 = L1.setenv
  L3 = "url"
  L4 = A0
  L2(L3, L4)
  L2 = _UPVALUE2_
  L2 = L2()
  if not L2 then
    L2 = _UPVALUE1_
    L2 = L2.log
    L3 = 6
    L4 = "download space not enough"
    L2(L3, L4)
    L2 = false
    return L2
  end
  L2, L3 = nil, nil
  L4 = _UPVALUE3_
  L5 = A0
  L4, L5 = L4(L5)
  L3 = L5
  L2 = L4
  if L2 then
    L4 = _UPVALUE1_
    L4 = L4.log
    L5 = 6
    L6 = "download finished"
    L4(L5, L6)
    L4 = L2
    L5 = L3
    return L4, L5
  end
  L4 = _UPVALUE1_
  L4 = L4.log
  L5 = 6
  L6 = "download failed"
  L4(L5, L6)
  L4 = false
  return L4
end
syncDownloadV2 = L35
function L35()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8
  L0 = _UPVALUE0_
  L0 = L0.get
  L1 = _UPVALUE1_
  L2 = nil
  L0 = L0(L1, L2)
  L1 = tonumber
  L2 = _UPVALUE0_
  L2 = L2.get
  L3 = _UPVALUE2_
  L3 = L3.PREF_ROM_FULLSIZE
  L4 = nil
  L2, L3, L4, L5, L6, L7, L8 = L2(L3, L4)
  L1 = L1(L2, L3, L4, L5, L6, L7, L8)
  L2 = 0
  L3 = 0
  L4 = 0
  if L0 and L1 and 0 < L1 then
    L5 = _UPVALUE3_
    L5 = L5.access
    L6 = L0
    L5 = L5(L6)
    if L5 then
      L5 = math
      L5 = L5.modf
      L6 = _UPVALUE4_
      L6 = L6.stat
      L7 = L0
      L6 = L6(L7)
      L6 = L6.size
      L5 = L5(L6)
      L6 = _UPVALUE5_
      L6 = L6()
      L5 = L5 + L6
      L6 = _UPVALUE6_
      L5 = L5 + L6
      L6 = _UPVALUE7_
      L3 = L5 + L6
      L5 = math
      L5 = L5.modf
      L6 = L3 / L1
      L6 = L6 * 100
      L5 = L5(L6)
      L2 = L5
    else
      L5 = _UPVALUE3_
      L5 = L5.access
      L6 = _UPVALUE8_
      L5 = L5(L6)
      if L5 then
        L5 = _UPVALUE5_
        L5 = L5()
        L6 = _UPVALUE6_
        L5 = L5 + L6
        L6 = _UPVALUE7_
        L3 = L5 + L6
        L5 = math
        L5 = L5.modf
        L6 = L3 / L1
        L6 = L6 * 100
        L5 = L5(L6)
        L2 = L5
      else
        L5 = _UPVALUE3_
        L5 = L5.access
        L6 = _UPVALUE9_
        L5 = L5(L6)
        if L5 then
          L5 = tonumber
          L6 = _UPVALUE10_
          L6 = L6.trim
          L7 = _UPVALUE10_
          L7 = L7.exec
          L8 = "find /tmp -name modemSlice*|sed 's/[^0-9]//g'"
          L7, L8 = L7(L8)
          L6, L7, L8 = L6(L7, L8)
          L5 = L5(L6, L7, L8)
          L4 = L5
          if L4 and 0 < L4 then
            L5 = _UPVALUE6_
            L3 = L4 + L5
            L5 = math
            L5 = L5.modf
            L6 = L3 / L1
            L6 = L6 * 100
            L5 = L5(L6)
            L2 = L5
          end
        end
      end
    end
  end
  if L2 < 1 then
    L2 = 1
  elseif 100 < L2 then
    L2 = 100
  end
  return L2
end
downloadPercentForCpe = L35
function L35()
  local L0, L1, L2, L3, L4, L5, L6, L7
  L0 = _UPVALUE0_
  L0 = L0.get
  L1 = _UPVALUE1_
  L2 = nil
  L0 = L0(L1, L2)
  L1 = tonumber
  L2 = _UPVALUE0_
  L2 = L2.get
  L3 = _UPVALUE2_
  L3 = L3.PREF_ROM_FULLSIZE
  L4 = nil
  L2, L3, L4, L5, L6, L7 = L2(L3, L4)
  L1 = L1(L2, L3, L4, L5, L6, L7)
  L2 = 0
  L3 = 0
  L4 = _UPVALUE3_
  L4 = L4.getFeature
  L5 = "0"
  L6 = "system"
  L7 = "cpe"
  L4 = L4(L5, L6, L7)
  if L4 == "1" then
    L4 = _UPVALUE4_
    L4 = L4.checkSliceDownload
    L4 = L4()
    if L4 == 1 then
      L4 = downloadPercentForCpe
      return L4()
    end
  end
  if L0 and L1 and 0 < L1 then
    L4 = _UPVALUE5_
    L4 = L4.access
    L5 = L0
    L4 = L4(L5)
    if L4 then
      L4 = math
      L4 = L4.modf
      L5 = _UPVALUE6_
      L5 = L5.stat
      L6 = L0
      L5 = L5(L6)
      L5 = L5.size
      L4 = L4(L5)
      L3 = L4
      L4 = math
      L4 = L4.modf
      L5 = L3 / L1
      L5 = L5 * 100
      L4 = L4(L5)
      L2 = L4
      if L2 < 1 then
        L2 = 1
      elseif 100 < L2 then
        L2 = 100
      end
    end
  end
  return L2
end
downloadPercent = L35
function L35()
  local L0, L1, L2, L3, L4, L5, L6, L7, L8, L9, L10
  L0 = _UPVALUE0_
  L0 = L0.get
  L1 = _UPVALUE1_
  L2 = nil
  L0 = L0(L1, L2)
  L1 = tonumber
  L2 = _UPVALUE0_
  L2 = L2.get
  L3 = _UPVALUE2_
  L3 = L3.PREF_ROM_FULLSIZE
  L4 = nil
  L2, L3, L4, L5, L6, L7, L8, L9, L10 = L2(L3, L4)
  L1 = L1(L2, L3, L4, L5, L6, L7, L8, L9, L10)
  L2 = nil
  L3 = _UPVALUE3_
  L3 = L3.getFeature
  L4 = "0"
  L5 = "system"
  L6 = "cpe"
  L3 = L3(L4, L5, L6)
  if L3 == "1" then
    L3 = _UPVALUE4_
    L3 = L3.checkSliceDownload
    L3 = L3()
    if L3 == 1 then
      L3 = nil
      L4 = _UPVALUE4_
      L4 = L4.getCpeOtaCancelTmp
      L4 = L4()
      L5 = _UPVALUE5_
      L5 = L5.access
      L6 = L4
      L5 = L5(L6)
      if not L5 then
        L5 = _UPVALUE6_
        L5 = L5.exec
        L6 = string
        L6 = L6.format
        L7 = "touch "
        L8 = L4
        L7 = L7 .. L8
        L6, L7, L8, L9, L10 = L6(L7)
        L5(L6, L7, L8, L9, L10)
      end
      L5 = _UPVALUE6_
      L5 = L5.exec
      L6 = "pgrep -l -f nandwrite|awk '{print $1}'"
      L5 = L5(L6)
      L3 = L5
      if L3 then
        L5 = _UPVALUE7_
        L5 = L5.log
        L6 = 6
        L7 = "kill process "
        L8 = _UPVALUE6_
        L8 = L8.trim
        L9 = L3
        L8 = L8(L9)
        L9 = " to cancel download"
        L7 = L7 .. L8 .. L9
        L5(L6, L7)
        L5 = os
        L5 = L5.execute
        L6 = "kill "
        L7 = _UPVALUE6_
        L7 = L7.trim
        L8 = L3
        L7 = L7(L8)
        L6 = L6 .. L7
        L5(L6)
      end
      L5 = _UPVALUE6_
      L5 = L5.exec
      L6 = "pgrep -l -f "
      L7 = _UPVALUE8_
      L8 = "|grep -E '^[0-9]+ "
      L9 = _UPVALUE8_
      L10 = " --range'|awk '{print $1}'"
      L6 = L6 .. L7 .. L8 .. L9 .. L10
      L5 = L5(L6)
      L2 = L5
  end
  else
    L3 = _UPVALUE6_
    L3 = L3.exec
    L4 = "pgrep -l -f "
    L5 = _UPVALUE8_
    L6 = "|grep -E '^[0-9]+ "
    L7 = string
    L7 = L7.format
    L8 = _UPVALUE9_
    L9 = L0
    L10 = ""
    L7 = L7(L8, L9, L10)
    L8 = "'|awk '{print $1}'"
    L4 = L4 .. L5 .. L6 .. L7 .. L8
    L3 = L3(L4)
    L2 = L3
  end
  if L2 then
    L3 = _UPVALUE7_
    L3 = L3.log
    L4 = 6
    L5 = "kill process "
    L6 = _UPVALUE6_
    L6 = L6.trim
    L7 = L2
    L6 = L6(L7)
    L7 = " to cancel download"
    L5 = L5 .. L6 .. L7
    L3(L4, L5)
    L3 = os
    L3 = L3.execute
    L4 = "kill "
    L5 = _UPVALUE6_
    L5 = L5.trim
    L6 = L2
    L5 = L5(L6)
    L4 = L4 .. L5
    L3(L4)
  end
  if L0 then
    L3 = _UPVALUE5_
    L3 = L3.access
    L4 = L0
    L3 = L3(L4)
    if L3 then
      L3 = _UPVALUE5_
      L3 = L3.unlink
      L4 = L0
      L3(L4)
    end
  end
  L3 = true
  return L3
end
cancelDownload = L35
