<script type="text/javascript">
	var wanPortWidth = 40;
	var lanPortWidth = 40;
	var lanWanMargin = 8;
	var autoLanWanLabelWidth = 60;
	var autoLanWanLabelMargin = 2;
	var WAN_NUM = 2;
	var DUAL_WAN_OPEN = false; // 双WAN功能是否开启
	var WAN_INDEX = 1; // WAN1 or WAN2
	var wanPortSelCfg;
	var currentSelectPos = [];
	var wanOptions = [
		{str:label.pppoe, value:LINK_TYPE_PPPOE},
		{str:label.staticIp, value:LINK_TYPE_STATIC_IP},
		{str:label.dhcp,value:LINK_TYPE_DHCP}
	];
	var rateOptions = (function(){
		var autoStr = "";
		var bandWidth = slp.moduleSpec["eth_bandwidth"];

		if (bandWidth && 1000 == bandWidth)
		{
			autoStr = label.dupAuto1000;
		}
		else
		{
			autoStr = label.dupAuto100;
		}

		return [
			{str:autoStr, value:"auto"},
			{str:label.dup10MF, value:"10F"},
			{str:label.dup10MH, value:"10H"}
		];
	})();

	var highSetWanType, highSetLanConf;
	var curSysMode = uciSystem.optValue.sysMode.routerMode;

	function wzdWanDetect()
	{
		var wzdClosed = false;
		var wanDetectHd = null;
		var wanDetectWaitHd = null;

		function wzdWanCloseLoadingHd()
		{
			wzdClosed = true;
			clearTimeout(wanDetectHd);
		}

		loadingDialog.show({
			title: label.confirmTitle,
			content: {primary: label.checkingWait}
		}, undefined, undefined, true, wzdWanCloseLoadingHd);

		function doDetect(){
			$.action({network:{detect_wan_proto:null}}, function(resp){
				var alarmCentent = "";

				if (true == wzdClosed)
				{
					return;
				}

				if (slp.moduleSpec["wifison_mesh"] && slp.moduleSpec["wifison_mesh"] == 1)
				{
					alarmCentent = label.wanWzdCheckMesh;
				}
				else
				{
					alarmCentent = label.wanWzdCheckNoteH + label.wanWzdCheckNoteT;
				}

				var wanType = parseInt(resp[uciNetwork.optName.proto]);
				//根据WAN口协议类型显示对应的页面
				switch(wanType)
				{
				case ERROR_INTERNEL_ERROR:
				case ERROR_INPUT_PARA_ERROR:
				case WAN_IFACE_NOT_LINK:
					if (loadingDialog.status == "showed")
					{
						loadingDialog.hide(function(){
							alarmDialog.show({
								content:alarmCentent,
								callback:wzdWanCloseLoadingHd
							});
						});
					}
					wanDetectHd = $.setTimeout(doDetect, 1000);
					return;
				case WAN_TYPE_DETECTING:
					if (alarmDialog.status == "showed")
					{
						alarmDialog.hide(function(){
							loadingDialog.show({
								title: label.confirmTitle,
								content: {primary: label.checkingWait}
							}, undefined, undefined, true, wzdWanCloseLoadingHd);
						});
					}
					wanDetectHd = $.setTimeout(doDetect, 1000);
					return;
				case WAN_TYPE_STATIC:
					loadingDialog.hide(function(){
						id("wanSel").changeSel(LINK_TYPE_STATIC_IP);
					});
					break;
				case WAN_TYPE_DHCP:
					loadingDialog.hide(function(){
						id("wanSel").changeSel(LINK_TYPE_DHCP);
					});
					break;
				case WAN_TYPE_PPPOE:
					loadingDialog.hide(function(){
						id("wanSel").changeSel(LINK_TYPE_PPPOE);
					});
					break;
				default:
					return;
				}
			});
		}

		doDetect();
	}

	function setLinkState(linked, message)
	{
		var $linkState = $("#linkState");

		$linkState[0].className = linked ? "normalState": "abnormalState";
		$linkState.find("span.state").html(message);
	}

	function loadPageByIndex(index)
	{
		var subpages = ["DynamicIp.htm", "StaticIp.htm", "PPPoE.htm"];
		subpages[LINK_TYPE_WIRED_REPEATER] = "WiredRepeater.htm";
		subpages[LINK_TYPE_WIRELESS_REPEATER] = "WirelessRepeater.htm";
		if ("" == index.toString())
		{
			index = LINK_TYPE_PPPOE;
		}

		loadPage(subpages[index], "subContent");
	}

	/* 切换端口示意图 */
	function switchPortImage(isAutoWan)
	{
		if (isAutoWan)
		{
			$("#portImageAuto").show();
			$("#portImageFixed").hide();
		}
		else
		{
			$("#portImageAuto").hide();
			$("#portImageFixed").show();
		}
	}

	/* 初始化端口示意图 */
	function initPortImage()
	{
		/* 初始化自动WAN口端口拓扑图 */
		for (var i = 0; i < PORT_ORDER.length; i++)
		{
			switch (PORT_ORDER[i])
			{
				case "POWER":
					$("#portImageAuto").append("<span class='port powerPort'><i></i><label>{%label.power%}</label></span>");
					break;
				case "RESET":
					$("#portImageAuto").append("<span class='port resetPort'><i></i><label>{%label.reset%}</label></span>");
					break;
				case "MESH":
					$("#portImageAuto").append("<span class='port meshPort'><i></i><label>{%label.mesh%}</label></span>");
					break;
				case "TURBO":
					$("#portImageAuto").append("<span class='port meshPort'><i></i><label>{%label.turbo%}</label></span>");
					break;
				case "RESET&MESH":
					$("#portImageAuto").append("<span class='port resetMeshPort'><i></i><label>{%label.resetMesh%}</label></span>");
					break;
				case "WAN":
					$("#portImageAuto").append("<span class='port wanPort selectedPort'><i></i></span>");
					break;
				case "LAN":
					for (var j = 1; j <= LAN_PORT_NUM; j++)
					{
						$("#portImageAuto").append("<span class='port lanPort selectedPort'><i></i></span>");
					}
					break;
				default:
					break;
			}
		}

		var lanWanWidth = lanPortWidth * LAN_PORT_NUM + wanPortWidth + LAN_PORT_NUM * lanWanMargin;
		var borderWidh = (lanWanWidth - autoLanWanLabelWidth - autoLanWanLabelMargin * 2) / 2;
		var lanWanCombo = '<span class="lanWanCombo">'+
							'<span class="border leftBorder"></span>' +
							'<label>WAN/LAN</label>' +
							'<span class="border rightBorder"></span>' +
						'</span>';
		$("#portImageAuto .selectedPort i").css("margin-bottom", "18px");
		$("#portImageAuto .selectedPort i").eq(0).css("margin-bottom", "5px");
		$("#portImageAuto .selectedPort").eq(0).append(lanWanCombo);
		$("#portImageAuto .selectedPort .lanWanCombo").eq(0).css("width", lanWanWidth);
		$("#portImageAuto .selectedPort .border").css("width", borderWidh);

		/* 初始化固定WAN口端口拓扑图 */
		for (var i = 0; i < PORT_ORDER.length; i++)
		{
			switch (PORT_ORDER[i])
			{
				case "POWER":
					$("#portImageFixed").append("<span class='port powerPort'><i></i><label>{%label.power%}</label></span>");
					break;
				case "RESET":
					$("#portImageFixed").append("<span class='port resetPort'><i></i><label>{%label.reset%}</label></span>");
					break;
				case "MESH":
					$("#portImageFixed").append("<span class='port meshPort'><i></i><label>{%label.mesh%}</label></span>");
					break;
				case "TURBO":
					$("#portImageFixed").append("<span class='port meshPort'><i></i><label>{%label.turbo%}</label></span>");
					break;
				case "RESET&MESH":
					$("#portImageFixed").append("<span class='port resetMeshPort'><i></i><label>{%label.resetMesh%}</label></span>");
					break;
				case "WAN":
					$("#portImageFixed").append("<span class='port wanPort'><i></i><label>{%label.wan%}</label></span>");
					break;
				case "LAN":
					if (LAN_PORT_NUM == 1)
					{
						$("#portImageFixed").append("<span class='port lanPort'><i></i><label>{%label.lan%}</label></span>");
					}
					else
					{
						for (var j = 1; j <= LAN_PORT_NUM; j++)
						{
							$("#portImageFixed").append("<span class='port lanPort'><i></i><label>" + label["lanPort" + j] + "</label></span>");
						}
					}
					break;
				default:
					break;
			}

			$("#portImageFixed .wanPort").addClass("selectedPort");
		}
	}

	function getPhySpeedByIndex(phyInfoList,index,sfpCapabilityList){
		function changeSpeedType(speed){
			switch (speed){
				case '1000M':
					return 'GE';
				case '2.5G':
					return '2.5GE';
				case '10G':
					return '10GE';
				default:
					return speed;
			}
		}
		if(phyInfoList[index].type.toUpperCase() == "SFP"){
			return changeSpeedType(sfpCapabilityList[sfpCapabilityList.length-1]);
		}else{
			return changeSpeedType(phyInfoList[index]["speed"]);
		}
	}
	// 根据固定WAN的设置显示WAN口状态(处理与端口自定义的冲突)
	function setCurrentFixPort(displayData,wanPortCfg){
		for(var i=0;i<displayData.length;i++){
			if(displayData[i].name.slice(0,3).toUpperCase() == "WAN"){
				displayData[i].name = "LAN";
				displayData[i].state = "normal";
			}
		}
		if(displayData[wanPortCfg].state == "disable"){
			// 之前设置的固定WAN与当前端口自定义冲突
			var currentPortIdx = calNextUnusedPort(displayData);
			if(currentPortIdx == -1){
				alarmDialog("固定WAN口设置失效且当前无可定义端口，请在端口自定义中关闭相关端口定义");
			}else{
				displayData[currentPortIdx].name = "WAN";
				displayData[currentPortIdx].state = "active";
			}
		}else{
			displayData[wanPortCfg].name = "WAN";
			displayData[wanPortCfg].state = "active";
		}
		function calNextUnusedPort(displayData){
			var index = -1;
			for(var i =0;i<displayData.length;i++){
				if(displayData[i].state == "normal"){
					index = i;
					break;
				}
			}
			return index;
		}
	}
	function wanClickHandler(portInfo){
		switch (portInfo.state) {
			case 'disable':
				return;
			case 'normal':
				wanDisplayData[portInfo.index].name = "LAN";
				wanDisplayPort.refresh();
				break;
			case 'active':
				for(var i=0;i<wanDisplayData.length;i++){
					if(wanDisplayData[i].state == "active" && i != portInfo.index){
						wanDisplayData[i].state = "normal";
						wanDisplayData[i].name  = "LAN";
					}
				}
				wanDisplayData[portInfo.index].name = "WAN";
				wanPortSelCfg = portInfo.index;
				wanDisplayPort.refresh();
				break;
		}
	}
	function initPortCustomImage(auto,wanPortSelCfg){
		$.query({"port_manage":{"table":"dev_info"}},function(resCap){
			var deviceList = resCap.port_manage.dev_info;
			var currentWanDetected = false;
			for(var i=0;i<deviceList.length;i++){
				if(deviceList[i]["cap"] == 1){
					powerPosition = deviceList[i]["power_pos"];
					powerIndex = deviceList[i][uciPortConfig.dynOptName.powerIdx];
					wanPortNum = deviceList[i]["phy_num"];
					wanDisplayData = new Array(wanPortNum);
					var sfpCapabilityList = deviceList[i]["sfp_capability"];
					for(var t=0;t<wanPortNum;t++){
						wanDisplayData[t] = {};
					}
					for(var j=0;j<deviceList[i]["phy_info"].length;j++){
						var currentPortIdx = j;
						var currentPortRateIndex = powerPosition == "left"? currentPortIdx : wanPortNum-currentPortIdx-1;
						switch(deviceList[i]["phy_info"][j]["role"].slice(0,3).toUpperCase()) {
							case "LAN":
								wanDisplayData[currentPortIdx].name = "LAN";
								wanDisplayData[currentPortIdx].state = "normal";
								wanDisplayData[currentPortIdx].rate = getPhySpeedByIndex(deviceList[i]["phy_info"],j,sfpCapabilityList);
								break;
							case "WAN":
								currentWanDetected = true;
								wanDisplayData[currentPortIdx].name = "WAN";
								wanDisplayData[currentPortIdx].state = "active";
								wanDisplayData[currentPortIdx].rate = getPhySpeedByIndex(deviceList[i]["phy_info"],j,sfpCapabilityList);
								break;
							case "GAM":
								wanDisplayData[currentPortIdx].name = label.gamePort;
								wanDisplayData[currentPortIdx].state = "disable";
								wanDisplayData[currentPortIdx].rate = getPhySpeedByIndex(deviceList[i]["phy_info"],j,sfpCapabilityList);
								break;
							case "UPL":
								wanDisplayData[currentPortIdx].name = label.iptvUplinkPort;
								wanDisplayData[currentPortIdx].state = "disable";
								wanDisplayData[currentPortIdx].rate = getPhySpeedByIndex(deviceList[i]["phy_info"],j,sfpCapabilityList);
								break;
							case "DOW":
								wanDisplayData[currentPortIdx].name = label.iptvPort;
								wanDisplayData[currentPortIdx].state = "disable";
								wanDisplayData[currentPortIdx].rate = getPhySpeedByIndex(deviceList[i]["phy_info"],j,sfpCapabilityList);
								break;
							case "LAG":
								wanDisplayData[currentPortIdx].name = label.lagPort;
								wanDisplayData[currentPortIdx].state = "disable";
								wanDisplayData[currentPortIdx].rate = getPhySpeedByIndex(deviceList[i]["phy_info"],j,sfpCapabilityList);
								break;
						}
					}
				}
			}
			if(wanPortSelCfg != -1 && !auto){
				setCurrentFixPort(wanDisplayData,parseInt(wanPortSelCfg));
			}
			if(auto){
				for(var i=0;i<wanDisplayData.length;i++){
					if(wanDisplayData[i].name == "WAN" || wanDisplayData[i].name == "LAN"){
						wanDisplayData[i].name = "WAN/LAN";
						wanDisplayData[i].state = "active";
					}
				}
			}
			wanDisplayPort = new PortConfig();
			var wanDisplayInitData = {
				element: auto ? $('#portImageAuto')[0] : $('#portImageFixed')[0],
				type: 'display',
				port: wanDisplayData,
				powerPos: powerPosition,
				powerIdx: powerIndex,
				displayClickable: auto == false,
				callback:wanClickHandler
			};
			wanDisplayPort.init(wanDisplayInitData);
		})
	}
	function speedConversion(speed)
	{
		var kSpeed = 1;
		var mSpeed = kSpeed * 1024;
		var gSpeed = mSpeed * 1024;
		var unit;

		if (null == speed)
		{
			return null;
		}

		speed = parseInt(speed);

		if (speed >= gSpeed)
		{
			speed = (speed/gSpeed).toFixed(2);
			unit = "GB/s";
		}
		else if (speed >= mSpeed)
		{
			speed = (speed/mSpeed).toFixed(1);
			unit = "MB/s";
		}
		else
		{
			speed = (speed/kSpeed).toFixed(0);
			unit = "KB/s";
		}

		return {
			speed: speed,
			unit: unit
		};
	}

	function wanCheckWDS(callBack, alertCallback){
		slp.wds.getData({
			success: function(res){
				var item,
					wdsOn = false;

				for (var name in res[uciWireless.fileName])
				{
					if (!res[uciWireless.fileName].hasOwnProperty(name)){
						continue;
					}
					item = res[uciWireless.fileName][name];
					if (item[uciWireless.dynOptName.enable] == 1)
					{
						wdsOn = true;
						break;
					}
				}

				if (wdsOn)
				{
					if (slp.gSysModeSupport) {
						alarmDialog.show({content: "当前上网方式为桥接（无线中继）。如要更改WAN口设置，请先切换上网方式。"});
					} else {
						alarmDialog.show({content:label.wanWDSTip});
					}
					typeof alertCallback == "function" && alertCallback();
				}
				else
				{
					typeof callBack == "function" && callBack();
				}
			},
			fail: function(){
				typeof callBack == "function" && callBack();
			}
		});
	}

	function initDynamicPortRate(port,powerPos){
		var portNum  = Object.keys(slp.wanPortRateList).length;
		var portIndex;
		if(powerPos == "left"){
			portIndex = port;
		}else{
			portIndex = portNum - port - 1;
		}
		var rateList = slp.wanPortRateList[portIndex];
		var rateDescList = slp.wanPortRateDescList[portIndex];

		var rateOptions = [];
		for (var i = 0;  i < rateList.length; i++)
		{
			rateOptions.push({str: rateDescList[i], value:rateList[i]});
		}

		return rateOptions;
	}

	function checkIfWanRateShouldChange(port, curWanRate){
		var rateList = slp.wanPortRateList[port];
		for (var i = 0; i < rateList.length; i++)
		{
			if (rateList[i] == curWanRate)
			{
				return false;
			}
		}
		return true;
	}

	function dualWanOpenCheck(openCallBack,closeCallBack){
		if(!slp.gMulWanSupport){
			DUAL_WAN_OPEN = false;
			closeCallBack();
		} else {
			$.query({"port_manage":{"table":"mwan"}},function(res){
				if(res[ERR_CODE] == ENONE){
					DUAL_WAN_OPEN = true;
					for(var i=0; i<WAN_NUM; i++){
						if(res.port_manage.mwan[i]["mwan_"+(i+1)].enable == 0){
							DUAL_WAN_OPEN = false;
						}
					}
					if(DUAL_WAN_OPEN){
						$.query({"port_manage":{"table":"dev_info"}},function(resCap){
							var deviceList = resCap.port_manage.dev_info;
							var power_position,port_num,capIndex;
							for(var i=0;i<deviceList.length;i++){
								if(deviceList[i].cap == 1){
									capIndex = i;
									power_position = deviceList[i]["power_pos"];
									port_num = deviceList[i]["phy_num"];
								}
							}
							for(var i=0;i<port_num;i++){
								if(deviceList[capIndex]["phy_info"][i]["role"].slice(0,3).toUpperCase() == "WAN"){
									if(deviceList[capIndex]["phy_info"][i]["role"].toUpperCase() == "WAN1"){
										currentSelectPos[0] = i;
									}else{
										currentSelectPos[1] = i;
									}
								}
							}
							openCallBack();
						});
					} else {
						closeCallBack();
					}
				}
			})
		}
	}

	function initDualWanTab(){
		var dualWanTabCon = new Tab({
			list: [{
				name: label.wan1Port,
				onClick: function(){
					WAN_INDEX = 1;
					initWanSet(WAN_INDEX);
				}
			},{
				name: label.wan2Port,
				onClick: function(){
					WAN_INDEX = 2;
					initWanSet(WAN_INDEX);
				}
			}],
			targetId: "wanPortTab"
		});
	}
	function setWanOptions(moduleSpec) {
		wanOptions = [
			{str:label.pppoe, value:LINK_TYPE_PPPOE},
			{str:label.staticIp, value:LINK_TYPE_STATIC_IP},
			{str:label.dhcp,value:LINK_TYPE_DHCP}
		]
		for (var i=0; i < moduleSpec.dial_mode.length; i++) {
			switch (moduleSpec.dial_mode[i]) {
				case "wired_relay":
					wanOptions.push({str: label.wiredRepeater, value: LINK_TYPE_WIRED_REPEATER});
					break;
				case "wds_relay":
					wanOptions.push({str:label.wirelessRepeater, value: LINK_TYPE_WIRELESS_REPEATER});
					break;
			}
		}
	}
	function initWanSet(wanIndex){
		var data = {};
		var wanProtoName = "wan";
		data[uciProto.fileName] = {};
		if(wanIndex == 1 || typeof wanIndex == "undefined"){
			wanProtoName = uciProto.secName.wan;
		} else {
			wanProtoName = uciProto.secName.wan2;
		}
		data[uciProto.fileName][KEY_NAME] = wanProtoName;
		data[uciNetwork.fileName] = {};
		data[uciNetwork.fileName][KEY_NAME] = uciNetwork.secName.lan;

		data[uciFunction.fileName] = {};
		data[uciFunction.fileName][KEY_NAME] = uciFunction.secName.newModuleSpec;

		$.query(data, function(dataObj){
			var wanProto = uciProto.optValue.proto;
			var wanType = dataObj[uciProto.fileName][wanProtoName][uciProto.optName.type];
			var index = LINK_TYPE_PPPOE;
			highSetWanType = wanType;
			highSetLanConf = dataObj[uciNetwork.fileName][uciNetwork.secName.lan];
			var moduleSpec = {};
			moduleSpec = dataObj[uciFunction.fileName][uciFunction.secName.newModuleSpec];

			if (slp.gSysModeSupport){
				setWanOptions(moduleSpec);
				if (curSysMode == uciSystem.optValue.sysMode.apMode) {
					index = LINK_TYPE_WIRED_REPEATER;
				} else if (curSysMode == uciSystem.optValue.sysMode.wdsMode) {
					index = LINK_TYPE_WIRELESS_REPEATER;
				} else {
					switch (wanType)
					{
					case wanProto.dynIp:
						index = LINK_TYPE_DHCP;
						break;
					case wanProto.staticIp:
						index = LINK_TYPE_STATIC_IP;
						break;
					case wanProto.pppoe:
					default:
						index = LINK_TYPE_PPPOE;
					}
				}
			} else {
				switch (wanType)
				{
				case wanProto.dynIp:
					index = LINK_TYPE_DHCP;
					break;
				case wanProto.staticIp:
					index = LINK_TYPE_STATIC_IP;
					break;
				case wanProto.pppoe:
				default:
					index = LINK_TYPE_PPPOE;
				}
			}
			if (typeof gStartWirelessRepeater != "undefined" && gStartWirelessRepeater) {
				loadPageByIndex(LINK_TYPE_WIRELESS_REPEATER);
			} else {
				loadPageByIndex(index);
			}
		});
	}
	(function(){
		if (slp.gSysModeSupport) {
			var arg = {"network":{"name":"lan"}};
			arg.system = {"name":"sys_mode"};
			$.query(arg, function(ret) {
				curSysMode = ret.system.sys_mode.mode;
				if (curSysMode != uciSystem.optValue.sysMode.routerMode){
					$("#menuLoader .head").removeClass("dualWanHead");
					WAN_INDEX = 1;
					initWanSet(WAN_INDEX);
				} else {
					dualWanOpenCheck(function(){
						$("#menuLoader .head").addClass("dualWanHead");
						initDualWanTab();
					},function(){
						$("#menuLoader .head").removeClass("dualWanHead");
						WAN_INDEX = 1;
						initWanSet(WAN_INDEX);
					})
				}
			});
		} else {
			$("#menuLoader .head").removeClass("dualWanHead");
			WAN_INDEX = 1;
			initWanSet(WAN_INDEX);
		}
	})();
</script>
<style type="text/css">
	div.dualWanHead{
		margin-bottom: 16px;
	}
	ul.dashBoard{
		margin-bottom:-24px;
	}
	ul.dashBoard li.board{
		float:left;
		width:370px;
		height:78px;
		border:1px solid #e6e6e6;
		border-radius:4px;
	}
	ul.dashBoard li + li{
		margin-left:16px;
	}
	li.board i{
		font-size:24px;
		color:#999;
		margin:0 4px 0 16px;
		vertical-align:middle;
	}
	li.board span.speed{
		font-size:36px;
		color:#666;
		line-height:80px;
		vertical-align:middle;
		font-weight: bold;
	}
	li.board p.speedText{
		display:inline-block;
		vertical-align:middle;
		margin-left:8px;
		width:65px;
	}
	p.speedText span{
		float:left;
		width:100%;
		font-size:12px;
		color:#666;
		line-height:18px;
	}
	span.normalState i.disc{
		background:#24b353;
	}
	span.normalState span.state{
		color:#24b353;
	}
	span.abnormalState i.disc{
		background:#ff3366;
	}
	span.abnormalState span.state{
		color:#ff3366;
	}
	div.buttonGroup{
		padding:12px 0 0 132px;
		font-size:0;
	}
	span.wanPortDetectTip{
		font-size:13px;
		color: #666666;
		display: block;
		line-height:20px;
		height:20px;
		margin-top:4px;
		margin-bottom:12px;
	}
	i.wanPortDetectImg{
		margin-left:132px;
		width:240px;
		height:104px;
		display:block;
	}
	div.portImage {
		position: relative;
		display: inline-block;
		padding: 24px 0;
		margin-left: 132px;
		background: #FFFFFF;
		border: 1px solid #E6E6E6;
		border-radius: 4px;
	}
	span.port {
		display: inline-block;
		height: 58px;
		text-align: center;
	}
	span.port i {
		display: inline-block;
		width: 40px;
		height: 40px;
		margin-bottom: 6px;
	}
	span.port label {
		font-size: 12px;
		color: #808080;
	}
	span.port.selectedPort i {
		background: url(../web-static/images/port.png) no-repeat -40px 0;
	}
	span.resetPort {
		width: 64px;
	}
	span.resetPort i {
		background: url(../web-static/images/port.png) no-repeat -80px 0;
	}
	span.lanPort {
		width: 40px;
	}
	span.lanPort i {
		background: url(../web-static/images/port.png) no-repeat 0 0;
	}
	span.lanPort.selectedLAN i {
		background: url(../web-static/images/port.png) no-repeat -40px 0;
	}
	span.wanPort {
		width: 40px;
	}
	span.wanPort i {
		background: url(../web-static/images/port.png) no-repeat 0 0;
	}
	span.powerPort {
		width: 64px;
	}
	span.powerPort i {
		background: url(../web-static/images/port.png) no-repeat -120px 0;
	}
	span.meshPort {
		width: 64px;
	}
	span.meshPort i {
		background: url(../web-static/images/port.png) no-repeat -265px 0;
	}
	span.resetMeshPort {
		width: 88px;
	}
	span.resetMeshPort i {
		background: url(../web-static/images/port.png) no-repeat -305px 0;
	}
	span.lanPort:first-child,
	span.wanPort:first-child {
		margin-left: 12px;
	}
	span.lanPort:nth-last-child(1),
	span.wanPort:nth-last-child(1) {
		margin-right: 12px;
	}
	span.resetPort + span.lanPort,
	span.resetPort + span.wanPort,
	span.powerPort + span.lanPort,
	span.powerPort + span.wanPort {
		margin-left: 12px;
	}
	span.lanPort + span.resetPort,
	span.wanPort + span.resetPort,
	span.lanPort + span.powerPort,
	span.wanPort + span.powerPort {
		margin-left: 12px;
	}
	span.lanPort + span.wanPort,
	span.wanPort + span.lanPort,
	span.lanPort + span.lanPort {
		margin-left: 8px;;
	}
	span.lanWanCombo {
		display: inline-block;
		width: 200px;
		height: 16px;
	}
	span.lanWanCombo .border {
		display: inline-block;
		height: 6px;
		width: 40px;
		margin-top: 2px;
		vertical-align: top;
		border-bottom: 1px solid #e6e6e6;
		box-sizing: border-box;
	}
	span.lanWanCombo span.leftBorder {
		border-left: 1px solid #e6e6e6;
	}
	span.lanWanCombo span.rightBorder {
		border-right: 1px solid #e6e6e6;
	}
	span.lanWanCombo label {
		display: inline-block;
		width: 60px;
		height: 16px;
		margin: 0 2px;
	}
	#wanPortTab ul{
		border-bottom:2px solid #E6E6E6;
	}
	#wanPortTab ul>li{
		width: 160px;
	}
	#wanPortTab .underline{
		bottom: -2px;
	}
</style>
<div class="head">
	<div class="title"><h1>{%menuStr.wanSet%}</h1><i class="helpBtn iconfont icon-help"></i></div>
	<p class="description">{%titleDescriptionStr.wanSetDescription%}</p>
	<div id="wanPortTab"></div>
</div>
<div id="subContent"></div>