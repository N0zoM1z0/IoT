<style type="text/css">
	li.phInputLi label{
		width:110px !important;
	}
	span.phSelect span.staticIp{
		width:115px !important;
	}
	li.phInputLi input{
		width:120px !important;
	}
	div.staticIpFunc{
		margin-top:40px !important;
	}
</style>
<script type="text/javascript">
	function init()
	{
		function showPhoneNote(idStr, showStr)
		{
			id(idStr).style.display = "block";
			$("#" + idStr + " span").html(showStr);
		}

		function closePhoneNote(idStr)
		{
			id(idStr).style.display = "none";
		}

		function errHandle(errNo)
		{
			switch (errNo)
			{
			case ENONE:
				return false;
			case EINVIPFMT:
				showPhoneNote("wzdIpNote", errStr.ipAddrFmtNoteErr);
				break;
			case EINVLOOPIP:
				showPhoneNote("wzdIpNote", errStr.ipAddrLoopErr);
				break;
			case EINVGROUPIP:
				showPhoneNote("wzdIpNote", errStr.ipAddrGroupErr);
				break;
			case EINVNET:
				showPhoneNote("wzdIpNote", errStr.wzdStcIpNetErr);
				break;
			case EINVIP:
				showPhoneNote("wzdIpNote", errStr.wzdStcIpErr);
				break;
			case EINVMASK:
				showPhoneNote("wzdMaskNote", errStr.wzdStcMaskErr);
				break;
			case EINVNETID:
			case EINVHOSTID:
			case EINVIPMASKPAIR:
				showPhoneNote("wzdIpNote", errStr.wzdStcIpMaskNotMatch);
				break;
			case ECOMFLICTNET:
				showPhoneNote("wzdIpNote", errStr.wzdStcIpLanConflict);
				break;
			case EINVGTW:
				showPhoneNote("wzdGatewayNote", errStr.wzdStcGatewayErr);
				break;
			case ECONFLICTGATEWAY:
				showPhoneNote("wzdGatewayNote", errStr.wzdStcIpLanConflict);
				break;
			case EINVFDNSVR:
				showPhoneNote("wzdPrimDnsNote", errStr.wzdPrimDnsErr);
				break;
			case ECONFLICTFDNS:
				showPhoneNote("wzdPrimDnsNote", errStr.wzdStcIpLanConflict);
				break;
			case EINVSDNSVR:
				showPhoneNote("wzdSeDnsNote", errStr.wzdSeDnsErr);
				break;
			case ECONFLICTSDNS:
				showPhoneNote("wzdSeDnsNote", errStr.wzdStcIpLanConflict);
				break;
			default:
				break;
			}

			return true;
		}

		function checkGateway(value)
		{
			return ENONE != checkIp(value) ? EINVGTW : ENONE;
		}

		function checkPrimDns(value)
		{
			if (gNetworkCfg["lanIp"] == value)
			{
				return EINVFDNSVR;
			}

			return ENONE != checkIp(value) ? EINVFDNSVR : ENONE;
		}

		function checkSeDns(value)
		{
			if ("" == value || "0.0.0.0" == value)
			{
				id("dns1In").value = "0.0.0.0";
				return ENONE;
			}

			if (gNetworkCfg["lanIp"] == value)
			{
				return EINVSDNSVR;
			}

			return ENONE != checkIp(value) ? EINVSDNSVR : ENONE;
		}

		/* 去掉IP地址中的前导0 */
		function fmtIpAddr(idStr)
		{
			var fmtVal = hideLeadingZeros(id(idStr).value)
			id(idStr).value = fmtVal;
			return fmtVal;
		}

		function onSave()
		{
			var ipVal = id("ipAddrIn").value;
			var maskVal = id("netMaskIn").value;
			var gatewayVal = id("gatewayIn").value;
			var primDnsVal = id("dns0In").value;
			var seDnsVal = id("dns1In").value;

			closePhoneNote("wzdIpNote");
			closePhoneNote("wzdMaskNote");
			closePhoneNote("wzdGatewayNote");
			closePhoneNote("wzdPrimDnsNote");
			closePhoneNote("wzdSeDnsNote");

			/* 检查合法性 */
			if (errHandle(checkIp(ipVal)) ||
				errHandle(checkMask(maskVal)) ||
				errHandle(checkIpMask(ipVal, maskVal)) ||
				errHandle(checkGateway(gatewayVal)) ||
				errHandle(checkPrimDns(primDnsVal)) ||
				errHandle(checkSeDns(seDnsVal)))
			{
				return;
			}

			/* 去掉IP地址中的前导0 */
			ipVal = fmtIpAddr("ipAddrIn");
			maskVal = fmtIpAddr("netMaskIn");
			gatewayVal = fmtIpAddr("gatewayIn");
			primDnsVal = fmtIpAddr("dns0In");
			seDnsVal = fmtIpAddr("dns1In");

			saveNetworkCfg(uciProto.optValue.proto.staticIp, function(result){
				var errCode = result[ERR_CODE];

				if (ENONE != errCode)
				{
					errHandle(errCode);
				}
				else
				{
					loadPage("WizardWirelessCfg.htm", "phCon");
				}
			});
		}

		wzdSelectInit("netModeSel", wzOptions, WAN_TYPE_STATIC, wzdNetWorkModeChange);
		id("sub").onclick = onSave;

		/* 修复IOS系统CNA浏览器默认使用第三方输入法无法输入的问题 */
		adaptCNABrowserInput("ipAddrIn");
		adaptCNABrowserInput("netMaskIn");
		adaptCNABrowserInput("gatewayIn");
		adaptCNABrowserInput("dns0In");
		adaptCNABrowserInput("dns1In");

		showNetworkCfg(uciProto.optValue.proto.staticIp);
	}
	init();
</script>
<h1 class="phoneTitle">{%label.netSet%}</h1>
<ul class="phInputUl">
	<li class="phInputLi">
		<label for="netModeSel">{%label.netMode%}</label>
		<i class="clapboard"></i>
		<span id="netModeSel" class="phSelect">
			<span class="value staticIp">{%label.staticIp%}</span>
			<i class="arrow"></i>
		</span>
	</li>
</ul>
<ul class="phInputUl">
	<li class="phInputLi">
		<label for="ipAddrIn">{%label.ipAddr%}</label>
		<i class="clapboard"></i>
		<input id="ipAddrIn" maxlength="15" />
	</li>
	<li id="wzdIpNote" class="phErrTip disNone">
		<i class="error"></i><span class="errDes"></span>
	</li>
</ul>
<ul class="phInputUl">
	<li class="phInputLi">
		<label for="netMaskIn">{%label.mask%}</label>
		<i class="clapboard"></i>
		<input id="netMaskIn" maxlength="15" />
	</li>
	<li id="wzdMaskNote" class="phErrTip disNone">
		<i class="error"></i><span class="errDes"></span>
	</li>
</ul>
<ul class="phInputUl">
	<li class="phInputLi">
		<label for="gatewayIn">{%label.gateway%}</label>
		<i class="clapboard"></i>
		<input id="gatewayIn" maxlength="15" />
	</li>
	<li id="wzdGatewayNote" class="phErrTip disNone">
		<i class="error"></i><span class="errDes"></span>
	</li>
</ul>
<ul class="phInputUl">
	<li class="phInputLi">
		<label for="dns0In">{%label.dns0%}</label>
		<i class="clapboard"></i>
		<input id="dns0In" maxlength="15" />
	</li>
	<li id="wzdPrimDnsNote" class="phErrTip disNone">
		<i class="error"></i><span class="errDes"></span>
	</li>
</ul>
<ul class="phInputUl">
	<li class="phInputLi">
		<label for="dns1In">{%label.dns1%}</label>
		<i class="clapboard"></i>
		<input id="dns1In" maxlength="15" />
	</li>
	<li id="wzdSeDnsNote" class="phErrTip disNone">
		<i class="error"></i><span class="errDes"></span>
	</li>
</ul>
<div class="phFunc staticIpFunc">
	<label id="sub" class="phOneBtn">{%btn.nextStep%}</label>
</div>