<style type="text/css">
	div.page{
		position:relative;
		display:none;
	}
	div.basicNetworkCon ul.selectUl{
		margin-top:28px;
	}
	div.basicNetworkCon ul.inputCMPT{
		margin-left:84px;
	}
	div.basicNetworkCon ul.inputCMPT li.inputLi{
		width:280px;
	}
	p.networkAbnormal{
		display:none;
		position:absolute;
		left:85px;
		top:-92px;
		z-index:1;
	}
	p.notice{
		font-size:13px;
		color:#666;
		padding-left:189px;
		line-height:20px;
	}
	p#bridgeWarning{
		display: none;
		width: 720px;
		margin-bottom: 24px;
	}
</style>
<script type="text/javascript">
	(function(){
		var BasicWanType, BasicLanConf;

		function errHandle(errNo)
		{
			var showStr = "";

			switch (errNo)
			{
			case ENONE:
				return true;
			case EINVNET:
				showStr = errStr.ipAddrNetErr;
				break;
			case EINVIP:
				showStr = errStr.ipAddrErr;
				break;
			case EINVIPFMT:
				showStr = errStr.ipAddrFmtNoteErr;
				break;
			case EINVGROUPIP:
				showStr = errStr.ipAddrGroupErr;
				break;
			case EINVLOOPIP:
				showStr = errStr.ipAddrLoopErr;
				break;
			case EINVNETID:
			case EINVHOSTID:
			case EINVIPMASKPAIR:
				showStr = errStr.ipAddrMaskNotMatch;
				break;
			case ECOMFLICTNET:
				showStr = errStr.ipAddrLanWanConflict;
				break;
			case EINVGTW:
				showStr = errStr.wzdStcGatewayErr;
				break;
			case ECONFLICTGATEWAY:
				gateway.showNote(errStr.wzdStcIpLanConflict);
				return false;
			case EINVFDNSVR:
				showStr = errStr.wzdPrimDnsErr;
				break;
			case ECONFLICTFDNS:
				priDns.showNote(errStr.wzdStcIpLanConflict);
				return false;
			case EINVSDNSVR:
				showStr = errStr.wzdSeDnsErr;
				break;
			case ECONFLICTSDNS:
				sndDns.showNote(errStr.wzdStcIpLanConflict);
				return false;
			case ENOLINK:
				showStr = errStr.wanLinkDown;
				break;
			default:
				showStr = errStr.unknown + errNo;
				break;
			}

			alarmDialog.show(showStr);
			return false;
		}

		function checkLanConflict(ipVal, maskVal)
		{
			var lanIp = transIp(BasicLanConf[uciNetwork.optName.ip]), lanMask = transIp(BasicLanConf[uciNetwork.optName.netmask]);
			var stcIp = transIp(ipVal), stcMask = transIp(maskVal);

			return (0 == ((lanIp ^ stcIp) & lanMask & stcMask)) ? ECOMFLICTNET : ENONE;
		}

		function checkIpAddr()
		{
			if ("" == this.input.value)
			{
				this.showNote(errStr.wzdStcIpEmpty);
				return false;
			}
			else if (!checkInputIp.call(this))
			{
				return false;
			}

			return checkIpMaskRelate();
		}

		function checkMaskAddr()
		{
			if ("" == this.input.value)
			{
				this.showNote(errStr.wzdStcMaskEmpty);
				return false;
			}
			else if (ENONE != checkMask(this.input.value))
			{
				this.showNote(errStr.wzdStcMaskErr);
				return false;
			}

			return checkIpMaskRelate();
		}

		function checkIpMaskRelate()
		{
			if ("" != netmask.getValue() 					&&
				"0.0.0.0" != netmask.getValue()			&&
				"" != ipAddr.getValue()						&&
				"0.0.0.0" != ipAddr.getValue()				&&
				ENONE == checkMask(netmask.getValue())		&&
				ENONE == checkIp(ipAddr.getValue()))
			{
				if (ENONE != checkIpMask(ipAddr.getValue(), netmask.getValue()))
				{
					netmask.showNote(errStr.wzdStcIpMaskNotMatch);
					return false;
				}
				else
				{
					netmask.closeNote();
				}

				if (ENONE != checkLanConflict(ipAddr.getValue(), netmask.getValue()))
				{
					ipAddr.showNote(errStr.wzdStcIpLanConflict);
					return false;
				}
				else
				{
					ipAddr.closeNote();
				}
			}

			return true;
		}

		function commonCheck(blank, error)
		{
			if ("" == this.input.value)
			{
				/* 不允许为空 */
				if (blank)
				{
					this.showNote(blank);
					return false;
				}
			}
			else if (ENONE != checkIp(this.input.value))
			{
				this.showNote(error);
				return false;
			}

			return true;
		}

		function checkGateway()
		{
			return commonCheck.call(this, errStr.wzdStcGatewayEmpty, errStr.wzdStcGatewayErr);
		}

		function checkPriDns()
		{
			return commonCheck.call(this, errStr.wzdPrimDnsEmpty, errStr.wzdPrimDnsErr);
		}

		function checkSecDns()
		{
			if ("0.0.0.0" == this.input.value)
			{
				return true;
			}

			return commonCheck.call(this, null, errStr.wzdSeDnsErr);
		}

		/* 保存为PPPoE */
		function pppoeConnect()
		{
			var self = this;
			var data = {};

			data[uciProto.secName.wan] = {};
			data[uciProto.secName.wan][uciProto.optName.type] = uciProto.optValue.proto.pppoe;
			data[uciProto.secName.pppoe] = {};
			data[uciProto.secName.pppoe][uciProto.optName.pppoeUsr] = account.getValue();
			data[uciProto.secName.pppoe][uciProto.optName.pppoePwd] = pwd.getValue();

			pppoeSub.disable(true);
			slp.protocol.setData({
				data: data,
				success: function(){
					BasicWanType = uciProto.optValue.proto.pppoe;
					pppoeConnectAction();
				},
				fail: function(result){
					pppoeSub.disable(false);
					errHandle(result[ERR_CODE]);
				}
			});
		}

		/* 连接PPPoE服务器 */
		function pppoeConnectAction()
		{
			var data = {};

			data = {"network":{"change_wan_status":{"proto":"pppoe","operate":"connect"}}};

			$.action(data, function(result){
				pppoeSub.disable(false);
				errHandle(result[ERR_CODE]);
			});
		}

		/* 断开PPPoE服务器 */
		function pppoeDisconnect()
		{
			var self = this;
			var data = {"network":{"change_wan_status":{"proto":"pppoe","operate":"disconnect"}}};

			pppoeRelease.disable(true);
			$.action(data, function(result){
				pppoeRelease.disable(false);
				errHandle(result[ERR_CODE]);
			});
		}

		/* 连接DHCP服务器 */
		function dhcpConnect()
		{
			if (BasicWanType == uciProto.optValue.proto.dynIp)
			{
				dhcpUpdate();
				return;
			}

			var self = this;
			var data = {};

			data[uciProto.secName.wan] = {};
			data[uciProto.secName.wan][uciProto.optName.type] = uciProto.optValue.proto.dynIp;

			dhcpSub.disable(true);
			slp.protocol.setData({
				data: data,
				success: function(){
					BasicWanType = uciProto.optValue.proto.dynIp;
					dhcpSub.disable(false);
				},
				fail: function(result){
					dhcpSub.disable(false);
					errHandle(result[ERR_CODE]);
				}
			});
		}

		/* 更新IP */
		function dhcpUpdate()
		{
			var self = this;
			var data = {"network":{"change_wan_status":{"proto":"dhcp", "operate":"renew"}}};

			dhcpSub.disable(true);
			$.action(data, function(result){
				dhcpSub.disable(false);
				errHandle(result[ERR_CODE]);
			});
		}

		function dhcpRelease()
		{
			var self = this;
			var data = {"network":{"change_wan_status":{"proto":"dhcp", "operate":"release"}}};

			dhcpRelease.disable(true);
			$.action(data, function(result){
				dhcpRelease.disable(false);
				errHandle(result[ERR_CODE]);
			});
		}

		/* 保存静态IP地址 */
		function setStaticIp()
		{
			var self = this;
			var checkRes = true;
			var inputArr = [ipAddr, netmask, gateway, priDns, sndDns];

			gateway.closeNote();
			priDns.closeNote();
			sndDns.closeNote();

			inputArr.forEach(function(o){
				o.setValue(hideLeadingZeros(o.getValue()));
				checkRes = o.checkAll() && checkRes;
			});

			/* 输入非法 */
			if (!checkRes)
			{
				return;
			}

			var data = {};
			data[uciProto.secName.wan] = {};
			data[uciProto.secName.wan][uciProto.optName.type] = uciProto.optValue.proto.staticIp;

			data[uciProto.secName.sta] = {};
			data[uciProto.secName.sta][uciProto.optName.ip] = ipAddr.getValue();
			data[uciProto.secName.sta][uciProto.optName.netmask] = netmask.getValue();
			data[uciProto.secName.sta][uciProto.optName.gateway] = gateway.getValue();
			data[uciProto.secName.sta][uciProto.optName.priDns] = priDns.getValue();
			data[uciProto.secName.sta][uciProto.optName.sndDns] = sndDns.getValue();

			staticSub.disable(true);
			slp.protocol.setData({
				data: data,
				success: function(){
					BasicWanType = uciProto.optValue.proto.staticIp;
					staticSub.disable(false);
				},
				fail: function(result){
					staticSub.disable(false);
					errHandle(result[ERR_CODE]);
				}
			});
		}

		function setPPPoEStatus(res)
		{
			var linkStatus = parseInt(res[uciNetwork.optName.wanStatus]);
			var errorCode = parseInt(res[uciNetwork.optName.code]);

			var ip = res[uciNetwork.optName.ip] || "0.0.0.0";
			var priDns = res[uciNetwork.optName.priDns] || "0.0.0.0";
			var sndDns = res[uciNetwork.optName.sndDns] || "0.0.0.0";

			switch(linkStatus)
			{
			case LINK_DOWN:
			case LINKING_UP:
				if (LINK_CODE_AUTH_ERR == errorCode)
				{
					$("p.networkAbnormal").css("display", "table");
				}
				else
				{
					$("p.networkAbnormal").css("display", "none");
				}

				pppoeIpAddrAuto.setValue("0.0.0.0");
				pppoeDnsAuto.setValue("0.0.0.0 , 0.0.0.0");

				pppoeRelease.disable(linkStatus == LINK_DOWN ? true : false);

				break;
			case LINK_UP:
				$("p.networkAbnormal").css("display", "none");

				pppoeIpAddrAuto.setValue(ip);
				pppoeDnsAuto.setValue(priDns + " , " + sndDns);
				pppoeRelease.disable(false);

				break;
			case LINKING_DOWN:
				$("p.networkAbnormal").css("display", "none");

				pppoeIpAddrAuto.setValue("0.0.0.0");
				pppoeDnsAuto.setValue("0.0.0.0 , 0.0.0.0");

				pppoeRelease.disable(true);

			default:
				$("p.networkAbnormal").css("display", "none");
				break;
			}
		}

		function setDHCPStatus(res)
		{
			switch(parseInt(res[uciNetwork.optName.wanStatus]))
			{
			case LINK_UP:
				var dns = "";
				var priDns = res[uciNetwork.optName.priDns] || "0.0.0.0";
				var sndDns = res[uciNetwork.optName.sndDns] || "0.0.0.0";

				dns = priDns + " , " + sndDns;

				dhcpIpAddrAuto.setValue(res[uciNetwork.optName.ip]);
				dhcpNetmaskAuto.setValue(res[uciNetwork.optName.netmask]);
				dhcpGatewayAuto.setValue(res[uciNetwork.optName.gateway]);
				dhcpDnsAuto.setValue(dns);

				dhcpSub.setState({
					text: btn.renew,
					onClick: dhcpUpdate
				});
				dhcpRelease.disable(false);
				break;
			case LINK_DOWN:
				dhcpIpAddrAuto.setValue("0.0.0.0");
				dhcpNetmaskAuto.setValue("0.0.0.0");
				dhcpGatewayAuto.setValue("0.0.0.0");
				dhcpDnsAuto.setValue("0.0.0.0 , 0.0.0.0");

				dhcpSub.setState({
					text: btn.connect,
					onClick: dhcpConnect
				});
				dhcpRelease.disable(true);
				break;
			case LINKING_UP:
				dhcpIpAddrAuto.setValue("0.0.0.0");
				dhcpNetmaskAuto.setValue("0.0.0.0");
				dhcpGatewayAuto.setValue("0.0.0.0");
				dhcpDnsAuto.setValue("0.0.0.0 , 0.0.0.0");

				dhcpSub.setState({
					text: btn.connect,
					onClick: dhcpConnect
				});
				dhcpRelease.disable(false);
				break;
			case LINKING_DOWN:
				dhcpIpAddrAuto.setValue("0.0.0.0");
				dhcpNetmaskAuto.setValue("0.0.0.0");
				dhcpGatewayAuto.setValue("0.0.0.0");
				dhcpDnsAuto.setValue("0.0.0.0 , 0.0.0.0");

				dhcpSub.setState({
					text: btn.connect,
					onClick: dhcpConnect
				});
				dhcpRelease.disable(true);
				break;
			default:
				break;
			}
		}

		function refreshWanStatus()
		{
			slp.latestWanStatus(function(res){
				switch(res[uciNetwork.optName.proto])
				{
				case uciNetwork.optValue.proto.pppoe:
					setPPPoEStatus(res);
					break;
				case uciNetwork.optValue.proto.dynIp:
					setDHCPStatus(res);
					break;
				case uciNetwork.optValue.proto.staticIp:
				default:
					break;
				}

				refreshHandle = $.setTimeout(refreshWanStatus, 1000);
			}, true);
		}

		function changePage(value)
		{
			var orderArr = [LINK_TYPE_PPPOE, LINK_TYPE_STATIC_IP, LINK_TYPE_DHCP];
			orderArr.forEach(function(v, index){
				var target = $("div.page")[index];
				target.style.display = (v == value) ? "block" :"none";
			});
		}

		var refreshHandle = null;

		/* 宽带拨号上网组件 */
		var account = new Input({
			type:Input.TYPE.PLAIN_TEXT,
			label:{value:label.netAccount},
			targetId:"pppoeInput",
			props:{maxlength: '118', type: "text"}});
		var pwd = new Input({
			type:Input.TYPE.PLAIN_TEXT,
			label:{value:label.netPwd},
			targetId:"pppoeInput",
			props:{maxlength: '118', type: "text"}});
		var pppoeIpAddrAuto = new Input({
			type:Input.TYPE.STATIC_TEXT,
			label:{value:label.ipAddr},
			targetId:"pppoeInput",
			props:{value:"0.0.0.0", maxlength: '15', type: "text"}});
		var pppoeDnsAuto = new Input({
			type:Input.TYPE.STATIC_TEXT,
			label:{value:label.dns},
			targetId:"pppoeInput",
			props:{value:"0.0.0.0 , 0.0.0.0", type: "text"}});
		var pppoeSub = new Button({
			text:btn.connect,
			onClick:pppoeConnect,
			type:Button.TYPE.PRIMARY,
			id:"subP",
			props:{width:"280px", margin:"12px 0 0 216px"}
		});
		var pppoeRelease = new Button({
			text:btn.disconnect,
			onClick:pppoeDisconnect,
			type:Button.TYPE.SECONDARY,
			id:"cancleP",
			props:{width:"280px", margin:"12px 0 0 216px"}
		});
		pppoeRelease.disable(true);

		/* 固定IP地址组件 */
		var ipAddr = new Input({
			type:Input.TYPE.PLAIN_TEXT,
			label:{value:label.ipAddr},
			targetId:"staticInput",
			check:{blur:checkIpAddr},
			props:{maxlength: '15', type: "text", placeholder:"0.0.0.0"}});
		var netmask = new Input({
			type:Input.TYPE.PLAIN_TEXT,
			label:{value:label.mask},
			targetId:"staticInput",
			check:{blur:checkMaskAddr},
			props:{maxlength: '15', type: "text", placeholder:"0.0.0.0"}});
		var gateway = new Input({
			type:Input.TYPE.PLAIN_TEXT,
			label:{value:label.gateway},
			targetId:"staticInput",
			check:{blur:checkGateway},
			props:{maxlength: '15', type: "text", placeholder:"0.0.0.0"}});
		var priDns = new Input({
			type:Input.TYPE.PLAIN_TEXT,
			label:{value:label.preferredDnsServer},
			targetId:"staticInput",
			check:{blur:checkPriDns},
			props:{maxlength: '15', type: "text", placeholder:"0.0.0.0"}});
		var sndDns = new Input({
			type:Input.TYPE.PLAIN_TEXT,
			label:{value:label.alternativeDnsServer},
			targetId:"staticInput",
			check:{blur:checkSecDns},
			props:{maxlength: '15', type: "text", placeholder:"0.0.0.0"}});
		var staticSub = new Button({
			text:btn.connect,
			onClick:setStaticIp,
			type:Button.TYPE.PRIMARY,
			id:"subS",
			props:{width:"280px", margin:"12px 0 0 216px"}
		});

		/* 自动获取IP地址组件 */
		var dhcpIpAddrAuto = new Input({
			type:Input.TYPE.STATIC_TEXT,
			label:{value:label.ipAddr},
			targetId:"dhcpInput",
			props:{value:"0.0.0.0", maxlength: '15', type: "text"}});
		var dhcpNetmaskAuto = new Input({
			type:Input.TYPE.STATIC_TEXT,
			label:{value:label.mask},
			targetId:"dhcpInput",
			props:{value:"0.0.0.0", maxlength: '15', type: "text"}});
		var dhcpGatewayAuto = new Input({
			type:Input.TYPE.STATIC_TEXT,
			label:{value:label.gateway},
			targetId:"dhcpInput",
			props:{value:"0.0.0.0", maxlength: '15', type: "text"}});
		var dhcpDnsAuto = new Input({
			type:Input.TYPE.STATIC_TEXT,
			label:{value:label.dns},
			targetId:"dhcpInput",
			props:{value:"0.0.0.0 , 0.0.0.0", type: "text"}});
		var dhcpSub = new Button({
			text:btn.connect,
			onClick:dhcpConnect,
			type:Button.TYPE.PRIMARY,
			id:"subD",
			props:{width:"280px", margin:"12px 0 0 216px"}
		});
		var dhcpRelease = new Button({
			text:btn.disconnect,
			onClick:dhcpRelease,
			type:Button.TYPE.SECONDARY,
			id:"cancleD",
			props:{width:"280px", margin:"12px 0 0 216px"}
		});
		dhcpRelease.disable(true);

		(function(){
			var wanData;

			var dfdProto = $.Deferred(),
				dfdLan = $.Deferred();

			var options = [{
				str:label.pppoe,
				value:LINK_TYPE_PPPOE
			},{
				str:label.staticIp,
				value:LINK_TYPE_STATIC_IP
			},{
				str:label.dhcp,
				value:LINK_TYPE_DHCP
			}];

			/* 获取基本配置 */
			slp.protocol.getData({
				success: function(res){
					wanData = res;
					dfdProto.resolve();
				}
			});

			/* 获取LAN口配置 */
			var data = {};
			data[uciNetwork.fileName] = {};
			data[uciNetwork.fileName][KEY_NAME] = uciNetwork.secName.lan;

			$.query(data, function(res){
				if (ENONE == res[ERR_CODE])
				{
					BasicLanConf = res[uciNetwork.fileName][uciNetwork.secName.lan];
					dfdLan.resolve();
				}
			});

			$.when(dfdProto, dfdLan).done(function(){
				var selValue;

				BasicWanType = wanData[uciProto.fileName][uciProto.secName.wan][uciProto.optName.type];
				switch(wanData[uciProto.fileName][uciProto.secName.wan][uciProto.optName.type])
				{
					case uciProto.optValue.proto.dynIp:
						selValue = LINK_TYPE_DHCP;
						break;
					case uciProto.optValue.proto.staticIp:
						selValue = LINK_TYPE_STATIC_IP;
						break;
					case uciProto.optValue.proto.pppoe:
						selValue = LINK_TYPE_PPPOE;
						break;
					default:
						selValue = LINK_TYPE_PPPOE;
						break;
				}

				selectInit("netModeSel", options, selValue, changePage);
				changePage(selValue);

				var pppoeAuthInfo = wanData[uciProto.fileName][uciProto.secName.pppoe];
				account.setValue(pppoeAuthInfo[uciProto.optName.pppoeUsr]);
				pwd.setValue(pppoeAuthInfo[uciProto.optName.pppoePwd]);

				var staticIpInfo = wanData[uciProto.fileName][uciProto.secName.sta];
				ipAddr.setValue(staticIpInfo[uciProto.optName.ip]);
				netmask.setValue(staticIpInfo[uciProto.optName.netmask]);
				gateway.setValue(staticIpInfo[uciProto.optName.gateway]);
				priDns.setValue(staticIpInfo[uciProto.optName.priDns]);
				sndDns.setValue(staticIpInfo[uciProto.optName.sndDns] || "");

				refreshWanStatus();
			});

			if (slp.modeSwitchSupport)
			{
				getBridgeStatus(function(bridgeEnable){
					/* 桥模式下禁止更改上网模式及其他设置 */
					if (bridgeEnable)
					{
						id("netModeSel").disable(true);
						$("#netModeSelUl").hide();
						var staticWanSel = new Input({
							type:Input.TYPE.STATIC_TEXT,
							label:{value:label.netMode},
							targetId:"staticWanSel"
						});
						staticWanSel.setValue(label.dhcp);
						$("#staticWanSel").show();
						$(".notice, #subD, #cancleD").hide();
						$("#bridgeWarning").show();
					}
					else
					{
						$("#staticWanSel").hide();
					}
				});
			}
		})();

	})();
</script>
<div class="basicNetworkCon">
		<p id="bridgeWarning" class="commonErrTip">{%label.bridgeWanWarning%}</p>
	<p class="notice">{%titleDescriptionStr.wanSetDescription%}</p>
	<ul id="netModeSelUl" class="inputCMPT medium selectUl">
		<label class="outerLbl">{%label.netMode%}</label>
		<li class="inputLi">
			<span class="selectWrap">
				<span id="netModeSel" class="select">
					<span class="value"></span>
					<i class="arrow iconfont icon-folddropdown"></i>
				</span>
			</span>
		</li>
	</ul>
	<div id="staticWanSel"></div>
	<div class="page">
		<p class="networkAbnormal commonErrTip"><i class="iconfont icon-error"></i>{%errStr.linkAuthErrToCustomerService%}</p>
		<div id="pppoeInput"></div>
		<div id="subP"></div>
		<div id="cancleP"></div>
	</div>
	<div class="page">
		<div id="staticInput"></div>
		<div id="subS"></div>
	</div>
	<div class="page">
		<div id="dhcpInput"></div>
		<div id="subD"></div>
		<div id="cancleD"></div>
	</div>
</div>